{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\n/* eslint no-nested-ternary: off */\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nvar Gauge =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Gauge, _Framework7Class);\n\n  function Gauge(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Gauge);\n\n    // Extends with open/close Modal methods;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Gauge).call(this, app, params));\n\n    var gauge = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = Utils.extend({}, app.params.gauge); // Extend defaults with modules params\n\n    gauge.useModulesParams(defaults);\n    gauge.params = Utils.extend(defaults, params);\n    var el = gauge.params.el;\n    if (!el) return _possibleConstructorReturn(_this, gauge);\n    var $el = $(el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, gauge);\n    if ($el[0].f7Gauge) return _possibleConstructorReturn(_this, $el[0].f7Gauge);\n    Utils.extend(gauge, {\n      app: app,\n      $el: $el,\n      el: $el && $el[0]\n    });\n    $el[0].f7Gauge = gauge; // Install Modules\n\n    gauge.useModules();\n    gauge.init();\n    return _possibleConstructorReturn(_this, gauge);\n  }\n\n  _createClass(Gauge, [{\n    key: \"calcRadius\",\n    value: function calcRadius() {\n      var gauge = this;\n      var _gauge$params = gauge.params,\n          size = _gauge$params.size,\n          borderWidth = _gauge$params.borderWidth;\n      return size / 2 - borderWidth / 2;\n    }\n  }, {\n    key: \"calcBorderLength\",\n    value: function calcBorderLength() {\n      var gauge = this;\n      var radius = gauge.calcRadius();\n      return 2 * Math.PI * radius;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var gauge = this;\n      if (gauge.params.render) return gauge.params.render.call(gauge, gauge);\n      var _gauge$params2 = gauge.params,\n          type = _gauge$params2.type,\n          value = _gauge$params2.value,\n          size = _gauge$params2.size,\n          bgColor = _gauge$params2.bgColor,\n          borderBgColor = _gauge$params2.borderBgColor,\n          borderColor = _gauge$params2.borderColor,\n          borderWidth = _gauge$params2.borderWidth,\n          valueText = _gauge$params2.valueText,\n          valueTextColor = _gauge$params2.valueTextColor,\n          valueFontSize = _gauge$params2.valueFontSize,\n          valueFontWeight = _gauge$params2.valueFontWeight,\n          labelText = _gauge$params2.labelText,\n          labelTextColor = _gauge$params2.labelTextColor,\n          labelFontSize = _gauge$params2.labelFontSize,\n          labelFontWeight = _gauge$params2.labelFontWeight;\n      var semiCircle = type === 'semicircle';\n      var radius = gauge.calcRadius();\n      var length = gauge.calcBorderLength();\n      var progress = Math.max(Math.min(value, 1), 0);\n      return \"\\n      <svg class=\\\"gauge-svg\\\" width=\\\"\".concat(size, \"px\\\" height=\\\"\").concat(semiCircle ? size / 2 : size, \"px\\\" viewBox=\\\"0 0 \").concat(size, \" \").concat(semiCircle ? size / 2 : size, \"\\\">\\n        \").concat(semiCircle ? \"\\n          <path\\n            class=\\\"gauge-back-semi\\\"\\n            d=\\\"M\".concat(size - borderWidth / 2, \",\").concat(size / 2, \" a1,1 0 0,0 -\").concat(size - borderWidth, \",0\\\"\\n            stroke=\\\"\").concat(borderBgColor, \"\\\"\\n            stroke-width=\\\"\").concat(borderWidth, \"\\\"\\n            fill=\\\"\").concat(bgColor || 'none', \"\\\"\\n          />\\n          <path\\n            class=\\\"gauge-front-semi\\\"\\n            d=\\\"M\").concat(size - borderWidth / 2, \",\").concat(size / 2, \" a1,1 0 0,0 -\").concat(size - borderWidth, \",0\\\"\\n            stroke=\\\"\").concat(borderColor, \"\\\"\\n            stroke-width=\\\"\").concat(borderWidth, \"\\\"\\n            stroke-dasharray=\\\"\").concat(length / 2, \"\\\"\\n            stroke-dashoffset=\\\"\").concat(length / 2 * (1 + progress), \"\\\"\\n            fill=\\\"\").concat(borderBgColor ? 'none' : bgColor || 'none', \"\\\"\\n          />\\n        \") : \"\\n          \".concat(borderBgColor ? \"\\n            <circle\\n              class=\\\"gauge-back-circle\\\"\\n              stroke=\\\"\".concat(borderBgColor, \"\\\"\\n              stroke-width=\\\"\").concat(borderWidth, \"\\\"\\n              fill=\\\"\").concat(bgColor || 'none', \"\\\"\\n              cx=\\\"\").concat(size / 2, \"\\\"\\n              cy=\\\"\").concat(size / 2, \"\\\"\\n              r=\\\"\").concat(radius, \"\\\"\\n            ></circle>\\n          \") : '', \"\\n          <circle\\n            class=\\\"gauge-front-circle\\\"\\n            transform=\\\"\", \"rotate(-90 \".concat(size / 2, \" \").concat(size / 2, \")\"), \"\\\"\\n            stroke=\\\"\").concat(borderColor, \"\\\"\\n            stroke-width=\\\"\").concat(borderWidth, \"\\\"\\n            stroke-dasharray=\\\"\").concat(length, \"\\\"\\n            stroke-dashoffset=\\\"\").concat(length * (1 - progress), \"\\\"\\n            fill=\\\"\").concat(borderBgColor ? 'none' : bgColor || 'none', \"\\\"\\n            cx=\\\"\").concat(size / 2, \"\\\"\\n            cy=\\\"\").concat(size / 2, \"\\\"\\n            r=\\\"\").concat(radius, \"\\\"\\n          ></circle>\\n        \"), \"\\n        \").concat(valueText ? \"\\n          <text\\n            class=\\\"gauge-value-text\\\"\\n            x=\\\"50%\\\"\\n            y=\\\"\".concat(semiCircle ? '100%' : '50%', \"\\\"\\n            font-weight=\\\"\").concat(valueFontWeight, \"\\\"\\n            font-size=\\\"\").concat(valueFontSize, \"\\\"\\n            fill=\\\"\").concat(valueTextColor, \"\\\"\\n            dy=\\\"\").concat(semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0, \"\\\"\\n            text-anchor=\\\"middle\\\"\\n            dominant-baseline=\\\"\").concat(!semiCircle && 'middle', \"\\\"\\n          >\").concat(valueText, \"</text>\\n        \") : '', \"\\n        \").concat(labelText ? \"\\n          <text\\n            class=\\\"gauge-label-text\\\"\\n            x=\\\"50%\\\"\\n            y=\\\"\".concat(semiCircle ? '100%' : '50%', \"\\\"\\n            font-weight=\\\"\").concat(labelFontWeight, \"\\\"\\n            font-size=\\\"\").concat(labelFontSize, \"\\\"\\n            fill=\\\"\").concat(labelTextColor, \"\\\"\\n            dy=\\\"\").concat(semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0, \"\\\"\\n            text-anchor=\\\"middle\\\"\\n            dominant-baseline=\\\"\").concat(!semiCircle && 'middle', \"\\\"\\n          >\").concat(labelText, \"</text>\\n        \") : '', \"\\n      </svg>\\n    \").trim();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var newParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var gauge = this;\n      var params = gauge.params,\n          $gaugeSvgEl = gauge.$gaugeSvgEl;\n      Object.keys(newParams).forEach(function (param) {\n        if (typeof newParams[param] !== 'undefined') {\n          params[param] = newParams[param];\n        }\n      });\n      if ($gaugeSvgEl.length === 0) return gauge;\n      var value = params.value,\n          size = params.size,\n          bgColor = params.bgColor,\n          borderBgColor = params.borderBgColor,\n          borderColor = params.borderColor,\n          borderWidth = params.borderWidth,\n          valueText = params.valueText,\n          valueTextColor = params.valueTextColor,\n          valueFontSize = params.valueFontSize,\n          valueFontWeight = params.valueFontWeight,\n          labelText = params.labelText,\n          labelTextColor = params.labelTextColor,\n          labelFontSize = params.labelFontSize,\n          labelFontWeight = params.labelFontWeight;\n      var length = gauge.calcBorderLength();\n      var progress = Math.max(Math.min(value, 1), 0);\n      var radius = gauge.calcRadius();\n      var semiCircle = params.type === 'semicircle';\n      var svgAttrs = {\n        width: \"\".concat(size, \"px\"),\n        height: \"\".concat(semiCircle ? size / 2 : size, \"px\"),\n        viewBox: \"0 0 \".concat(size, \" \").concat(semiCircle ? size / 2 : size)\n      };\n      Object.keys(svgAttrs).forEach(function (attr) {\n        $gaugeSvgEl.attr(attr, svgAttrs[attr]);\n      });\n\n      if (semiCircle) {\n        var backAttrs = {\n          d: \"M\".concat(size - borderWidth / 2, \",\").concat(size / 2, \" a1,1 0 0,0 -\").concat(size - borderWidth, \",0\"),\n          stroke: borderBgColor,\n          'stroke-width': borderWidth,\n          fill: bgColor || 'none'\n        };\n        var frontAttrs = {\n          d: \"M\".concat(size - borderWidth / 2, \",\").concat(size / 2, \" a1,1 0 0,0 -\").concat(size - borderWidth, \",0\"),\n          stroke: borderColor,\n          'stroke-width': borderWidth,\n          'stroke-dasharray': length / 2,\n          'stroke-dashoffset': length / 2 * (progress - 1),\n          fill: borderBgColor ? 'none' : bgColor || 'none'\n        };\n        Object.keys(backAttrs).forEach(function (attr) {\n          $gaugeSvgEl.find('.gauge-back-semi').attr(attr, backAttrs[attr]);\n        });\n        Object.keys(frontAttrs).forEach(function (attr) {\n          $gaugeSvgEl.find('.gauge-front-semi').attr(attr, frontAttrs[attr]);\n        });\n      } else {\n        var _backAttrs = {\n          stroke: borderBgColor,\n          'stroke-width': borderWidth,\n          fill: bgColor || 'none',\n          cx: size / 2,\n          cy: size / 2,\n          r: radius\n        };\n        var _frontAttrs = {\n          transform: \"rotate(-90 \".concat(size / 2, \" \").concat(size / 2, \")\"),\n          stroke: borderColor,\n          'stroke-width': borderWidth,\n          'stroke-dasharray': length,\n          'stroke-dashoffset': length * (1 - progress),\n          fill: borderBgColor ? 'none' : bgColor || 'none',\n          cx: size / 2,\n          cy: size / 2,\n          r: radius\n        };\n        Object.keys(_backAttrs).forEach(function (attr) {\n          $gaugeSvgEl.find('.gauge-back-circle').attr(attr, _backAttrs[attr]);\n        });\n        Object.keys(_frontAttrs).forEach(function (attr) {\n          $gaugeSvgEl.find('.gauge-front-circle').attr(attr, _frontAttrs[attr]);\n        });\n      }\n\n      if (valueText) {\n        if (!$gaugeSvgEl.find('.gauge-value-text').length) {\n          $gaugeSvgEl.append('<text class=\"gauge-value-text\"></text>');\n        }\n\n        var textAttrs = {\n          x: '50%',\n          y: semiCircle ? '100%' : '50%',\n          'font-weight': valueFontWeight,\n          'font-size': valueFontSize,\n          fill: valueTextColor,\n          dy: semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0,\n          'text-anchor': 'middle',\n          'dominant-baseline': !semiCircle && 'middle'\n        };\n        Object.keys(textAttrs).forEach(function (attr) {\n          $gaugeSvgEl.find('.gauge-value-text').attr(attr, textAttrs[attr]);\n        });\n        $gaugeSvgEl.find('.gauge-value-text').text(valueText);\n      } else {\n        $gaugeSvgEl.find('.gauge-value-text').remove();\n      }\n\n      if (labelText) {\n        if (!$gaugeSvgEl.find('.gauge-label-text').length) {\n          $gaugeSvgEl.append('<text class=\"gauge-label-text\"></text>');\n        }\n\n        var labelAttrs = {\n          x: '50%',\n          y: semiCircle ? '100%' : '50%',\n          'font-weight': labelFontWeight,\n          'font-size': labelFontSize,\n          fill: labelTextColor,\n          dy: semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0,\n          'text-anchor': 'middle',\n          'dominant-baseline': !semiCircle && 'middle'\n        };\n        Object.keys(labelAttrs).forEach(function (attr) {\n          $gaugeSvgEl.find('.gauge-label-text').attr(attr, labelAttrs[attr]);\n        });\n        $gaugeSvgEl.find('.gauge-label-text').text(labelText);\n      } else {\n        $gaugeSvgEl.find('.gauge-label-text').remove();\n      }\n\n      return gauge;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var gauge = this;\n      var $gaugeSvgEl = $(gauge.render()).eq(0);\n      $gaugeSvgEl.f7Gauge = gauge;\n      Utils.extend(gauge, {\n        $gaugeSvgEl: $gaugeSvgEl,\n        gaugeSvgEl: $gaugeSvgEl && $gaugeSvgEl[0]\n      });\n      gauge.$el.append($gaugeSvgEl);\n      return gauge;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var gauge = this;\n      if (!gauge.$el || gauge.destroyed) return;\n      gauge.$el.trigger('gauge:beforedestroy', gauge);\n      gauge.emit('local::beforeDestroy gaugeBeforeDestroy', gauge);\n      gauge.$gaugeSvgEl.remove();\n      delete gauge.$el[0].f7Gauge;\n      Utils.deleteProps(gauge);\n      gauge.destroyed = true;\n    }\n  }]);\n\n  return Gauge;\n}(Framework7Class);\n\nexport default Gauge;","map":null,"metadata":{},"sourceType":"module"}