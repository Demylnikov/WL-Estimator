{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nvar Messagebar =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Messagebar, _Framework7Class);\n\n  function Messagebar(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Messagebar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Messagebar).call(this, params, [app]));\n\n    var messagebar = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = {\n      top: false,\n      topOffset: 0,\n      bottomOffset: 0,\n      attachments: [],\n      renderAttachments: undefined,\n      renderAttachment: undefined,\n      maxHeight: null,\n      resizePage: true\n    }; // Extend defaults with modules params\n\n    messagebar.useModulesParams(defaults);\n    messagebar.params = Utils.extend(defaults, params); // El\n\n    var $el = $(messagebar.params.el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, messagebar);\n    if ($el[0].f7Messagebar) return _possibleConstructorReturn(_this, $el[0].f7Messagebar);\n    $el[0].f7Messagebar = messagebar; // Page and PageContent\n\n    var $pageEl = $el.parents('.page').eq(0);\n    var $pageContentEl = $pageEl.find('.page-content').eq(0); // Area\n\n    var $areaEl = $el.find('.messagebar-area'); // Textarea\n\n    var $textareaEl;\n\n    if (messagebar.params.textareaEl) {\n      $textareaEl = $(messagebar.params.textareaEl);\n    } else {\n      $textareaEl = $el.find('textarea');\n    } // Attachments & Library\n\n\n    var $attachmentsEl = $el.find('.messagebar-attachments');\n    var $sheetEl = $el.find('.messagebar-sheet');\n\n    if (messagebar.params.top) {\n      $el.addClass('messagebar-top');\n    }\n\n    Utils.extend(messagebar, {\n      $el: $el,\n      el: $el[0],\n      $areaEl: $areaEl,\n      areaEl: $areaEl[0],\n      $textareaEl: $textareaEl,\n      textareaEl: $textareaEl[0],\n      $attachmentsEl: $attachmentsEl,\n      attachmentsEl: $attachmentsEl[0],\n      attachmentsVisible: $attachmentsEl.hasClass('messagebar-attachments-visible'),\n      $sheetEl: $sheetEl,\n      sheetEl: $sheetEl[0],\n      sheetVisible: $sheetEl.hasClass('messagebar-sheet-visible'),\n      $pageEl: $pageEl,\n      pageEl: $pageEl[0],\n      $pageContentEl: $pageContentEl,\n      pageContentEl: $pageContentEl,\n      top: $el.hasClass('messagebar-top') || messagebar.params.top,\n      attachments: []\n    }); // Events\n\n    function onAppResize() {\n      if (messagebar.params.resizePage) {\n        messagebar.resizePage();\n      }\n    }\n\n    function onSubmit(e) {\n      e.preventDefault();\n    }\n\n    function onAttachmentClick(e) {\n      var index = $(this).index();\n\n      if ($(e.target).closest('.messagebar-attachment-delete').length) {\n        $(this).trigger('messagebar:attachmentdelete', index);\n        messagebar.emit('local::attachmentDelete messagebarAttachmentDelete', messagebar, this, index);\n      } else {\n        $(this).trigger('messagebar:attachmentclick', index);\n        messagebar.emit('local::attachmentClick messagebarAttachmentClick', messagebar, this, index);\n      }\n    }\n\n    function onTextareaChange() {\n      messagebar.checkEmptyState();\n      messagebar.$el.trigger('messagebar:change');\n      messagebar.emit('local::change messagebarChange', messagebar);\n    }\n\n    function onTextareaFocus() {\n      messagebar.sheetHide();\n      messagebar.$el.addClass('messagebar-focused');\n      messagebar.$el.trigger('messagebar:focus');\n      messagebar.emit('local::focus messagebarFocus', messagebar);\n    }\n\n    function onTextareaBlur() {\n      messagebar.$el.removeClass('messagebar-focused');\n      messagebar.$el.trigger('messagebar:blur');\n      messagebar.emit('local::blur messagebarBlur', messagebar);\n    }\n\n    messagebar.attachEvents = function attachEvents() {\n      $el.on('textarea:resize', onAppResize);\n      $el.on('submit', onSubmit);\n      $el.on('click', '.messagebar-attachment', onAttachmentClick);\n      $textareaEl.on('change input', onTextareaChange);\n      $textareaEl.on('focus', onTextareaFocus);\n      $textareaEl.on('blur', onTextareaBlur);\n      app.on('resize', onAppResize);\n    };\n\n    messagebar.detachEvents = function detachEvents() {\n      $el.off('textarea:resize', onAppResize);\n      $el.off('submit', onSubmit);\n      $el.off('click', '.messagebar-attachment', onAttachmentClick);\n      $textareaEl.off('change input', onTextareaChange);\n      $textareaEl.off('focus', onTextareaFocus);\n      $textareaEl.off('blur', onTextareaBlur);\n      app.off('resize', onAppResize);\n    }; // Install Modules\n\n\n    messagebar.useModules(); // Init\n\n    messagebar.init();\n    return _possibleConstructorReturn(_this, messagebar);\n  }\n\n  _createClass(Messagebar, [{\n    key: \"focus\",\n    value: function focus() {\n      var messagebar = this;\n      messagebar.$textareaEl.focus();\n      return messagebar;\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      var messagebar = this;\n      messagebar.$textareaEl.blur();\n      return messagebar;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var messagebar = this;\n      messagebar.$textareaEl.val('').trigger('change');\n      return messagebar;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var messagebar = this;\n      return messagebar.$textareaEl.val().trim();\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      var messagebar = this;\n      messagebar.$textareaEl.val(value).trigger('change');\n      return messagebar;\n    }\n  }, {\n    key: \"setPlaceholder\",\n    value: function setPlaceholder(placeholder) {\n      var messagebar = this;\n      messagebar.$textareaEl.attr('placeholder', placeholder);\n      return messagebar;\n    }\n  }, {\n    key: \"resizePage\",\n    value: function resizePage() {\n      var messagebar = this;\n      var params = messagebar.params,\n          $el = messagebar.$el,\n          top = messagebar.top,\n          $pageEl = messagebar.$pageEl,\n          $pageContentEl = messagebar.$pageContentEl,\n          $areaEl = messagebar.$areaEl,\n          $textareaEl = messagebar.$textareaEl,\n          $sheetEl = messagebar.$sheetEl,\n          $attachmentsEl = messagebar.$attachmentsEl;\n      var elHeight = $el[0].offsetHeight;\n      var maxHeight = params.maxHeight;\n\n      if (top) {\n        /*\n        Disable at the moment\n        const requiredPaddingTop = elHeight + params.topOffset;\n        const currentPaddingTop = parseInt($pageContentEl.css('padding-top'), 10);\n        if (requiredPaddingTop !== currentPaddingTop) {\n          if (!maxHeight) {\n            maxHeight = $pageEl[0].offsetHeight - currentPaddingTop - $sheetEl.outerHeight() - $attachmentsEl.outerHeight() - parseInt($areaEl.css('margin-top'), 10) - parseInt($areaEl.css('margin-bottom'), 10);\n          }\n          $textareaEl.css('max-height', `${maxHeight}px`);\n          $pageContentEl.css('padding-top', `${requiredPaddingTop}px`);\n          $el.trigger('messagebar:resizePage');\n          messagebar.emit('local::resizepage messagebarResizePage');\n        }\n        */\n      } else {\n        var currentPaddingBottom = parseInt($pageContentEl.css('padding-bottom'), 10);\n        var requiredPaddingBottom = elHeight + params.bottomOffset;\n\n        if (requiredPaddingBottom !== currentPaddingBottom && $pageContentEl.length) {\n          var currentPaddingTop = parseInt($pageContentEl.css('padding-top'), 10);\n          var pageScrollHeight = $pageContentEl[0].scrollHeight;\n          var pageOffsetHeight = $pageContentEl[0].offsetHeight;\n          var pageScrollTop = $pageContentEl[0].scrollTop;\n          var scrollOnBottom = pageScrollTop === pageScrollHeight - pageOffsetHeight;\n\n          if (!maxHeight) {\n            maxHeight = $pageEl[0].offsetHeight - currentPaddingTop - $sheetEl.outerHeight() - $attachmentsEl.outerHeight() - parseInt($areaEl.css('margin-top'), 10) - parseInt($areaEl.css('margin-bottom'), 10);\n          }\n\n          $textareaEl.css('max-height', \"\".concat(maxHeight, \"px\"));\n          $pageContentEl.css('padding-bottom', \"\".concat(requiredPaddingBottom, \"px\"));\n\n          if (scrollOnBottom) {\n            $pageContentEl.scrollTop($pageContentEl[0].scrollHeight - pageOffsetHeight);\n          }\n\n          $el.trigger('messagebar:resizepage');\n          messagebar.emit('local::resizePage messagebarResizePage', messagebar);\n        }\n      }\n    }\n  }, {\n    key: \"checkEmptyState\",\n    value: function checkEmptyState() {\n      var messagebar = this;\n      var $el = messagebar.$el,\n          $textareaEl = messagebar.$textareaEl;\n      var value = $textareaEl.val().trim();\n\n      if (value && value.length) {\n        $el.addClass('messagebar-with-value');\n      } else {\n        $el.removeClass('messagebar-with-value');\n      }\n    }\n  }, {\n    key: \"attachmentsCreate\",\n    value: function attachmentsCreate() {\n      var innerHTML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var messagebar = this;\n      var $attachmentsEl = $(\"<div class=\\\"messagebar-attachments\\\">\".concat(innerHTML, \"</div>\"));\n      $attachmentsEl.insertBefore(messagebar.$textareaEl);\n      Utils.extend(messagebar, {\n        $attachmentsEl: $attachmentsEl,\n        attachmentsEl: $attachmentsEl[0]\n      });\n      return messagebar;\n    }\n  }, {\n    key: \"attachmentsShow\",\n    value: function attachmentsShow() {\n      var innerHTML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var messagebar = this;\n      messagebar.$attachmentsEl = messagebar.$el.find('.messagebar-attachments');\n\n      if (messagebar.$attachmentsEl.length === 0) {\n        messagebar.attachmentsCreate(innerHTML);\n      }\n\n      messagebar.$el.addClass('messagebar-attachments-visible');\n      messagebar.attachmentsVisible = true;\n\n      if (messagebar.params.resizePage) {\n        messagebar.resizePage();\n      }\n\n      return messagebar;\n    }\n  }, {\n    key: \"attachmentsHide\",\n    value: function attachmentsHide() {\n      var messagebar = this;\n      messagebar.$el.removeClass('messagebar-attachments-visible');\n      messagebar.attachmentsVisible = false;\n\n      if (messagebar.params.resizePage) {\n        messagebar.resizePage();\n      }\n\n      return messagebar;\n    }\n  }, {\n    key: \"attachmentsToggle\",\n    value: function attachmentsToggle() {\n      var messagebar = this;\n\n      if (messagebar.attachmentsVisible) {\n        messagebar.attachmentsHide();\n      } else {\n        messagebar.attachmentsShow();\n      }\n\n      return messagebar;\n    }\n  }, {\n    key: \"renderAttachment\",\n    value: function renderAttachment(attachment) {\n      var messagebar = this;\n\n      if (messagebar.params.renderAttachment) {\n        return messagebar.params.renderAttachment.call(messagebar, attachment);\n      }\n\n      return \"\\n      <div class=\\\"messagebar-attachment\\\">\\n        <img src=\\\"\".concat(attachment, \"\\\">\\n        <span class=\\\"messagebar-attachment-delete\\\"></span>\\n      </div>\\n    \");\n    }\n  }, {\n    key: \"renderAttachments\",\n    value: function renderAttachments() {\n      var messagebar = this;\n      var html;\n\n      if (messagebar.params.renderAttachments) {\n        html = messagebar.params.renderAttachments.call(messagebar, messagebar.attachments);\n      } else {\n        html = \"\".concat(messagebar.attachments.map(function (attachment) {\n          return messagebar.renderAttachment(attachment);\n        }).join(''));\n      }\n\n      if (messagebar.$attachmentsEl.length === 0) {\n        messagebar.attachmentsCreate(html);\n      } else {\n        messagebar.$attachmentsEl.html(html);\n      }\n    }\n  }, {\n    key: \"sheetCreate\",\n    value: function sheetCreate() {\n      var innerHTML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var messagebar = this;\n      var $sheetEl = $(\"<div class=\\\"messagebar-sheet\\\">\".concat(innerHTML, \"</div>\"));\n      messagebar.$el.append($sheetEl);\n      Utils.extend(messagebar, {\n        $sheetEl: $sheetEl,\n        sheetEl: $sheetEl[0]\n      });\n      return messagebar;\n    }\n  }, {\n    key: \"sheetShow\",\n    value: function sheetShow() {\n      var innerHTML = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var messagebar = this;\n      messagebar.$sheetEl = messagebar.$el.find('.messagebar-sheet');\n\n      if (messagebar.$sheetEl.length === 0) {\n        messagebar.sheetCreate(innerHTML);\n      }\n\n      messagebar.$el.addClass('messagebar-sheet-visible');\n      messagebar.sheetVisible = true;\n\n      if (messagebar.params.resizePage) {\n        messagebar.resizePage();\n      }\n\n      return messagebar;\n    }\n  }, {\n    key: \"sheetHide\",\n    value: function sheetHide() {\n      var messagebar = this;\n      messagebar.$el.removeClass('messagebar-sheet-visible');\n      messagebar.sheetVisible = false;\n\n      if (messagebar.params.resizePage) {\n        messagebar.resizePage();\n      }\n\n      return messagebar;\n    }\n  }, {\n    key: \"sheetToggle\",\n    value: function sheetToggle() {\n      var messagebar = this;\n\n      if (messagebar.sheetVisible) {\n        messagebar.sheetHide();\n      } else {\n        messagebar.sheetShow();\n      }\n\n      return messagebar;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var messagebar = this;\n      messagebar.attachEvents();\n      messagebar.checkEmptyState();\n      return messagebar;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var messagebar = this;\n      messagebar.emit('local::beforeDestroy messagebarBeforeDestroy', messagebar);\n      messagebar.$el.trigger('messagebar:beforedestroy', messagebar);\n      messagebar.detachEvents();\n\n      if (messagebar.$el[0]) {\n        messagebar.$el[0].f7Messagebar = null;\n        delete messagebar.$el[0].f7Messagebar;\n      }\n\n      Utils.deleteProps(messagebar);\n    }\n  }]);\n\n  return Messagebar;\n}(Framework7Class);\n\nexport default Messagebar;","map":null,"metadata":{},"sourceType":"module"}