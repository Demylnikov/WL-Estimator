{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { document } from 'ssr-window';\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport FrameworkClass from '../../utils/class';\n\nvar Searchbar =\n/*#__PURE__*/\nfunction (_FrameworkClass) {\n  _inherits(Searchbar, _FrameworkClass);\n\n  function Searchbar(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Searchbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Searchbar).call(this, params, [app]));\n\n    var sb = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = {\n      el: undefined,\n      inputEl: undefined,\n      inputEvents: 'change input compositionend',\n      disableButton: true,\n      disableButtonEl: undefined,\n      backdropEl: undefined,\n      searchContainer: undefined,\n      // container to search, HTMLElement or CSS selector\n      searchItem: 'li',\n      // single item selector, CSS selector\n      searchIn: undefined,\n      // where to search in item, CSS selector\n      searchGroup: '.list-group',\n      searchGroupTitle: '.item-divider, .list-group-title',\n      ignore: '.searchbar-ignore',\n      foundEl: '.searchbar-found',\n      notFoundEl: '.searchbar-not-found',\n      hideOnEnableEl: '.searchbar-hide-on-enable',\n      hideOnSearchEl: '.searchbar-hide-on-search',\n      backdrop: true,\n      removeDiacritics: true,\n      customSearch: false,\n      hideDividers: true,\n      hideGroups: true,\n      disableOnBackdropClick: true,\n      expandable: false\n    }; // Extend defaults with modules params\n\n    sb.useModulesParams(defaults);\n    sb.params = Utils.extend(defaults, params);\n    var $el = $(sb.params.el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, sb);\n    if ($el[0].f7Searchbar) return _possibleConstructorReturn(_this, $el[0].f7Searchbar);\n    $el[0].f7Searchbar = sb;\n    var $pageEl;\n    var $navbarEl;\n\n    if ($el.parents('.page').length > 0) {\n      $pageEl = $el.parents('.page');\n    } else {\n      $navbarEl = $el.parents('.navbar-inner');\n\n      if ($navbarEl.length > 0) {\n        $pageEl = $(app.navbar.getPageByEl($navbarEl[0]));\n\n        if (!$pageEl.length) {\n          var $currentPageEl = $el.parents('.view').find('.page-current');\n\n          if ($currentPageEl[0] && $currentPageEl[0].f7Page && $currentPageEl[0].f7Page.navbarEl === $navbarEl[0]) {\n            $pageEl = $currentPageEl;\n          }\n        }\n      }\n    }\n\n    var $foundEl;\n\n    if (params.foundEl) {\n      $foundEl = $(params.foundEl);\n    } else if (typeof sb.params.foundEl === 'string' && $pageEl) {\n      $foundEl = $pageEl.find(sb.params.foundEl);\n    }\n\n    var $notFoundEl;\n\n    if (params.notFoundEl) {\n      $notFoundEl = $(params.notFoundEl);\n    } else if (typeof sb.params.notFoundEl === 'string' && $pageEl) {\n      $notFoundEl = $pageEl.find(sb.params.notFoundEl);\n    }\n\n    var $hideOnEnableEl;\n\n    if (params.hideOnEnableEl) {\n      $hideOnEnableEl = $(params.hideOnEnableEl);\n    } else if (typeof sb.params.hideOnEnableEl === 'string' && $pageEl) {\n      $hideOnEnableEl = $pageEl.find(sb.params.hideOnEnableEl);\n    }\n\n    var $hideOnSearchEl;\n\n    if (params.hideOnSearchEl) {\n      $hideOnSearchEl = $(params.hideOnSearchEl);\n    } else if (typeof sb.params.hideOnSearchEl === 'string' && $pageEl) {\n      $hideOnSearchEl = $pageEl.find(sb.params.hideOnSearchEl);\n    }\n\n    var $backdropEl;\n\n    if (sb.params.backdrop) {\n      if (sb.params.backdropEl) {\n        $backdropEl = $(sb.params.backdropEl);\n      } else if ($pageEl && $pageEl.length > 0) {\n        $backdropEl = $pageEl.find('.searchbar-backdrop');\n      } else {\n        $backdropEl = $el.siblings('.searchbar-backdrop');\n      }\n\n      if ($backdropEl.length === 0) {\n        $backdropEl = $('<div class=\"searchbar-backdrop\"></div>');\n\n        if ($pageEl && $pageEl.length) {\n          if ($el.parents($pageEl).length > 0 && $navbarEl && $el.parents($navbarEl).length === 0) {\n            $backdropEl.insertBefore($el);\n          } else {\n            $backdropEl.insertBefore($pageEl.find('.page-content').eq(0));\n          }\n        } else {\n          $backdropEl.insertBefore($el);\n        }\n      }\n    }\n\n    var $searchContainer;\n\n    if (sb.params.searchContainer) {\n      $searchContainer = $(sb.params.searchContainer);\n    }\n\n    var $inputEl;\n\n    if (sb.params.inputEl) {\n      $inputEl = $(sb.params.inputEl);\n    } else {\n      $inputEl = $el.find('input[type=\"search\"]').eq(0);\n    }\n\n    var $disableButtonEl;\n\n    if (sb.params.disableButton) {\n      if (sb.params.disableButtonEl) {\n        $disableButtonEl = $(sb.params.disableButtonEl);\n      } else {\n        $disableButtonEl = $el.find('.searchbar-disable-button');\n      }\n    }\n\n    Utils.extend(sb, {\n      app: app,\n      view: app.views.get($el.parents('.view')),\n      $el: $el,\n      el: $el[0],\n      $backdropEl: $backdropEl,\n      backdropEl: $backdropEl && $backdropEl[0],\n      $searchContainer: $searchContainer,\n      searchContainer: $searchContainer && $searchContainer[0],\n      $inputEl: $inputEl,\n      inputEl: $inputEl[0],\n      $disableButtonEl: $disableButtonEl,\n      disableButtonEl: $disableButtonEl && $disableButtonEl[0],\n      disableButtonHasMargin: false,\n      $pageEl: $pageEl,\n      pageEl: $pageEl && $pageEl[0],\n      $navbarEl: $navbarEl,\n      navbarEl: $navbarEl && $navbarEl[0],\n      $foundEl: $foundEl,\n      foundEl: $foundEl && $foundEl[0],\n      $notFoundEl: $notFoundEl,\n      notFoundEl: $notFoundEl && $notFoundEl[0],\n      $hideOnEnableEl: $hideOnEnableEl,\n      hideOnEnableEl: $hideOnEnableEl && $hideOnEnableEl[0],\n      $hideOnSearchEl: $hideOnSearchEl,\n      hideOnSearchEl: $hideOnSearchEl && $hideOnSearchEl[0],\n      previousQuery: '',\n      query: '',\n      isVirtualList: $searchContainer && $searchContainer.hasClass('virtual-list'),\n      virtualList: undefined,\n      enabled: false,\n      expandable: sb.params.expandable || $el.hasClass('searchbar-expandable')\n    }); // Events\n\n    function preventSubmit(e) {\n      e.preventDefault();\n    }\n\n    function onInputFocus(e) {\n      sb.enable(e);\n      sb.$el.addClass('searchbar-focused');\n    }\n\n    function onInputBlur() {\n      sb.$el.removeClass('searchbar-focused');\n    }\n\n    function onInputChange() {\n      var value = sb.$inputEl.val().trim();\n\n      if (sb.$searchContainer && sb.$searchContainer.length > 0 && (sb.params.searchIn || sb.isVirtualList || sb.params.searchIn === sb.params.searchItem) || sb.params.customSearch) {\n        sb.search(value, true);\n      }\n    }\n\n    function onInputClear(e, previousValue) {\n      sb.$el.trigger('searchbar:clear', previousValue);\n      sb.emit('local::clear searchbarClear', sb, previousValue);\n    }\n\n    function disableOnClick(e) {\n      sb.disable(e);\n    }\n\n    function onPageBeforeOut() {\n      if (!sb || sb && !sb.$el) return;\n\n      if (sb.enabled) {\n        sb.$el.removeClass('searchbar-enabled');\n\n        if (sb.expandable) {\n          sb.$el.parents('.navbar-inner').removeClass('with-searchbar-expandable-enabled');\n        }\n      }\n    }\n\n    function onPageBeforeIn() {\n      if (!sb || sb && !sb.$el) return;\n\n      if (sb.enabled) {\n        sb.$el.addClass('searchbar-enabled');\n\n        if (sb.expandable) {\n          sb.$el.parents('.navbar-inner').addClass('with-searchbar-expandable-enabled');\n        }\n      }\n    }\n\n    sb.attachEvents = function attachEvents() {\n      $el.on('submit', preventSubmit);\n\n      if (sb.params.disableButton) {\n        sb.$disableButtonEl.on('click', disableOnClick);\n      }\n\n      if (sb.params.disableOnBackdropClick && sb.$backdropEl) {\n        sb.$backdropEl.on('click', disableOnClick);\n      }\n\n      if (sb.expandable && app.theme === 'ios' && sb.view && $navbarEl && sb.$pageEl) {\n        sb.$pageEl.on('page:beforeout', onPageBeforeOut);\n        sb.$pageEl.on('page:beforein', onPageBeforeIn);\n      }\n\n      sb.$inputEl.on('focus', onInputFocus);\n      sb.$inputEl.on('blur', onInputBlur);\n      sb.$inputEl.on(sb.params.inputEvents, onInputChange);\n      sb.$inputEl.on('input:clear', onInputClear);\n    };\n\n    sb.detachEvents = function detachEvents() {\n      $el.off('submit', preventSubmit);\n\n      if (sb.params.disableButton) {\n        sb.$disableButtonEl.off('click', disableOnClick);\n      }\n\n      if (sb.params.disableOnBackdropClick && sb.$backdropEl) {\n        sb.$backdropEl.off('click', disableOnClick);\n      }\n\n      if (sb.expandable && app.theme === 'ios' && sb.view && $navbarEl && sb.$pageEl) {\n        sb.$pageEl.off('page:beforeout', onPageBeforeOut);\n        sb.$pageEl.off('page:beforein', onPageBeforeIn);\n      }\n\n      sb.$inputEl.off('focus', onInputFocus);\n      sb.$inputEl.off('blur', onInputBlur);\n      sb.$inputEl.off(sb.params.inputEvents, onInputChange);\n      sb.$inputEl.off('input:clear', onInputClear);\n    }; // Install Modules\n\n\n    sb.useModules(); // Init\n\n    sb.init();\n    return _possibleConstructorReturn(_this, sb);\n  }\n\n  _createClass(Searchbar, [{\n    key: \"clear\",\n    value: function clear(e) {\n      var sb = this;\n\n      if (!sb.query && e && $(e.target).hasClass('searchbar-clear')) {\n        sb.disable();\n        return sb;\n      }\n\n      var previousQuery = sb.value;\n      sb.$inputEl.val('').trigger('change').focus();\n      sb.$el.trigger('searchbar:clear', previousQuery);\n      sb.emit('local::clear searchbarClear', sb, previousQuery);\n      return sb;\n    }\n  }, {\n    key: \"setDisableButtonMargin\",\n    value: function setDisableButtonMargin() {\n      var sb = this;\n      if (sb.expandable) return;\n      var app = sb.app;\n      sb.$disableButtonEl.transition(0).show();\n      sb.$disableButtonEl.css(\"margin-\".concat(app.rtl ? 'left' : 'right'), \"\".concat(-sb.disableButtonEl.offsetWidth, \"px\"));\n      /* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_clientLeft\"] }] */\n\n      sb._clientLeft = sb.$disableButtonEl[0].clientLeft;\n      sb.$disableButtonEl.transition('');\n      sb.disableButtonHasMargin = true;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(setFocus) {\n      var sb = this;\n      if (sb.enabled) return sb;\n      var app = sb.app;\n      sb.enabled = true;\n\n      function enable() {\n        if (sb.$backdropEl && (sb.$searchContainer && sb.$searchContainer.length || sb.params.customSearch) && !sb.$el.hasClass('searchbar-enabled') && !sb.query) {\n          sb.backdropShow();\n        }\n\n        sb.$el.addClass('searchbar-enabled');\n\n        if (!sb.$disableButtonEl || sb.$disableButtonEl && sb.$disableButtonEl.length === 0) {\n          sb.$el.addClass('searchbar-enabled-no-disable-button');\n        }\n\n        if (!sb.expandable && sb.$disableButtonEl && sb.$disableButtonEl.length > 0 && app.theme === 'ios') {\n          if (!sb.disableButtonHasMargin) {\n            sb.setDisableButtonMargin();\n          }\n\n          sb.$disableButtonEl.css(\"margin-\".concat(app.rtl ? 'left' : 'right'), '0px');\n        }\n\n        if (sb.expandable) {\n          if (sb.$el.parents('.navbar-inner').hasClass('navbar-inner-large') && sb.$pageEl) {\n            sb.$pageEl.find('.page-content').addClass('with-searchbar-expandable-enabled');\n          }\n\n          if (app.theme === 'md' && sb.$el.parent('.navbar-inner').parent('.navbar').length) {\n            sb.$el.parent('.navbar-inner').parent('.navbar').addClass('with-searchbar-expandable-enabled');\n          } else {\n            sb.$el.parent('.navbar-inner').addClass('with-searchbar-expandable-enabled');\n            sb.$el.parent('.navbar-inner-large').addClass('navbar-inner-large-collapsed');\n          }\n        }\n\n        if (sb.$hideOnEnableEl) sb.$hideOnEnableEl.addClass('hidden-by-searchbar');\n        sb.$el.trigger('searchbar:enable');\n        sb.emit('local::enable searchbarEnable', sb);\n      }\n\n      var needsFocus = false;\n\n      if (setFocus === true) {\n        if (document.activeElement !== sb.inputEl) {\n          needsFocus = true;\n        }\n      }\n\n      var isIos = app.device.ios && app.theme === 'ios';\n\n      if (isIos) {\n        if (sb.expandable) {\n          if (needsFocus) sb.$inputEl.focus();\n          enable();\n        } else {\n          if (needsFocus) sb.$inputEl.focus();\n\n          if (setFocus && (setFocus.type === 'focus' || setFocus === true)) {\n            Utils.nextTick(function () {\n              enable();\n            }, 400);\n          } else {\n            enable();\n          }\n        }\n      } else {\n        if (needsFocus) sb.$inputEl.focus();\n\n        if (app.theme === 'md' && sb.expandable) {\n          sb.$el.parents('.page, .view, .navbar-inner').scrollLeft(0);\n        }\n\n        enable();\n      }\n\n      return sb;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      var sb = this;\n      if (!sb.enabled) return sb;\n      var app = sb.app;\n      sb.$inputEl.val('').trigger('change');\n      sb.$el.removeClass('searchbar-enabled searchbar-focused searchbar-enabled-no-disable-button');\n\n      if (sb.expandable) {\n        if (sb.$el.parents('.navbar-inner').hasClass('navbar-inner-large') && sb.$pageEl) {\n          sb.$pageEl.find('.page-content').removeClass('with-searchbar-expandable-enabled');\n        }\n\n        if (app.theme === 'md' && sb.$el.parent('.navbar-inner').parent('.navbar').length) {\n          sb.$el.parent('.navbar-inner').parent('.navbar').removeClass('with-searchbar-expandable-enabled');\n        } else {\n          sb.$el.parent('.navbar-inner').removeClass('with-searchbar-expandable-enabled');\n\n          if (sb.$pageEl) {\n            sb.$pageEl.find('.page-content').trigger('scroll');\n          }\n        }\n      }\n\n      if (!sb.expandable && sb.$disableButtonEl && sb.$disableButtonEl.length > 0 && app.theme === 'ios') {\n        sb.$disableButtonEl.css(\"margin-\".concat(app.rtl ? 'left' : 'right'), \"\".concat(-sb.disableButtonEl.offsetWidth, \"px\"));\n      }\n\n      if (sb.$backdropEl && (sb.$searchContainer && sb.$searchContainer.length || sb.params.customSearch)) {\n        sb.backdropHide();\n      }\n\n      sb.enabled = false;\n      sb.$inputEl.blur();\n      if (sb.$hideOnEnableEl) sb.$hideOnEnableEl.removeClass('hidden-by-searchbar');\n      sb.$el.trigger('searchbar:disable');\n      sb.emit('local::disable searchbarDisable', sb);\n      return sb;\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      var sb = this;\n      if (sb.enabled) sb.disable();else sb.enable(true);\n      return sb;\n    }\n  }, {\n    key: \"backdropShow\",\n    value: function backdropShow() {\n      var sb = this;\n\n      if (sb.$backdropEl) {\n        sb.$backdropEl.addClass('searchbar-backdrop-in');\n      }\n\n      return sb;\n    }\n  }, {\n    key: \"backdropHide\",\n    value: function backdropHide() {\n      var sb = this;\n\n      if (sb.$backdropEl) {\n        sb.$backdropEl.removeClass('searchbar-backdrop-in');\n      }\n\n      return sb;\n    }\n  }, {\n    key: \"search\",\n    value: function search(query, internal) {\n      var sb = this;\n      sb.previousQuery = sb.query || '';\n      if (query === sb.previousQuery) return sb;\n\n      if (!internal) {\n        if (!sb.enabled) {\n          sb.enable();\n        }\n\n        sb.$inputEl.val(query);\n        sb.$inputEl.trigger('input');\n      }\n\n      sb.query = query;\n      sb.value = query;\n      var $searchContainer = sb.$searchContainer,\n          $el = sb.$el,\n          $foundEl = sb.$foundEl,\n          $notFoundEl = sb.$notFoundEl,\n          $hideOnSearchEl = sb.$hideOnSearchEl,\n          isVirtualList = sb.isVirtualList; // Hide on search element\n\n      if (query.length > 0 && $hideOnSearchEl) {\n        $hideOnSearchEl.addClass('hidden-by-searchbar');\n      } else if ($hideOnSearchEl) {\n        $hideOnSearchEl.removeClass('hidden-by-searchbar');\n      } // Add active/inactive classes on overlay\n\n\n      if ($searchContainer && $searchContainer.length && $el.hasClass('searchbar-enabled') || sb.params.customSearch && $el.hasClass('searchbar-enabled')) {\n        if (query.length === 0) {\n          sb.backdropShow();\n        } else {\n          sb.backdropHide();\n        }\n      }\n\n      if (sb.params.customSearch) {\n        $el.trigger('searchbar:search', query, sb.previousQuery);\n        sb.emit('local::search searchbarSearch', sb, query, sb.previousQuery);\n        return sb;\n      }\n\n      var foundItems = [];\n      var vlQuery;\n\n      if (isVirtualList) {\n        sb.virtualList = $searchContainer[0].f7VirtualList;\n\n        if (query.trim() === '') {\n          sb.virtualList.resetFilter();\n          if ($notFoundEl) $notFoundEl.hide();\n          if ($foundEl) $foundEl.show();\n          $el.trigger('searchbar:search', query, sb.previousQuery);\n          sb.emit('local::search searchbarSearch', sb, query, sb.previousQuery);\n          return sb;\n        }\n\n        vlQuery = sb.params.removeDiacritics ? Utils.removeDiacritics(query) : query;\n\n        if (sb.virtualList.params.searchAll) {\n          foundItems = sb.virtualList.params.searchAll(vlQuery, sb.virtualList.items) || [];\n        } else if (sb.virtualList.params.searchByItem) {\n          for (var i = 0; i < sb.virtualList.items.length; i += 1) {\n            if (sb.virtualList.params.searchByItem(vlQuery, sb.virtualList.params.items[i], i)) {\n              foundItems.push(i);\n            }\n          }\n        }\n      } else {\n        var values;\n        if (sb.params.removeDiacritics) values = Utils.removeDiacritics(query.trim().toLowerCase()).split(' ');else {\n          values = query.trim().toLowerCase().split(' ');\n        }\n        $searchContainer.find(sb.params.searchItem).removeClass('hidden-by-searchbar').each(function (itemIndex, itemEl) {\n          var $itemEl = $(itemEl);\n          var compareWithText = [];\n          var $searchIn = sb.params.searchIn ? $itemEl.find(sb.params.searchIn) : $itemEl;\n\n          if (sb.params.searchIn === sb.params.searchItem) {\n            $searchIn = $itemEl;\n          }\n\n          $searchIn.each(function (searchInIndex, searchInEl) {\n            var itemText = $(searchInEl).text().trim().toLowerCase();\n            if (sb.params.removeDiacritics) itemText = Utils.removeDiacritics(itemText);\n            compareWithText.push(itemText);\n          });\n          compareWithText = compareWithText.join(' ');\n          var wordsMatch = 0;\n\n          for (var _i = 0; _i < values.length; _i += 1) {\n            if (compareWithText.indexOf(values[_i]) >= 0) wordsMatch += 1;\n          }\n\n          if (wordsMatch !== values.length && !(sb.params.ignore && $itemEl.is(sb.params.ignore))) {\n            $itemEl.addClass('hidden-by-searchbar');\n          } else {\n            foundItems.push($itemEl[0]);\n          }\n        });\n\n        if (sb.params.hideDividers) {\n          $searchContainer.find(sb.params.searchGroupTitle).each(function (titleIndex, titleEl) {\n            var $titleEl = $(titleEl);\n            var $nextElements = $titleEl.nextAll(sb.params.searchItem);\n            var hide = true;\n\n            for (var _i2 = 0; _i2 < $nextElements.length; _i2 += 1) {\n              var $nextEl = $nextElements.eq(_i2);\n              if ($nextEl.is(sb.params.searchGroupTitle)) break;\n\n              if (!$nextEl.hasClass('hidden-by-searchbar')) {\n                hide = false;\n              }\n            }\n\n            var ignore = sb.params.ignore && $titleEl.is(sb.params.ignore);\n            if (hide && !ignore) $titleEl.addClass('hidden-by-searchbar');else $titleEl.removeClass('hidden-by-searchbar');\n          });\n        }\n\n        if (sb.params.hideGroups) {\n          $searchContainer.find(sb.params.searchGroup).each(function (groupIndex, groupEl) {\n            var $groupEl = $(groupEl);\n            var ignore = sb.params.ignore && $groupEl.is(sb.params.ignore); // eslint-disable-next-line\n\n            var notHidden = $groupEl.find(sb.params.searchItem).filter(function (index, el) {\n              return !$(el).hasClass('hidden-by-searchbar');\n            });\n\n            if (notHidden.length === 0 && !ignore) {\n              $groupEl.addClass('hidden-by-searchbar');\n            } else {\n              $groupEl.removeClass('hidden-by-searchbar');\n            }\n          });\n        }\n      }\n\n      if (foundItems.length === 0) {\n        if ($notFoundEl) $notFoundEl.show();\n        if ($foundEl) $foundEl.hide();\n      } else {\n        if ($notFoundEl) $notFoundEl.hide();\n        if ($foundEl) $foundEl.show();\n      }\n\n      if (isVirtualList && sb.virtualList) {\n        sb.virtualList.filterItems(foundItems);\n      }\n\n      $el.trigger('searchbar:search', query, sb.previousQuery, foundItems);\n      sb.emit('local::search searchbarSearch', sb, query, sb.previousQuery, foundItems);\n      return sb;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var sb = this;\n      sb.attachEvents();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var sb = this;\n      sb.emit('local::beforeDestroy searchbarBeforeDestroy', sb);\n      sb.$el.trigger('searchbar:beforedestroy', sb);\n      sb.detachEvents();\n\n      if (sb.$el[0]) {\n        sb.$el[0].f7Searchbar = null;\n        delete sb.$el[0].f7Searchbar;\n      }\n\n      Utils.deleteProps(sb);\n    }\n  }]);\n\n  return Searchbar;\n}(FrameworkClass);\n\nexport default Searchbar;","map":null,"metadata":{},"sourceType":"module"}