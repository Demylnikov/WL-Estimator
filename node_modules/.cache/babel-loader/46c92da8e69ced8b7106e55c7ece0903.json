{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport { document } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Modal from '../modal/modal-class';\n\nvar Dialog =\n/*#__PURE__*/\nfunction (_Modal) {\n  _inherits(Dialog, _Modal);\n\n  function Dialog(app, params) {\n    var _this;\n\n    _classCallCheck(this, Dialog);\n\n    var extendedParams = Utils.extend({\n      title: app.params.dialog.title,\n      text: undefined,\n      content: '',\n      buttons: [],\n      verticalButtons: false,\n      onClick: undefined,\n      cssClass: undefined,\n      destroyOnClose: false,\n      on: {}\n    }, params);\n\n    if (typeof extendedParams.closeByBackdropClick === 'undefined') {\n      extendedParams.closeByBackdropClick = app.params.dialog.closeByBackdropClick;\n    } // Extends with open/close Modal methods;\n\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dialog).call(this, app, extendedParams));\n\n    var dialog = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var title = extendedParams.title,\n        text = extendedParams.text,\n        content = extendedParams.content,\n        buttons = extendedParams.buttons,\n        verticalButtons = extendedParams.verticalButtons,\n        cssClass = extendedParams.cssClass;\n    dialog.params = extendedParams; // Find Element\n\n    var $el;\n\n    if (!dialog.params.el) {\n      var dialogClasses = ['dialog'];\n      if (buttons.length === 0) dialogClasses.push('dialog-no-buttons');\n      if (buttons.length > 0) dialogClasses.push(\"dialog-buttons-\".concat(buttons.length));\n      if (verticalButtons) dialogClasses.push('dialog-buttons-vertical');\n      if (cssClass) dialogClasses.push(cssClass);\n      var buttonsHTML = '';\n\n      if (buttons.length > 0) {\n        buttonsHTML = \"\\n          <div class=\\\"dialog-buttons\\\">\\n            \".concat(buttons.map(function (button) {\n          return \"\\n              <span class=\\\"dialog-button\".concat(button.bold ? ' dialog-button-bold' : '').concat(button.color ? \" color-\".concat(button.color) : '').concat(button.cssClass ? \" \".concat(button.cssClass) : '', \"\\\">\").concat(button.text, \"</span>\\n            \");\n        }).join(''), \"\\n          </div>\\n        \");\n      }\n\n      var dialogHtml = \"\\n        <div class=\\\"\".concat(dialogClasses.join(' '), \"\\\">\\n          <div class=\\\"dialog-inner\\\">\\n            \").concat(title ? \"<div class=\\\"dialog-title\\\">\".concat(title, \"</div>\") : '', \"\\n            \").concat(text ? \"<div class=\\\"dialog-text\\\">\".concat(text, \"</div>\") : '', \"\\n            \").concat(content, \"\\n          </div>\\n          \").concat(buttonsHTML, \"\\n        </div>\\n      \");\n      $el = $(dialogHtml);\n    } else {\n      $el = $(dialog.params.el);\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return _possibleConstructorReturn(_this, $el[0].f7Modal);\n    }\n\n    if ($el.length === 0) {\n      return _possibleConstructorReturn(_this, dialog.destroy());\n    }\n\n    var $backdropEl = app.root.children('.dialog-backdrop');\n\n    if ($backdropEl.length === 0) {\n      $backdropEl = $('<div class=\"dialog-backdrop\"></div>');\n      app.root.append($backdropEl);\n    } // Assign events\n\n\n    function buttonOnClick(e) {\n      var buttonEl = this;\n      var index = $(buttonEl).index();\n      var button = buttons[index];\n      if (button.onClick) button.onClick(dialog, e);\n      if (dialog.params.onClick) dialog.params.onClick(dialog, index);\n      if (button.close !== false) dialog.close();\n    }\n\n    var addKeyboardHander;\n\n    function onKeyPress(e) {\n      var keyCode = e.keyCode;\n      buttons.forEach(function (button, index) {\n        if (button.keyCodes && button.keyCodes.indexOf(keyCode) >= 0) {\n          if (document.activeElement) document.activeElement.blur();\n          if (button.onClick) button.onClick(dialog, e);\n          if (dialog.params.onClick) dialog.params.onClick(dialog, index);\n          if (button.close !== false) dialog.close();\n        }\n      });\n    }\n\n    if (buttons && buttons.length > 0) {\n      dialog.on('open', function () {\n        $el.find('.dialog-button').each(function (index, buttonEl) {\n          var button = buttons[index];\n          if (button.keyCodes) addKeyboardHander = true;\n          $(buttonEl).on('click', buttonOnClick);\n        });\n\n        if (addKeyboardHander && !app.device.ios && !app.device.android && !app.device.cordova) {\n          $(document).on('keydown', onKeyPress);\n        }\n      });\n      dialog.on('close', function () {\n        $el.find('.dialog-button').each(function (index, buttonEl) {\n          $(buttonEl).off('click', buttonOnClick);\n        });\n\n        if (addKeyboardHander && !app.device.ios && !app.device.android && !app.device.cordova) {\n          $(document).off('keydown', onKeyPress);\n        }\n\n        addKeyboardHander = false;\n      });\n    }\n\n    Utils.extend(dialog, {\n      app: app,\n      $el: $el,\n      el: $el[0],\n      $backdropEl: $backdropEl,\n      backdropEl: $backdropEl[0],\n      type: 'dialog',\n      setProgress: function setProgress(progress, duration) {\n        app.progressbar.set($el.find('.progressbar'), progress, duration);\n        return dialog;\n      },\n      setText: function setText(newText) {\n        var $textEl = $el.find('.dialog-text');\n\n        if ($textEl.length === 0) {\n          $textEl = $('<div class=\"dialog-text\"></div>');\n\n          if (typeof title !== 'undefined') {\n            $textEl.insertAfter($el.find('.dialog-title'));\n          } else {\n            $el.find('.dialog-inner').prepend($textEl);\n          }\n        }\n\n        $textEl.html(newText);\n        dialog.params.text = newText;\n        return dialog;\n      },\n      setTitle: function setTitle(newTitle) {\n        var $titleEl = $el.find('.dialog-title');\n\n        if ($titleEl.length === 0) {\n          $titleEl = $('<div class=\"dialog-title\"></div>');\n          $el.find('.dialog-inner').prepend($titleEl);\n        }\n\n        $titleEl.html(newTitle);\n        dialog.params.title = newTitle;\n        return dialog;\n      }\n    });\n\n    function handleClick(e) {\n      var target = e.target;\n      var $target = $(target);\n\n      if ($target.closest(dialog.el).length === 0) {\n        if (dialog.params.closeByBackdropClick && dialog.backdropEl && dialog.backdropEl === target) {\n          dialog.close();\n        }\n      }\n    }\n\n    dialog.on('opened', function () {\n      if (dialog.params.closeByBackdropClick) {\n        app.on('click', handleClick);\n      }\n    });\n    dialog.on('close', function () {\n      if (dialog.params.closeByBackdropClick) {\n        app.off('click', handleClick);\n      }\n    });\n    $el[0].f7Modal = dialog;\n\n    if (dialog.params.destroyOnClose) {\n      dialog.once('closed', function () {\n        setTimeout(function () {\n          dialog.destroy();\n        }, 0);\n      });\n    }\n\n    return _possibleConstructorReturn(_this, dialog);\n  }\n\n  return Dialog;\n}(Modal);\n\nexport default Dialog;","map":null,"metadata":{},"sourceType":"module"}