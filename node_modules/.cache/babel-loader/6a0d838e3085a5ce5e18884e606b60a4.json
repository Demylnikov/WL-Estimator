{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Modal from '../modal/modal-class';\n\nvar Popup =\n/*#__PURE__*/\nfunction (_Modal) {\n  _inherits(Popup, _Modal);\n\n  function Popup(app, params) {\n    var _this;\n\n    _classCallCheck(this, Popup);\n\n    var extendedParams = Utils.extend({\n      on: {}\n    }, app.params.popup, params); // Extends with open/close Modal methods;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popup).call(this, app, extendedParams));\n\n    var popup = _assertThisInitialized(_assertThisInitialized(_this));\n\n    popup.params = extendedParams; // Find Element\n\n    var $el;\n\n    if (!popup.params.el) {\n      $el = $(popup.params.content);\n    } else {\n      $el = $(popup.params.el);\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return _possibleConstructorReturn(_this, $el[0].f7Modal);\n    }\n\n    if ($el.length === 0) {\n      return _possibleConstructorReturn(_this, popup.destroy());\n    }\n\n    var $backdropEl;\n\n    if (popup.params.backdrop) {\n      $backdropEl = app.root.children('.popup-backdrop');\n\n      if ($backdropEl.length === 0) {\n        $backdropEl = $('<div class=\"popup-backdrop\"></div>');\n        app.root.append($backdropEl);\n      }\n    }\n\n    Utils.extend(popup, {\n      app: app,\n      $el: $el,\n      el: $el[0],\n      $backdropEl: $backdropEl,\n      backdropEl: $backdropEl && $backdropEl[0],\n      type: 'popup'\n    });\n\n    function handleClick(e) {\n      var target = e.target;\n      var $target = $(target);\n\n      if ($target.closest(popup.el).length === 0) {\n        if (popup.params && popup.params.closeByBackdropClick && popup.params.backdrop && popup.backdropEl && popup.backdropEl === target) {\n          var needToClose = true;\n          popup.$el.nextAll('.popup.modal-in').each(function (index, popupEl) {\n            var popupInstance = popupEl.f7Modal;\n            if (!popupInstance) return;\n\n            if (popupInstance.params.closeByBackdropClick && popupInstance.params.backdrop && popupInstance.backdropEl === popup.backdropEl) {\n              needToClose = false;\n            }\n          });\n\n          if (needToClose) {\n            popup.close();\n          }\n        }\n      }\n    }\n\n    popup.on('popupOpened', function () {\n      if (popup.params.closeByBackdropClick) {\n        app.on('click', handleClick);\n      }\n    });\n    popup.on('popupClose', function () {\n      if (popup.params.closeByBackdropClick) {\n        app.off('click', handleClick);\n      }\n    });\n    $el[0].f7Modal = popup;\n    return _possibleConstructorReturn(_this, popup);\n  }\n\n  return Popup;\n}(Modal);\n\nexport default Popup;","map":null,"metadata":{},"sourceType":"module"}