{"ast":null,"code":"import _defineProperty from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport SwipePanel from './swipe-panel';\n\nvar Panel =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Panel, _Framework7Class);\n\n  function Panel(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Panel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Panel).call(this, params, [app]));\n\n    var panel = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var el = params.el;\n\n    if (!el && params.content) {\n      el = params.content;\n    }\n\n    var $el = $(el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, panel);\n    if ($el[0].f7Panel) return _possibleConstructorReturn(_this, $el[0].f7Panel);\n    $el[0].f7Panel = panel;\n    var opened = params.opened,\n        side = params.side,\n        effect = params.effect;\n    if (typeof opened === 'undefined') opened = $el.hasClass('panel-active');\n    if (typeof side === 'undefined') side = $el.hasClass('panel-left') ? 'left' : 'right';\n    if (typeof effect === 'undefined') effect = $el.hasClass('panel-cover') ? 'cover' : 'reveal';\n\n    if (!app.panel[side]) {\n      Utils.extend(app.panel, _defineProperty({}, side, panel));\n    } else {\n      throw new Error(\"Framework7: Can't create panel; app already has a \".concat(side, \" panel!\"));\n    }\n\n    var $backdropEl = $('.panel-backdrop');\n\n    if ($backdropEl.length === 0) {\n      $backdropEl = $('<div class=\"panel-backdrop\"></div>');\n      $backdropEl.insertBefore($el);\n    }\n\n    Utils.extend(panel, {\n      app: app,\n      side: side,\n      effect: effect,\n      $el: $el,\n      el: $el[0],\n      opened: opened,\n      $backdropEl: $backdropEl,\n      backdropEl: $backdropEl[0]\n    }); // Install Modules\n\n    panel.useModules(); // Init\n\n    panel.init();\n    return _possibleConstructorReturn(_this, panel);\n  }\n\n  _createClass(Panel, [{\n    key: \"init\",\n    value: function init() {\n      var panel = this;\n      var app = panel.app;\n\n      if (app.params.panel[\"\".concat(panel.side, \"Breakpoint\")]) {\n        panel.initBreakpoints();\n      }\n\n      if (\"universal\" !== 'desktop') {\n        if (app.params.panel.swipe === panel.side || app.params.panel.swipe === 'both' || app.params.panel.swipe && app.params.panel.swipe !== panel.side && app.params.panel.swipeCloseOpposite) {\n          panel.initSwipePanel();\n        }\n      }\n    }\n  }, {\n    key: \"getViewEl\",\n    value: function getViewEl() {\n      var panel = this;\n      var app = panel.app;\n      var viewEl;\n\n      if (app.root.children('.views').length > 0) {\n        viewEl = app.root.children('.views')[0];\n      } else {\n        viewEl = app.root.children('.view')[0];\n      }\n\n      return viewEl;\n    }\n  }, {\n    key: \"setBreakpoint\",\n    value: function setBreakpoint() {\n      var panel = this;\n      var app = panel.app;\n      var side = panel.side,\n          $el = panel.$el;\n      var $viewEl = $(panel.getViewEl());\n      var breakpoint = app.params.panel[\"\".concat(side, \"Breakpoint\")];\n      var wasVisible = $el.hasClass('panel-visible-by-breakpoint');\n\n      if (app.width >= breakpoint) {\n        if (!wasVisible) {\n          $('html').removeClass(\"with-panel-\".concat(side, \"-reveal with-panel-\").concat(side, \"-cover with-panel\"));\n          $el.css('display', '').addClass('panel-visible-by-breakpoint').removeClass('panel-active');\n          panel.onOpen();\n          panel.onOpened();\n          $viewEl.css(_defineProperty({}, \"margin-\".concat(side), \"\".concat($el.width(), \"px\")));\n          app.allowPanelOpen = true;\n          app.emit('local::breakpoint panelBreakpoint');\n          panel.$el.trigger('panel:breakpoint', panel);\n        }\n      } else if (wasVisible) {\n        $el.css('display', '').removeClass('panel-visible-by-breakpoint panel-active');\n        panel.onClose();\n        panel.onClosed();\n        $viewEl.css(_defineProperty({}, \"margin-\".concat(side), ''));\n        app.emit('local::breakpoint panelBreakpoint');\n        panel.$el.trigger('panel:breakpoint', panel);\n      }\n    }\n  }, {\n    key: \"initBreakpoints\",\n    value: function initBreakpoints() {\n      var panel = this;\n      var app = panel.app;\n\n      panel.resizeHandler = function resizeHandler() {\n        panel.setBreakpoint();\n      };\n\n      if (app.params.panel[\"\".concat(panel.side, \"Breakpoint\")]) {\n        app.on('resize', panel.resizeHandler);\n      }\n\n      panel.setBreakpoint();\n      return panel;\n    }\n  }, {\n    key: \"initSwipePanel\",\n    value: function initSwipePanel() {\n      if (process.env.TARGET !== 'desktop') {\n        SwipePanel(this);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var panel = this;\n      var app = panel.app;\n\n      if (!panel.$el) {\n        // Panel already destroyed\n        return;\n      }\n\n      panel.emit('local::beforeDestroy panelBeforeDestroy', panel);\n      panel.$el.trigger('panel:beforedestroy', panel);\n\n      if (panel.resizeHandler) {\n        app.off('resize', panel.resizeHandler);\n      }\n\n      panel.$el.trigger('panel:destroy', panel);\n      panel.emit('local::destroy panelDestroy');\n      delete app.panel[panel.side];\n\n      if (panel.el) {\n        panel.el.f7Panel = null;\n        delete panel.el.f7Panel;\n      }\n\n      Utils.deleteProps(panel);\n      panel = null;\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var panel = this;\n      var app = panel.app;\n      if (!app.panel.allowOpen) return false;\n      var side = panel.side,\n          effect = panel.effect,\n          $el = panel.$el,\n          $backdropEl = panel.$backdropEl,\n          opened = panel.opened;\n      var $panelParentEl = $el.parent();\n      var wasInDom = $el.parents(document).length > 0;\n\n      if (!$panelParentEl.is(app.root) || $el.prevAll('.views, .view').length) {\n        var $insertBeforeEl = app.root.children('.panel, .views, .view').eq(0);\n        var $insertAfterEl = app.root.children('.statusbar').eq(0);\n\n        if ($insertBeforeEl.length) {\n          $el.insertBefore($insertBeforeEl);\n        } else if ($insertAfterEl.length) {\n          $el.insertAfter($insertBeforeEl);\n        } else {\n          app.root.prepend($el);\n        }\n\n        if ($backdropEl && $backdropEl.length && (!$backdropEl.parent().is(app.root) && $backdropEl.nextAll('.panel').length === 0 || $backdropEl.parent().is(app.root) && $backdropEl.nextAll('.panel').length === 0)) {\n          $backdropEl.insertBefore($el);\n        }\n\n        panel.once('panelClosed', function () {\n          if (wasInDom) {\n            $panelParentEl.append($el);\n          } else {\n            $el.remove();\n          }\n        });\n      } // Ignore if opened\n\n\n      if (opened || $el.hasClass('panel-visible-by-breakpoint') || $el.hasClass('panel-active')) return false; // Close if some panel is opened\n\n      app.panel.close(side === 'left' ? 'right' : 'left', animate);\n      app.panel.allowOpen = false;\n      $el[animate ? 'removeClass' : 'addClass']('not-animated');\n      $el.css({\n        display: 'block'\n      }).addClass('panel-active');\n      $backdropEl[animate ? 'removeClass' : 'addClass']('not-animated');\n      $backdropEl.show();\n      /* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_clientLeft\"] }] */\n\n      panel._clientLeft = $el[0].clientLeft;\n      $('html').addClass(\"with-panel with-panel-\".concat(side, \"-\").concat(effect));\n      panel.onOpen(); // Transition End;\n\n      var transitionEndTarget = effect === 'reveal' ? $el.nextAll('.view, .views').eq(0) : $el;\n\n      function panelTransitionEnd() {\n        transitionEndTarget.transitionEnd(function (e) {\n          if ($(e.target).is(transitionEndTarget)) {\n            if ($el.hasClass('panel-active')) {\n              panel.onOpened();\n              $backdropEl.css({\n                display: ''\n              });\n            } else {\n              panel.onClosed();\n              $backdropEl.css({\n                display: ''\n              });\n            }\n          } else panelTransitionEnd();\n        });\n      }\n\n      if (animate) {\n        panelTransitionEnd();\n      } else {\n        panel.onOpened();\n        $backdropEl.css({\n          display: ''\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var panel = this;\n      var app = panel.app;\n      var side = panel.side,\n          effect = panel.effect,\n          $el = panel.$el,\n          $backdropEl = panel.$backdropEl,\n          opened = panel.opened;\n      if (!opened || $el.hasClass('panel-visible-by-breakpoint') || !$el.hasClass('panel-active')) return false;\n      $el[animate ? 'removeClass' : 'addClass']('not-animated');\n      $el.removeClass('panel-active');\n      $backdropEl[animate ? 'removeClass' : 'addClass']('not-animated');\n      var transitionEndTarget = effect === 'reveal' ? $el.nextAll('.view, .views').eq(0) : $el;\n      panel.onClose();\n      app.panel.allowOpen = false;\n\n      if (animate) {\n        transitionEndTarget.transitionEnd(function () {\n          if ($el.hasClass('panel-active')) return;\n          $el.css({\n            display: ''\n          });\n          $('html').removeClass('with-panel-transitioning');\n          panel.onClosed();\n        });\n        $('html').removeClass(\"with-panel with-panel-\".concat(side, \"-\").concat(effect)).addClass('with-panel-transitioning');\n      } else {\n        $el.css({\n          display: ''\n        });\n        $el.removeClass('not-animated');\n        $('html').removeClass(\"with-panel with-panel-transitioning with-panel-\".concat(side, \"-\").concat(effect));\n        panel.onClosed();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      var panel = this;\n      panel.opened = true;\n      panel.$el.trigger('panel:open', panel);\n      panel.emit('local::open panelOpen', panel);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened() {\n      var panel = this;\n      var app = panel.app;\n      app.panel.allowOpen = true;\n      panel.$el.trigger('panel:opened', panel);\n      panel.emit('local::opened panelOpened', panel);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      var panel = this;\n      panel.opened = false;\n      panel.$el.addClass('panel-closing');\n      panel.$el.trigger('panel:close', panel);\n      panel.emit('local::close panelClose', panel);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed() {\n      var panel = this;\n      var app = panel.app;\n      app.panel.allowOpen = true;\n      panel.$el.removeClass('panel-closing');\n      panel.$el.trigger('panel:closed', panel);\n      panel.emit('local::closed panelClosed', panel);\n    }\n  }]);\n\n  return Panel;\n}(Framework7Class);\n\nexport default Panel;","map":null,"metadata":{},"sourceType":"module"}