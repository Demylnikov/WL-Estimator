{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport { window } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Modal from '../modal/modal-class';\n\nvar Toast =\n/*#__PURE__*/\nfunction (_Modal) {\n  _inherits(Toast, _Modal);\n\n  function Toast(app, params) {\n    var _this;\n\n    _classCallCheck(this, Toast);\n\n    var extendedParams = Utils.extend({\n      on: {}\n    }, app.params.toast, params); // Extends with open/close Modal methods;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Toast).call(this, app, extendedParams));\n\n    var toast = _assertThisInitialized(_assertThisInitialized(_this));\n\n    toast.app = app;\n    toast.params = extendedParams;\n    var _toast$params = toast.params,\n        closeButton = _toast$params.closeButton,\n        closeTimeout = _toast$params.closeTimeout;\n    var $el;\n\n    if (!toast.params.el) {\n      // Find Element\n      var toastHtml = toast.render();\n      $el = $(toastHtml);\n    } else {\n      $el = $(toast.params.el);\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return _possibleConstructorReturn(_this, $el[0].f7Modal);\n    }\n\n    if ($el.length === 0) {\n      return _possibleConstructorReturn(_this, toast.destroy());\n    }\n\n    Utils.extend(toast, {\n      $el: $el,\n      el: $el[0],\n      type: 'toast'\n    });\n    $el[0].f7Modal = toast;\n\n    if (closeButton) {\n      $el.find('.toast-button').on('click', function () {\n        toast.emit('local::closeButtonClick toastCloseButtonClick', toast);\n        toast.close();\n      });\n      toast.on('beforeDestroy', function () {\n        $el.find('.toast-button').off('click');\n      });\n    }\n\n    var timeoutId;\n    toast.on('open', function () {\n      $('.toast.modal-in').each(function (index, openedEl) {\n        var toastInstance = app.toast.get(openedEl);\n\n        if (openedEl !== toast.el && toastInstance) {\n          toastInstance.close();\n        }\n      });\n\n      if (closeTimeout) {\n        timeoutId = Utils.nextTick(function () {\n          toast.close();\n        }, closeTimeout);\n      }\n    });\n    toast.on('close', function () {\n      window.clearTimeout(timeoutId);\n    });\n\n    if (toast.params.destroyOnClose) {\n      toast.once('closed', function () {\n        setTimeout(function () {\n          toast.destroy();\n        }, 0);\n      });\n    }\n\n    return _possibleConstructorReturn(_this, toast);\n  }\n\n  _createClass(Toast, [{\n    key: \"render\",\n    value: function render() {\n      var toast = this;\n      if (toast.params.render) return toast.params.render.call(toast, toast);\n      var _toast$params2 = toast.params,\n          position = _toast$params2.position,\n          cssClass = _toast$params2.cssClass,\n          icon = _toast$params2.icon,\n          text = _toast$params2.text,\n          closeButton = _toast$params2.closeButton,\n          closeButtonColor = _toast$params2.closeButtonColor,\n          closeButtonText = _toast$params2.closeButtonText;\n      return \"\\n      <div class=\\\"toast toast-\".concat(position, \" \").concat(cssClass || '', \" \").concat(icon ? 'toast-with-icon' : '', \"\\\">\\n        <div class=\\\"toast-content\\\">\\n          \").concat(icon ? \"<div class=\\\"toast-icon\\\">\".concat(icon, \"</div>\") : '', \"\\n          <div class=\\\"toast-text\\\">\").concat(text, \"</div>\\n          \").concat(closeButton && !icon ? \"\\n          <a class=\\\"toast-button button \".concat(closeButtonColor ? \"color-\".concat(closeButtonColor) : '', \"\\\">\").concat(closeButtonText, \"</a>\\n          \").trim() : '', \"\\n        </div>\\n      </div>\\n    \").trim();\n    }\n  }]);\n\n  return Toast;\n}(Modal);\n\nexport default Toast;","map":null,"metadata":{},"sourceType":"module"}