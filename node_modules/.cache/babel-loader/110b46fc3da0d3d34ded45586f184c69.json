{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { window, document } from 'ssr-window';\nimport $ from 'dom7';\nimport PathToRegexp from 'path-to-regexp'; // eslint-disable-line\n\nimport Framework7Class from '../../utils/class';\nimport Utils from '../../utils/utils';\nimport History from '../../utils/history';\nimport SwipeBack from './swipe-back';\nimport { refreshPage, forward, load, navigate } from './navigate';\nimport { tabLoad, tabRemove } from './tab';\nimport { modalLoad, modalRemove } from './modal';\nimport { backward, loadBack, back } from './back';\nimport { clearPreviousHistory, clearPreviousPages } from './clear-previous-history';\nimport appRouterCheck from './app-router-check';\n\nvar Router =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Router, _Framework7Class);\n\n  function Router(app, view) {\n    var _this;\n\n    _classCallCheck(this, Router);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Router).call(this, {}, [typeof view === 'undefined' ? app : view]));\n\n    var router = _assertThisInitialized(_assertThisInitialized(_this)); // Is App Router\n\n\n    router.isAppRouter = typeof view === 'undefined';\n\n    if (router.isAppRouter) {\n      // App Router\n      Utils.extend(false, router, {\n        app: app,\n        params: app.params.view,\n        routes: app.routes || [],\n        cache: app.cache\n      });\n    } else {\n      // View Router\n      Utils.extend(false, router, {\n        app: app,\n        view: view,\n        viewId: view.id,\n        params: view.params,\n        routes: view.routes,\n        $el: view.$el,\n        el: view.el,\n        $navbarEl: view.$navbarEl,\n        navbarEl: view.navbarEl,\n        history: view.history,\n        scrollHistory: view.scrollHistory,\n        cache: app.cache,\n        dynamicNavbar: app.theme === 'ios' && view.params.iosDynamicNavbar,\n        separateNavbar: app.theme === 'ios' && view.params.iosDynamicNavbar && view.params.iosSeparateDynamicNavbar,\n        initialPages: [],\n        initialNavbars: []\n      });\n    } // Install Modules\n\n\n    router.useModules(); // Temporary Dom\n\n    router.tempDom = document.createElement('div'); // AllowPageChage\n\n    router.allowPageChange = true; // Current Route\n\n    var currentRoute = {};\n    var previousRoute = {};\n    Object.defineProperty(router, 'currentRoute', {\n      enumerable: true,\n      configurable: true,\n      set: function set() {\n        var newRoute = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        previousRoute = Utils.extend({}, currentRoute);\n        currentRoute = newRoute;\n        if (!currentRoute) return;\n        router.url = currentRoute.url;\n        router.emit('routeChange', newRoute, previousRoute, router);\n      },\n      get: function get() {\n        return currentRoute;\n      }\n    });\n    Object.defineProperty(router, 'previousRoute', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return previousRoute;\n      },\n      set: function set(newRoute) {\n        previousRoute = newRoute;\n      }\n    });\n    return _possibleConstructorReturn(_this, router);\n  }\n\n  _createClass(Router, [{\n    key: \"animatableNavElements\",\n    value: function animatableNavElements(newNavbarInner, oldNavbarInner, toLarge, fromLarge, direction) {\n      var router = this;\n      var dynamicNavbar = router.dynamicNavbar;\n      var separateNavbar = router.separateNavbar;\n      var animateIcon = router.params.iosAnimateNavbarBackIcon;\n      var newNavEls;\n      var oldNavEls;\n\n      function animatableNavEl($el, navbarInner) {\n        var isSliding = $el.hasClass('sliding') || navbarInner.hasClass('sliding');\n        var isSubnavbar = $el.hasClass('subnavbar');\n        var needsOpacityTransition = isSliding ? !isSubnavbar : true;\n        var $iconEl = $el.find('.back .icon');\n        var isIconLabel;\n\n        if (isSliding && animateIcon && $el.hasClass('left') && $iconEl.length > 0 && $iconEl.next('span').length) {\n          $el = $iconEl.next('span'); // eslint-disable-line\n\n          isIconLabel = true;\n        }\n\n        return {\n          $el: $el,\n          isIconLabel: isIconLabel,\n          leftOffset: $el[0].f7NavbarLeftOffset,\n          rightOffset: $el[0].f7NavbarRightOffset,\n          isSliding: isSliding,\n          isSubnavbar: isSubnavbar,\n          needsOpacityTransition: needsOpacityTransition\n        };\n      }\n\n      if (dynamicNavbar) {\n        newNavEls = [];\n        oldNavEls = [];\n        newNavbarInner.children('.left, .right, .title, .subnavbar').each(function (index, navEl) {\n          var $navEl = $(navEl);\n          if ($navEl.hasClass('left') && fromLarge && direction === 'forward' && separateNavbar) return;\n          if ($navEl.hasClass('title') && toLarge) return;\n          newNavEls.push(animatableNavEl($navEl, newNavbarInner));\n        });\n\n        if (!(oldNavbarInner.hasClass('navbar-master') && router.params.masterDetailBreakpoint > 0 && router.app.width >= router.params.masterDetailBreakpoint)) {\n          oldNavbarInner.children('.left, .right, .title, .subnavbar').each(function (index, navEl) {\n            var $navEl = $(navEl);\n            if ($navEl.hasClass('left') && toLarge && !fromLarge && direction === 'forward' && separateNavbar) return;\n            if ($navEl.hasClass('left') && toLarge && direction === 'backward' && separateNavbar) return;\n\n            if ($navEl.hasClass('title') && fromLarge) {\n              return;\n            }\n\n            oldNavEls.push(animatableNavEl($navEl, oldNavbarInner));\n          });\n        }\n\n        [oldNavEls, newNavEls].forEach(function (navEls) {\n          navEls.forEach(function (navEl) {\n            var n = navEl;\n            var isSliding = navEl.isSliding,\n                $el = navEl.$el;\n            var otherEls = navEls === oldNavEls ? newNavEls : oldNavEls;\n            if (!(isSliding && $el.hasClass('title') && otherEls)) return;\n            otherEls.forEach(function (otherNavEl) {\n              if (otherNavEl.isIconLabel) {\n                var iconTextEl = otherNavEl.$el[0];\n                n.leftOffset += iconTextEl ? iconTextEl.offsetLeft || 0 : 0;\n              }\n            });\n          });\n        });\n      }\n\n      return {\n        newNavEls: newNavEls,\n        oldNavEls: oldNavEls\n      };\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(oldPage, newPage, oldNavbarInner, newNavbarInner, direction, callback) {\n      var router = this;\n\n      if (router.params.animateCustom) {\n        router.params.animateCustom.apply(router, [oldPage, newPage, oldNavbarInner, newNavbarInner, direction, callback]);\n        return;\n      }\n\n      var dynamicNavbar = router.dynamicNavbar;\n      var ios = router.app.theme === 'ios'; // Router Animation class\n\n      var routerTransitionClass = \"router-transition-\".concat(direction, \" router-transition\");\n      var newNavEls;\n      var oldNavEls;\n      var fromLarge;\n      var toLarge;\n      var oldIsLarge;\n      var newIsLarge;\n\n      if (ios && dynamicNavbar) {\n        oldIsLarge = oldNavbarInner && oldNavbarInner.hasClass('navbar-inner-large');\n        newIsLarge = newNavbarInner && newNavbarInner.hasClass('navbar-inner-large');\n        fromLarge = oldIsLarge && !oldNavbarInner.hasClass('navbar-inner-large-collapsed');\n        toLarge = newIsLarge && !newNavbarInner.hasClass('navbar-inner-large-collapsed');\n        var navEls = router.animatableNavElements(newNavbarInner, oldNavbarInner, toLarge, fromLarge, direction);\n        newNavEls = navEls.newNavEls;\n        oldNavEls = navEls.oldNavEls;\n      }\n\n      function animateNavbars(progress) {\n        if (!(ios && dynamicNavbar)) return;\n\n        if (progress === 1) {\n          if (toLarge) {\n            newNavbarInner.addClass('router-navbar-transition-to-large');\n            oldNavbarInner.addClass('router-navbar-transition-to-large');\n          }\n\n          if (fromLarge) {\n            newNavbarInner.addClass('router-navbar-transition-from-large');\n            oldNavbarInner.addClass('router-navbar-transition-from-large');\n          }\n        }\n\n        newNavEls.forEach(function (navEl) {\n          var $el = navEl.$el;\n          var offset = direction === 'forward' ? navEl.rightOffset : navEl.leftOffset;\n\n          if (navEl.isSliding) {\n            if (navEl.isSubnavbar && newIsLarge) {\n              $el[0].style.setProperty('transform', \"translate3d(\".concat(offset * (1 - progress), \"px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)\"), 'important');\n            } else {\n              $el.transform(\"translate3d(\".concat(offset * (1 - progress), \"px,0,0)\"));\n            }\n          }\n        });\n        oldNavEls.forEach(function (navEl) {\n          var $el = navEl.$el;\n          var offset = direction === 'forward' ? navEl.leftOffset : navEl.rightOffset;\n\n          if (navEl.isSliding) {\n            if (navEl.isSubnavbar && oldIsLarge) {\n              $el.transform(\"translate3d(\".concat(offset * progress, \"px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)\"));\n            } else {\n              $el.transform(\"translate3d(\".concat(offset * progress, \"px,0,0)\"));\n            }\n          }\n        });\n      } // AnimationEnd Callback\n\n\n      function onDone() {\n        if (router.dynamicNavbar) {\n          if (newNavbarInner) {\n            newNavbarInner.removeClass('router-navbar-transition-to-large router-navbar-transition-from-large');\n            newNavbarInner.addClass('navbar-no-title-large-transition');\n            Utils.nextFrame(function () {\n              newNavbarInner.removeClass('navbar-no-title-large-transition');\n            });\n          }\n\n          if (oldNavbarInner) {\n            oldNavbarInner.removeClass('router-navbar-transition-to-large router-navbar-transition-from-large');\n          }\n\n          if (newNavbarInner.hasClass('sliding')) {\n            newNavbarInner.find('.title, .left, .right, .left .icon, .subnavbar').transform('');\n          } else {\n            newNavbarInner.find('.sliding').transform('');\n          }\n\n          if (oldNavbarInner.hasClass('sliding')) {\n            oldNavbarInner.find('.title, .left, .right, .left .icon, .subnavbar').transform('');\n          } else {\n            oldNavbarInner.find('.sliding').transform('');\n          }\n        }\n\n        router.$el.removeClass(routerTransitionClass);\n        if (callback) callback();\n      }\n\n      (direction === 'forward' ? newPage : oldPage).animationEnd(function () {\n        onDone();\n      }); // Animate\n\n      if (dynamicNavbar) {\n        // Prepare Navbars\n        animateNavbars(0);\n        Utils.nextFrame(function () {\n          // Add class, start animation\n          animateNavbars(1);\n          router.$el.addClass(routerTransitionClass);\n        });\n      } else {\n        // Add class, start animation\n        router.$el.addClass(routerTransitionClass);\n      }\n    }\n  }, {\n    key: \"removeModal\",\n    value: function removeModal(modalEl) {\n      var router = this;\n      router.removeEl(modalEl);\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"removeTabContent\",\n    value: function removeTabContent(tabEl) {\n      var $tabEl = $(tabEl);\n      $tabEl.html('');\n    }\n  }, {\n    key: \"removeNavbar\",\n    value: function removeNavbar(el) {\n      var router = this;\n      router.removeEl(el);\n    }\n  }, {\n    key: \"removePage\",\n    value: function removePage(el) {\n      var $el = $(el);\n      var f7Page = $el && $el[0] && $el[0].f7Page;\n      var router = this;\n\n      if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {\n        $el.remove();\n        return;\n      }\n\n      router.removeEl(el);\n    }\n  }, {\n    key: \"removeEl\",\n    value: function removeEl(el) {\n      if (!el) return;\n      var router = this;\n      var $el = $(el);\n      if ($el.length === 0) return;\n      $el.find('.tab').each(function (tabIndex, tabEl) {\n        $(tabEl).children().each(function (index, tabChild) {\n          if (tabChild.f7Component) {\n            $(tabChild).trigger('tab:beforeremove');\n            tabChild.f7Component.$destroy();\n          }\n        });\n      });\n\n      if ($el[0].f7Component && $el[0].f7Component.$destroy) {\n        $el[0].f7Component.$destroy();\n      }\n\n      if (!router.params.removeElements) {\n        return;\n      }\n\n      if (router.params.removeElementsWithTimeout) {\n        setTimeout(function () {\n          $el.remove();\n        }, router.params.removeElementsTimeout);\n      } else {\n        $el.remove();\n      }\n    }\n  }, {\n    key: \"getPageEl\",\n    value: function getPageEl(content) {\n      var router = this;\n\n      if (typeof content === 'string') {\n        router.tempDom.innerHTML = content;\n      } else {\n        if ($(content).hasClass('page')) {\n          return content;\n        }\n\n        router.tempDom.innerHTML = '';\n        $(router.tempDom).append(content);\n      }\n\n      return router.findElement('.page', router.tempDom);\n    }\n  }, {\n    key: \"findElement\",\n    value: function findElement(stringSelector, container, notStacked) {\n      var router = this;\n      var view = router.view;\n      var app = router.app; // Modals Selector\n\n      var modalsSelector = '.popup, .dialog, .popover, .actions-modal, .sheet-modal, .login-screen, .page';\n      var $container = $(container);\n      var selector = stringSelector;\n      if (notStacked) selector += ':not(.stacked)';\n      var found = $container.find(selector).filter(function (index, el) {\n        return $(el).parents(modalsSelector).length === 0;\n      });\n\n      if (found.length > 1) {\n        if (typeof view.selector === 'string') {\n          // Search in related view\n          found = $container.find(\"\".concat(view.selector, \" \").concat(selector));\n        }\n\n        if (found.length > 1) {\n          // Search in main view\n          found = $container.find(\".\".concat(app.params.viewMainClass, \" \").concat(selector));\n        }\n      }\n\n      if (found.length === 1) return found; // Try to find not stacked\n\n      if (!notStacked) found = router.findElement(selector, $container, true);\n      if (found && found.length === 1) return found;\n      if (found && found.length > 1) return $(found[0]);\n      return undefined;\n    }\n  }, {\n    key: \"flattenRoutes\",\n    value: function flattenRoutes() {\n      var routes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.routes;\n      var router = this;\n      var flattenedRoutes = [];\n      routes.forEach(function (route) {\n        var hasTabRoutes = false;\n\n        if ('tabs' in route && route.tabs) {\n          var mergedPathsRoutes = route.tabs.map(function (tabRoute) {\n            var tRoute = Utils.extend({}, route, {\n              path: \"\".concat(route.path, \"/\").concat(tabRoute.path).replace('///', '/').replace('//', '/'),\n              parentPath: route.path,\n              tab: tabRoute\n            });\n            delete tRoute.tabs;\n            delete tRoute.routes;\n            return tRoute;\n          });\n          hasTabRoutes = true;\n          flattenedRoutes = flattenedRoutes.concat(router.flattenRoutes(mergedPathsRoutes));\n        }\n\n        if ('detailRoutes' in route) {\n          var _mergedPathsRoutes = route.detailRoutes.map(function (detailRoute) {\n            var dRoute = Utils.extend({}, detailRoute);\n            dRoute.masterRoute = route;\n            dRoute.masterRoutePath = route.path;\n            return dRoute;\n          });\n\n          flattenedRoutes = flattenedRoutes.concat(route, router.flattenRoutes(_mergedPathsRoutes));\n        }\n\n        if ('routes' in route) {\n          var _mergedPathsRoutes2 = route.routes.map(function (childRoute) {\n            var cRoute = Utils.extend({}, childRoute);\n            cRoute.path = \"\".concat(route.path, \"/\").concat(cRoute.path).replace('///', '/').replace('//', '/');\n            return cRoute;\n          });\n\n          if (hasTabRoutes) {\n            flattenedRoutes = flattenedRoutes.concat(router.flattenRoutes(_mergedPathsRoutes2));\n          } else {\n            flattenedRoutes = flattenedRoutes.concat(route, router.flattenRoutes(_mergedPathsRoutes2));\n          }\n        }\n\n        if (!('routes' in route) && !('tabs' in route && route.tabs) && !('detailRoutes' in route)) {\n          flattenedRoutes.push(route);\n        }\n      });\n      return flattenedRoutes;\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"parseRouteUrl\",\n    value: function parseRouteUrl(url) {\n      if (!url) return {};\n      var query = Utils.parseUrlQuery(url);\n      var hash = url.split('#')[1];\n      var params = {};\n      var path = url.split('#')[0].split('?')[0];\n      return {\n        query: query,\n        hash: hash,\n        params: params,\n        url: url,\n        path: path\n      };\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"constructRouteUrl\",\n    value: function constructRouteUrl(route) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          params = _ref.params,\n          query = _ref.query;\n\n      var path = route.path;\n      var toUrl = PathToRegexp.compile(path);\n      var url;\n\n      try {\n        url = toUrl(params || {});\n      } catch (error) {\n        throw new Error(\"Framework7: error constructing route URL from passed params:\\nRoute: \".concat(path, \"\\n\").concat(error.toString()));\n      }\n\n      if (query) {\n        if (typeof query === 'string') url += \"?\".concat(query);else url += \"?\".concat(Utils.serializeObject(query));\n      }\n\n      return url;\n    }\n  }, {\n    key: \"findTabRoute\",\n    value: function findTabRoute(tabEl) {\n      var router = this;\n      var $tabEl = $(tabEl);\n      var parentPath = router.currentRoute.route.parentPath;\n      var tabId = $tabEl.attr('id');\n      var flattenedRoutes = router.flattenRoutes(router.routes);\n      var foundTabRoute;\n      flattenedRoutes.forEach(function (route) {\n        if (route.parentPath === parentPath && route.tab && route.tab.id === tabId) {\n          foundTabRoute = route;\n        }\n      });\n      return foundTabRoute;\n    }\n  }, {\n    key: \"findRouteByKey\",\n    value: function findRouteByKey(key, value) {\n      var router = this;\n      var routes = router.routes;\n      var flattenedRoutes = router.flattenRoutes(routes);\n      var matchingRoute;\n      flattenedRoutes.forEach(function (route) {\n        if (matchingRoute) return;\n\n        if (route[key] === value) {\n          matchingRoute = route;\n        }\n      });\n      return matchingRoute;\n    }\n  }, {\n    key: \"findMatchingRoute\",\n    value: function findMatchingRoute(url) {\n      if (!url) return undefined;\n      var router = this;\n      var routes = router.routes;\n      var flattenedRoutes = router.flattenRoutes(routes);\n\n      var _router$parseRouteUrl = router.parseRouteUrl(url),\n          path = _router$parseRouteUrl.path,\n          query = _router$parseRouteUrl.query,\n          hash = _router$parseRouteUrl.hash,\n          params = _router$parseRouteUrl.params;\n\n      var matchingRoute;\n      flattenedRoutes.forEach(function (route) {\n        if (matchingRoute) return;\n        var keys = [];\n        var pathsToMatch = [route.path];\n\n        if (route.alias) {\n          if (typeof route.alias === 'string') pathsToMatch.push(route.alias);else if (Array.isArray(route.alias)) {\n            route.alias.forEach(function (aliasPath) {\n              pathsToMatch.push(aliasPath);\n            });\n          }\n        }\n\n        var matched;\n        pathsToMatch.forEach(function (pathToMatch) {\n          if (matched) return;\n          matched = PathToRegexp(pathToMatch, keys).exec(path);\n        });\n\n        if (matched) {\n          keys.forEach(function (keyObj, index) {\n            if (typeof keyObj.name === 'number') return;\n            var paramValue = matched[index + 1];\n            params[keyObj.name] = paramValue;\n          });\n          var parentPath;\n\n          if (route.parentPath) {\n            parentPath = path.split('/').slice(0, route.parentPath.split('/').length - 1).join('/');\n          }\n\n          matchingRoute = {\n            query: query,\n            hash: hash,\n            params: params,\n            url: url,\n            path: path,\n            parentPath: parentPath,\n            route: route,\n            name: route.name\n          };\n        }\n      });\n      return matchingRoute;\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"replaceRequestUrlParams\",\n    value: function replaceRequestUrlParams() {\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var compiledUrl = url;\n\n      if (typeof compiledUrl === 'string' && compiledUrl.indexOf('{{') >= 0 && options && options.route && options.route.params && Object.keys(options.route.params).length) {\n        Object.keys(options.route.params).forEach(function (paramName) {\n          var regExp = new RegExp(\"{{\".concat(paramName, \"}}\"), 'g');\n          compiledUrl = compiledUrl.replace(regExp, options.route.params[paramName] || '');\n        });\n      }\n\n      return compiledUrl;\n    }\n  }, {\n    key: \"removeFromXhrCache\",\n    value: function removeFromXhrCache(url) {\n      var router = this;\n      var xhrCache = router.cache.xhr;\n      var index = false;\n\n      for (var i = 0; i < xhrCache.length; i += 1) {\n        if (xhrCache[i].url === url) index = i;\n      }\n\n      if (index !== false) xhrCache.splice(index, 1);\n    }\n  }, {\n    key: \"xhrRequest\",\n    value: function xhrRequest(requestUrl, options) {\n      var router = this;\n      var params = router.params;\n      var ignoreCache = options.ignoreCache;\n      var url = requestUrl;\n      var hasQuery = url.indexOf('?') >= 0;\n\n      if (params.passRouteQueryToRequest && options && options.route && options.route.query && Object.keys(options.route.query).length) {\n        url += \"\".concat(hasQuery ? '&' : '?').concat(Utils.serializeObject(options.route.query));\n        hasQuery = true;\n      }\n\n      if (params.passRouteParamsToRequest && options && options.route && options.route.params && Object.keys(options.route.params).length) {\n        url += \"\".concat(hasQuery ? '&' : '?').concat(Utils.serializeObject(options.route.params));\n        hasQuery = true;\n      }\n\n      if (url.indexOf('{{') >= 0) {\n        url = router.replaceRequestUrlParams(url, options);\n      } // should we ignore get params or not\n\n\n      if (params.xhrCacheIgnoreGetParameters && url.indexOf('?') >= 0) {\n        url = url.split('?')[0];\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (params.xhrCache && !ignoreCache && url.indexOf('nocache') < 0 && params.xhrCacheIgnore.indexOf(url) < 0) {\n          for (var i = 0; i < router.cache.xhr.length; i += 1) {\n            var cachedUrl = router.cache.xhr[i];\n\n            if (cachedUrl.url === url) {\n              // Check expiration\n              if (Utils.now() - cachedUrl.time < params.xhrCacheDuration) {\n                // Load from cache\n                resolve(cachedUrl.content);\n                return;\n              }\n            }\n          }\n        }\n\n        router.xhr = router.app.request({\n          url: url,\n          method: 'GET',\n          beforeSend: function beforeSend(xhr) {\n            router.emit('routerAjaxStart', xhr, options);\n          },\n          complete: function complete(xhr, status) {\n            router.emit('routerAjaxComplete', xhr);\n\n            if (status !== 'error' && status !== 'timeout' && xhr.status >= 200 && xhr.status < 300 || xhr.status === 0) {\n              if (params.xhrCache && xhr.responseText !== '') {\n                router.removeFromXhrCache(url);\n                router.cache.xhr.push({\n                  url: url,\n                  time: Utils.now(),\n                  content: xhr.responseText\n                });\n              }\n\n              router.emit('routerAjaxSuccess', xhr, options);\n              resolve(xhr.responseText);\n            } else {\n              router.emit('routerAjaxError', xhr, options);\n              reject(xhr);\n            }\n          },\n          error: function error(xhr) {\n            router.emit('routerAjaxError', xhr, options);\n            reject(xhr);\n          }\n        });\n      });\n    } // Remove theme elements\n\n  }, {\n    key: \"removeThemeElements\",\n    value: function removeThemeElements(el) {\n      var router = this;\n      var theme = router.app.theme;\n      $(el).find(\".\".concat(theme === 'md' ? 'ios' : 'md', \"-only, .if-\").concat(theme === 'md' ? 'ios' : 'md')).remove();\n    }\n  }, {\n    key: \"getPageData\",\n    value: function getPageData(pageEl, navbarEl, from, to) {\n      var route = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var pageFromEl = arguments.length > 5 ? arguments[5] : undefined;\n      var router = this;\n      var $pageEl = $(pageEl).eq(0);\n      var $navbarEl = $(navbarEl).eq(0);\n      var currentPage = $pageEl[0].f7Page || {};\n      var direction;\n      var pageFrom;\n      if (from === 'next' && to === 'current' || from === 'current' && to === 'previous') direction = 'forward';\n      if (from === 'current' && to === 'next' || from === 'previous' && to === 'current') direction = 'backward';\n\n      if (currentPage && !currentPage.fromPage) {\n        var $pageFromEl = $(pageFromEl);\n\n        if ($pageFromEl.length) {\n          pageFrom = $pageFromEl[0].f7Page;\n        }\n      }\n\n      pageFrom = currentPage.pageFrom || pageFrom;\n\n      if (pageFrom && pageFrom.pageFrom) {\n        pageFrom.pageFrom = null;\n      }\n\n      var page = {\n        app: router.app,\n        view: router.view,\n        router: router,\n        $el: $pageEl,\n        el: $pageEl[0],\n        $pageEl: $pageEl,\n        pageEl: $pageEl[0],\n        $navbarEl: $navbarEl,\n        navbarEl: $navbarEl[0],\n        name: $pageEl.attr('data-name'),\n        position: from,\n        from: from,\n        to: to,\n        direction: direction,\n        route: currentPage.route ? currentPage.route : route,\n        pageFrom: pageFrom\n      };\n      $pageEl[0].f7Page = page;\n      return page;\n    } // Callbacks\n\n  }, {\n    key: \"pageCallback\",\n    value: function pageCallback(callback, pageEl, navbarEl, from, to) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var pageFromEl = arguments.length > 6 ? arguments[6] : undefined;\n      if (!pageEl) return;\n      var router = this;\n      var $pageEl = $(pageEl);\n      if (!$pageEl.length) return;\n      var $navbarEl = $(navbarEl);\n      var route = options.route;\n      var restoreScrollTopOnBack = router.params.restoreScrollTopOnBack && !(router.params.masterDetailBreakpoint > 0 && $pageEl.hasClass('page-master') && router.app.width >= router.params.masterDetailBreakpoint);\n      var keepAlive = $pageEl[0].f7Page && $pageEl[0].f7Page.route && $pageEl[0].f7Page.route.route && $pageEl[0].f7Page.route.route.keepAlive;\n\n      if (callback === 'beforeRemove' && keepAlive) {\n        callback = 'beforeUnmount'; // eslint-disable-line\n      }\n\n      var camelName = \"page\".concat(callback[0].toUpperCase() + callback.slice(1, callback.length));\n      var colonName = \"page:\".concat(callback.toLowerCase());\n      var page = {};\n\n      if (callback === 'beforeRemove' && $pageEl[0].f7Page) {\n        page = Utils.extend($pageEl[0].f7Page, {\n          from: from,\n          to: to,\n          position: from\n        });\n      } else {\n        page = router.getPageData($pageEl[0], $navbarEl[0], from, to, route, pageFromEl);\n      }\n\n      page.swipeBack = !!options.swipeBack;\n\n      var _ref2 = options.route ? options.route.route : {},\n          _ref2$on = _ref2.on,\n          on = _ref2$on === void 0 ? {} : _ref2$on,\n          _ref2$once = _ref2.once,\n          once = _ref2$once === void 0 ? {} : _ref2$once;\n\n      if (options.on) {\n        Utils.extend(on, options.on);\n      }\n\n      if (options.once) {\n        Utils.extend(once, options.once);\n      }\n\n      function attachEvents() {\n        if ($pageEl[0].f7RouteEventsAttached) return;\n        $pageEl[0].f7RouteEventsAttached = true;\n\n        if (on && Object.keys(on).length > 0) {\n          $pageEl[0].f7RouteEventsOn = on;\n          Object.keys(on).forEach(function (eventName) {\n            on[eventName] = on[eventName].bind(router);\n            $pageEl.on(Utils.eventNameToColonCase(eventName), on[eventName]);\n          });\n        }\n\n        if (once && Object.keys(once).length > 0) {\n          $pageEl[0].f7RouteEventsOnce = once;\n          Object.keys(once).forEach(function (eventName) {\n            once[eventName] = once[eventName].bind(router);\n            $pageEl.once(Utils.eventNameToColonCase(eventName), once[eventName]);\n          });\n        }\n      }\n\n      function detachEvents() {\n        if (!$pageEl[0].f7RouteEventsAttached) return;\n\n        if ($pageEl[0].f7RouteEventsOn) {\n          Object.keys($pageEl[0].f7RouteEventsOn).forEach(function (eventName) {\n            $pageEl.off(Utils.eventNameToColonCase(eventName), $pageEl[0].f7RouteEventsOn[eventName]);\n          });\n        }\n\n        if ($pageEl[0].f7RouteEventsOnce) {\n          Object.keys($pageEl[0].f7RouteEventsOnce).forEach(function (eventName) {\n            $pageEl.off(Utils.eventNameToColonCase(eventName), $pageEl[0].f7RouteEventsOnce[eventName]);\n          });\n        }\n\n        $pageEl[0].f7RouteEventsAttached = null;\n        $pageEl[0].f7RouteEventsOn = null;\n        $pageEl[0].f7RouteEventsOnce = null;\n        delete $pageEl[0].f7RouteEventsAttached;\n        delete $pageEl[0].f7RouteEventsOn;\n        delete $pageEl[0].f7RouteEventsOnce;\n      }\n\n      if (callback === 'mounted') {\n        attachEvents();\n      }\n\n      if (callback === 'init') {\n        if (restoreScrollTopOnBack && (from === 'previous' || !from) && to === 'current' && router.scrollHistory[page.route.url] && !$pageEl.hasClass('no-restore-scroll')) {\n          var $pageContent = $pageEl.find('.page-content');\n\n          if ($pageContent.length > 0) {\n            // eslint-disable-next-line\n            $pageContent = $pageContent.filter(function (pageContentIndex, pageContentEl) {\n              return $(pageContentEl).parents('.tab:not(.tab-active)').length === 0 && !$(pageContentEl).is('.tab:not(.tab-active)');\n            });\n          }\n\n          $pageContent.scrollTop(router.scrollHistory[page.route.url]);\n        }\n\n        attachEvents();\n\n        if ($pageEl[0].f7PageInitialized) {\n          $pageEl.trigger('page:reinit', page);\n          router.emit('pageReinit', page);\n          return;\n        }\n\n        $pageEl[0].f7PageInitialized = true;\n      }\n\n      if (restoreScrollTopOnBack && callback === 'beforeOut' && from === 'current' && to === 'previous') {\n        // Save scroll position\n        var _$pageContent = $pageEl.find('.page-content');\n\n        if (_$pageContent.length > 0) {\n          // eslint-disable-next-line\n          _$pageContent = _$pageContent.filter(function (pageContentIndex, pageContentEl) {\n            return $(pageContentEl).parents('.tab:not(.tab-active)').length === 0 && !$(pageContentEl).is('.tab:not(.tab-active)');\n          });\n        }\n\n        router.scrollHistory[page.route.url] = _$pageContent.scrollTop();\n      }\n\n      if (restoreScrollTopOnBack && callback === 'beforeOut' && from === 'current' && to === 'next') {\n        // Delete scroll position\n        delete router.scrollHistory[page.route.url];\n      }\n\n      $pageEl.trigger(colonName, page);\n      router.emit(camelName, page);\n\n      if (callback === 'beforeRemove' || callback === 'beforeUnmount') {\n        detachEvents();\n\n        if (!keepAlive) {\n          if ($pageEl[0].f7Page && $pageEl[0].f7Page.navbarEl) {\n            delete $pageEl[0].f7Page.navbarEl.f7Page;\n          }\n\n          $pageEl[0].f7Page = null;\n        }\n      }\n    }\n  }, {\n    key: \"saveHistory\",\n    value: function saveHistory() {\n      var router = this;\n      router.view.history = router.history;\n\n      if (router.params.pushState) {\n        window.localStorage[\"f7router-\".concat(router.view.id, \"-history\")] = JSON.stringify(router.history);\n      }\n    }\n  }, {\n    key: \"restoreHistory\",\n    value: function restoreHistory() {\n      var router = this;\n\n      if (router.params.pushState && window.localStorage[\"f7router-\".concat(router.view.id, \"-history\")]) {\n        router.history = JSON.parse(window.localStorage[\"f7router-\".concat(router.view.id, \"-history\")]);\n        router.view.history = router.history;\n      }\n    }\n  }, {\n    key: \"clearHistory\",\n    value: function clearHistory() {\n      var router = this;\n      router.history = [];\n      if (router.view) router.view.history = [];\n      router.saveHistory();\n    }\n  }, {\n    key: \"updateCurrentUrl\",\n    value: function updateCurrentUrl(newUrl) {\n      var router = this;\n      appRouterCheck(router, 'updateCurrentUrl'); // Update history\n\n      if (router.history.length) {\n        router.history[router.history.length - 1] = newUrl;\n      } else {\n        router.history.push(newUrl);\n      } // Update current route params\n\n\n      var _router$parseRouteUrl2 = router.parseRouteUrl(newUrl),\n          query = _router$parseRouteUrl2.query,\n          hash = _router$parseRouteUrl2.hash,\n          params = _router$parseRouteUrl2.params,\n          url = _router$parseRouteUrl2.url,\n          path = _router$parseRouteUrl2.path;\n\n      if (router.currentRoute) {\n        Utils.extend(router.currentRoute, {\n          query: query,\n          hash: hash,\n          params: params,\n          url: url,\n          path: path\n        });\n      }\n\n      if (router.params.pushState) {\n        var pushStateRoot = router.params.pushStateRoot || '';\n        History.replace(router.view.id, {\n          url: newUrl\n        }, pushStateRoot + router.params.pushStateSeparator + newUrl);\n      } // Save History\n\n\n      router.saveHistory();\n      router.emit('routeUrlUpdate', router.currentRoute, router);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var router = this;\n      var app = router.app,\n          view = router.view; // Init Swipeback\n\n      if (\"universal\" !== 'desktop') {\n        if (view && router.params.iosSwipeBack && app.theme === 'ios' || view && router.params.mdSwipeBack && app.theme === 'md') {\n          SwipeBack(router);\n        }\n      } // Dynamic not separated navbbar\n\n\n      if (router.dynamicNavbar && !router.separateNavbar) {\n        router.$el.addClass('router-dynamic-navbar-inside');\n      }\n\n      var initUrl = router.params.url;\n      var documentUrl = document.location.href.split(document.location.origin)[1];\n      var historyRestored;\n      var _router$params = router.params,\n          pushState = _router$params.pushState,\n          pushStateOnLoad = _router$params.pushStateOnLoad,\n          pushStateSeparator = _router$params.pushStateSeparator,\n          pushStateAnimateOnLoad = _router$params.pushStateAnimateOnLoad;\n      var pushStateRoot = router.params.pushStateRoot;\n\n      if (window.cordova && pushState && !pushStateSeparator && !pushStateRoot && document.location.pathname.indexOf('index.html')) {\n        // eslint-disable-next-line\n        console.warn('Framework7: wrong or not complete pushState configuration, trying to guess pushStateRoot');\n        pushStateRoot = document.location.pathname.split('index.html')[0];\n      }\n\n      if (!pushState || !pushStateOnLoad) {\n        if (!initUrl) {\n          initUrl = documentUrl;\n        }\n\n        if (document.location.search && initUrl.indexOf('?') < 0) {\n          initUrl += document.location.search;\n        }\n\n        if (document.location.hash && initUrl.indexOf('#') < 0) {\n          initUrl += document.location.hash;\n        }\n      } else {\n        if (pushStateRoot && documentUrl.indexOf(pushStateRoot) >= 0) {\n          documentUrl = documentUrl.split(pushStateRoot)[1];\n          if (documentUrl === '') documentUrl = '/';\n        }\n\n        if (pushStateSeparator.length > 0 && documentUrl.indexOf(pushStateSeparator) >= 0) {\n          initUrl = documentUrl.split(pushStateSeparator)[1];\n        } else {\n          initUrl = documentUrl;\n        }\n\n        router.restoreHistory();\n\n        if (router.history.indexOf(initUrl) >= 0) {\n          router.history = router.history.slice(0, router.history.indexOf(initUrl) + 1);\n        } else if (router.params.url === initUrl) {\n          router.history = [initUrl];\n        } else if (History.state && History.state[view.id] && History.state[view.id].url === router.history[router.history.length - 1]) {\n          initUrl = router.history[router.history.length - 1];\n        } else {\n          router.history = [documentUrl.split(pushStateSeparator)[0] || '/', initUrl];\n        }\n\n        if (router.history.length > 1) {\n          historyRestored = true;\n        } else {\n          router.history = [];\n        }\n\n        router.saveHistory();\n      }\n\n      var currentRoute;\n\n      if (router.history.length > 1) {\n        // Will load page\n        currentRoute = router.findMatchingRoute(router.history[0]);\n\n        if (!currentRoute) {\n          currentRoute = Utils.extend(router.parseRouteUrl(router.history[0]), {\n            route: {\n              url: router.history[0],\n              path: router.history[0].split('?')[0]\n            }\n          });\n        }\n      } else {\n        // Don't load page\n        currentRoute = router.findMatchingRoute(initUrl);\n\n        if (!currentRoute) {\n          currentRoute = Utils.extend(router.parseRouteUrl(initUrl), {\n            route: {\n              url: initUrl,\n              path: initUrl.split('?')[0]\n            }\n          });\n        }\n      }\n\n      if (router.params.stackPages) {\n        router.$el.children('.page').each(function (index, pageEl) {\n          var $pageEl = $(pageEl);\n          router.initialPages.push($pageEl[0]);\n\n          if (router.separateNavbar && $pageEl.children('.navbar').length > 0) {\n            router.initialNavbars.push($pageEl.children('.navbar').find('.navbar-inner')[0]);\n          }\n        });\n      }\n\n      if (router.$el.children('.page:not(.stacked)').length === 0 && initUrl) {\n        // No pages presented in DOM, reload new page\n        router.navigate(initUrl, {\n          initial: true,\n          reloadCurrent: true,\n          pushState: false\n        });\n      } else {\n        // Init current DOM page\n        var hasTabRoute;\n        router.currentRoute = currentRoute;\n        router.$el.children('.page:not(.stacked)').each(function (index, pageEl) {\n          var $pageEl = $(pageEl);\n          var $navbarInnerEl;\n          $pageEl.addClass('page-current');\n\n          if (router.separateNavbar) {\n            $navbarInnerEl = $pageEl.children('.navbar').children('.navbar-inner');\n\n            if ($navbarInnerEl.length > 0) {\n              if (!router.$navbarEl.parents(document).length) {\n                router.$el.prepend(router.$navbarEl);\n              }\n\n              $navbarInnerEl.addClass('navbar-current');\n              router.$navbarEl.append($navbarInnerEl);\n\n              if ($navbarInnerEl.children('.title-large').length) {\n                $navbarInnerEl.addClass('navbar-inner-large');\n              }\n\n              $pageEl.children('.navbar').remove();\n            } else {\n              router.$navbarEl.addClass('navbar-hidden');\n\n              if ($navbarInnerEl.children('.title-large').length) {\n                router.$navbarEl.addClass('navbar-hidden navbar-large-hidden');\n              }\n            }\n          }\n\n          if (router.currentRoute && router.currentRoute.route && router.currentRoute.route.master && router.params.masterDetailBreakpoint > 0) {\n            $pageEl.addClass('page-master');\n            $pageEl.trigger('page:role', {\n              role: 'master'\n            });\n\n            if ($navbarInnerEl && $navbarInnerEl.length) {\n              $navbarInnerEl.addClass('navbar-master');\n            }\n          }\n\n          var initOptions = {\n            route: router.currentRoute\n          };\n\n          if (router.currentRoute && router.currentRoute.route && router.currentRoute.route.options) {\n            Utils.extend(initOptions, router.currentRoute.route.options);\n          }\n\n          router.currentPageEl = $pageEl[0];\n\n          if (router.separateNavbar && $navbarInnerEl.length) {\n            router.currentNavbarEl = $navbarInnerEl[0];\n          }\n\n          router.removeThemeElements($pageEl);\n\n          if (router.separateNavbar && $navbarInnerEl.length) {\n            router.removeThemeElements($navbarInnerEl);\n          }\n\n          if (initOptions.route.route.tab) {\n            hasTabRoute = true;\n            router.tabLoad(initOptions.route.route.tab, Utils.extend({}, initOptions));\n          }\n\n          router.pageCallback('init', $pageEl, $navbarInnerEl, 'current', undefined, initOptions);\n        });\n\n        if (historyRestored) {\n          router.navigate(initUrl, {\n            initial: true,\n            pushState: false,\n            history: false,\n            animate: pushStateAnimateOnLoad,\n            once: {\n              pageAfterIn: function pageAfterIn() {\n                if (router.history.length > 2) {\n                  router.back({\n                    preload: true\n                  });\n                }\n              }\n            }\n          });\n        }\n\n        if (!historyRestored && !hasTabRoute) {\n          router.history.push(initUrl);\n          router.saveHistory();\n        }\n      }\n\n      if (initUrl && pushState && pushStateOnLoad && (!History.state || !History.state[view.id])) {\n        History.initViewState(view.id, {\n          url: initUrl\n        });\n      }\n\n      router.emit('local::init routerInit', router);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var router = this;\n      router.emit('local::destroy routerDestroy', router); // Delete props & methods\n\n      Object.keys(router).forEach(function (routerProp) {\n        router[routerProp] = null;\n        delete router[routerProp];\n      });\n      router = null;\n    }\n  }]);\n\n  return Router;\n}(Framework7Class); // Load\n\n\nRouter.prototype.forward = forward;\nRouter.prototype.load = load;\nRouter.prototype.navigate = navigate;\nRouter.prototype.refreshPage = refreshPage; // Tab\n\nRouter.prototype.tabLoad = tabLoad;\nRouter.prototype.tabRemove = tabRemove; // Modal\n\nRouter.prototype.modalLoad = modalLoad;\nRouter.prototype.modalRemove = modalRemove; // Back\n\nRouter.prototype.backward = backward;\nRouter.prototype.loadBack = loadBack;\nRouter.prototype.back = back; // Clear previoius pages from the DOM\n\nRouter.prototype.clearPreviousPages = clearPreviousPages; // Clear history\n\nRouter.prototype.clearPreviousHistory = clearPreviousHistory;\nexport default Router;","map":null,"metadata":{},"sourceType":"module"}