{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport Support from '../../utils/support';\n\nvar Toggle =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Toggle, _Framework7Class);\n\n  function Toggle(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Toggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Toggle).call(this, params, [app]));\n\n    var toggle = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = {}; // Extend defaults with modules params\n\n    toggle.useModulesParams(defaults);\n    toggle.params = Utils.extend(defaults, params);\n    var el = toggle.params.el;\n    if (!el) return _possibleConstructorReturn(_this, toggle);\n    var $el = $(el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, toggle);\n    if ($el[0].f7Toggle) return _possibleConstructorReturn(_this, $el[0].f7Toggle);\n    var $inputEl = $el.children('input[type=\"checkbox\"]');\n    Utils.extend(toggle, {\n      app: app,\n      $el: $el,\n      el: $el[0],\n      $inputEl: $inputEl,\n      inputEl: $inputEl[0],\n      disabled: $el.hasClass('disabled') || $inputEl.hasClass('disabled') || $inputEl.attr('disabled') || $inputEl[0].disabled\n    });\n    Object.defineProperty(toggle, 'checked', {\n      enumerable: true,\n      configurable: true,\n      set: function set(checked) {\n        if (!toggle || typeof toggle.$inputEl === 'undefined') return;\n        if (toggle.checked === checked) return;\n        $inputEl[0].checked = checked;\n        toggle.$inputEl.trigger('change');\n      },\n      get: function get() {\n        return $inputEl[0].checked;\n      }\n    });\n    $el[0].f7Toggle = toggle;\n    var isTouched;\n    var touchesStart = {};\n    var isScrolling;\n    var touchesDiff;\n    var toggleWidth;\n    var touchStartTime;\n    var touchStartChecked;\n\n    function handleTouchStart(e) {\n      if (isTouched || toggle.disabled) return;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      touchesDiff = 0;\n      isTouched = true;\n      isScrolling = undefined;\n      touchStartTime = Utils.now();\n      touchStartChecked = toggle.checked;\n      toggleWidth = $el[0].offsetWidth;\n      Utils.nextTick(function () {\n        if (isTouched) {\n          $el.addClass('toggle-active-state');\n        }\n      });\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched || toggle.disabled) return;\n      var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n      var inverter = app.rtl ? -1 : 1;\n\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      e.preventDefault();\n      touchesDiff = pageX - touchesStart.x;\n      var changed;\n\n      if (touchesDiff * inverter < 0 && Math.abs(touchesDiff) > toggleWidth / 3 && touchStartChecked) {\n        changed = true;\n      }\n\n      if (touchesDiff * inverter > 0 && Math.abs(touchesDiff) > toggleWidth / 3 && !touchStartChecked) {\n        changed = true;\n      }\n\n      if (changed) {\n        touchesStart.x = pageX;\n        toggle.checked = !touchStartChecked;\n        touchStartChecked = !touchStartChecked;\n      }\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched || toggle.disabled) {\n        if (isScrolling) $el.removeClass('toggle-active-state');\n        isTouched = false;\n        return;\n      }\n\n      var inverter = app.rtl ? -1 : 1;\n      isTouched = false;\n      $el.removeClass('toggle-active-state');\n      var changed;\n\n      if (Utils.now() - touchStartTime < 300) {\n        if (touchesDiff * inverter < 0 && touchStartChecked) {\n          changed = true;\n        }\n\n        if (touchesDiff * inverter > 0 && !touchStartChecked) {\n          changed = true;\n        }\n\n        if (changed) {\n          toggle.checked = !touchStartChecked;\n        }\n      }\n    }\n\n    function handleInputChange() {\n      toggle.$el.trigger('toggle:change', toggle);\n      toggle.emit('local::change toggleChange', toggle);\n    }\n\n    toggle.attachEvents = function attachEvents() {\n      if (\"universal\" !== 'desktop' && Support.touch) {\n        var passive = Support.passiveListener ? {\n          passive: true\n        } : false;\n        $el.on(app.touchEvents.start, handleTouchStart, passive);\n        app.on('touchmove', handleTouchMove);\n        app.on('touchend:passive', handleTouchEnd);\n      }\n\n      toggle.$inputEl.on('change', handleInputChange);\n    };\n\n    toggle.detachEvents = function detachEvents() {\n      if (process.env.TARGET !== 'desktop' && Support.touch) {\n        var passive = Support.passiveListener ? {\n          passive: true\n        } : false;\n        $el.off(app.touchEvents.start, handleTouchStart, passive);\n        app.off('touchmove', handleTouchMove);\n        app.off('touchend:passive', handleTouchEnd);\n      }\n\n      toggle.$inputEl.off('change', handleInputChange);\n    }; // Install Modules\n\n\n    toggle.useModules(); // Init\n\n    toggle.init();\n    return _this;\n  }\n\n  _createClass(Toggle, [{\n    key: \"toggle\",\n    value: function toggle() {\n      var toggle = this;\n      toggle.checked = !toggle.checked;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var toggle = this;\n      toggle.attachEvents();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var toggle = this;\n      toggle.$el.trigger('toggle:beforedestroy', toggle);\n      toggle.emit('local::beforeDestroy toggleBeforeDestroy', toggle);\n      delete toggle.$el[0].f7Toggle;\n      toggle.detachEvents();\n      Utils.deleteProps(toggle);\n      toggle = null;\n    }\n  }]);\n\n  return Toggle;\n}(Framework7Class);\n\nexport default Toggle;","map":null,"metadata":{},"sourceType":"module"}