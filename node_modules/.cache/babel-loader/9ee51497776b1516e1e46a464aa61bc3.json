{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nexport default function (colEl, updateItems) {\n  var picker = this;\n  var app = picker.app;\n  var $colEl = $(colEl);\n  var colIndex = $colEl.index();\n  var col = picker.cols[colIndex];\n  if (col.divider) return;\n  col.$el = $colEl;\n  col.el = $colEl[0];\n  col.$itemsEl = col.$el.find('.picker-items');\n  col.items = col.$itemsEl.find('.picker-item');\n  var itemHeight;\n  var itemsHeight;\n  var minTranslate;\n  var maxTranslate;\n  var animationFrameId;\n\n  function updateDuringScroll() {\n    animationFrameId = Utils.requestAnimationFrame(function () {\n      col.updateItems(undefined, undefined, 0);\n      updateDuringScroll();\n    });\n  }\n\n  col.replaceValues = function replaceColValues(values, displayValues) {\n    col.detachEvents();\n    col.values = values;\n    col.displayValues = displayValues;\n    col.$itemsEl.html(picker.renderColumn(col, true));\n    col.items = col.$itemsEl.find('.picker-item');\n    col.calcSize();\n    col.setValue(col.values[0], 0, true);\n    col.attachEvents();\n  };\n\n  col.calcSize = function calcColSize() {\n    if (picker.params.rotateEffect) {\n      col.$el.removeClass('picker-column-absolute');\n      if (!col.width) col.$el.css({\n        width: ''\n      });\n    }\n\n    var colWidth = 0;\n    var colHeight = col.$el[0].offsetHeight;\n    itemHeight = col.items[0].offsetHeight;\n    itemsHeight = itemHeight * col.items.length;\n    minTranslate = colHeight / 2 - itemsHeight + itemHeight / 2;\n    maxTranslate = colHeight / 2 - itemHeight / 2;\n\n    if (col.width) {\n      colWidth = col.width;\n      if (parseInt(colWidth, 10) === colWidth) colWidth += 'px';\n      col.$el.css({\n        width: colWidth\n      });\n    }\n\n    if (picker.params.rotateEffect) {\n      if (!col.width) {\n        col.items.each(function (index, itemEl) {\n          var item = $(itemEl).children('span');\n          colWidth = Math.max(colWidth, item[0].offsetWidth);\n        });\n        col.$el.css({\n          width: \"\".concat(colWidth + 2, \"px\")\n        });\n      }\n\n      col.$el.addClass('picker-column-absolute');\n    }\n  };\n\n  col.setValue = function setColValue(newValue) {\n    var transition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var valueCallbacks = arguments.length > 2 ? arguments[2] : undefined;\n    var newActiveIndex = col.$itemsEl.find(\".picker-item[data-picker-value=\\\"\".concat(newValue, \"\\\"]\")).index();\n\n    if (typeof newActiveIndex === 'undefined' || newActiveIndex === -1) {\n      return;\n    }\n\n    var newTranslate = -newActiveIndex * itemHeight + maxTranslate; // Update wrapper\n\n    col.$itemsEl.transition(transition);\n    col.$itemsEl.transform(\"translate3d(0,\".concat(newTranslate, \"px,0)\")); // Watch items\n\n    if (picker.params.updateValuesOnMomentum && col.activeIndex && col.activeIndex !== newActiveIndex) {\n      Utils.cancelAnimationFrame(animationFrameId);\n      col.$itemsEl.transitionEnd(function () {\n        Utils.cancelAnimationFrame(animationFrameId);\n      });\n      updateDuringScroll();\n    } // Update items\n\n\n    col.updateItems(newActiveIndex, newTranslate, transition, valueCallbacks);\n  };\n\n  col.updateItems = function updateColItems(activeIndex, translate, transition, valueCallbacks) {\n    if (typeof translate === 'undefined') {\n      // eslint-disable-next-line\n      translate = Utils.getTranslate(col.$itemsEl[0], 'y');\n    } // eslint-disable-next-line\n\n\n    if (typeof activeIndex === 'undefined') activeIndex = -Math.round((translate - maxTranslate) / itemHeight); // eslint-disable-next-line\n\n    if (activeIndex < 0) activeIndex = 0; // eslint-disable-next-line\n\n    if (activeIndex >= col.items.length) activeIndex = col.items.length - 1;\n    var previousActiveIndex = col.activeIndex;\n    col.activeIndex = activeIndex;\n    col.$itemsEl.find('.picker-item-selected').removeClass('picker-item-selected');\n    col.items.transition(transition);\n    var selectedItem = col.items.eq(activeIndex).addClass('picker-item-selected').transform(''); // Set 3D rotate effect\n\n    if (picker.params.rotateEffect) {\n      col.items.each(function (index, itemEl) {\n        var $itemEl = $(itemEl);\n        var itemOffsetTop = $itemEl.index() * itemHeight;\n        var translateOffset = maxTranslate - translate;\n        var itemOffset = itemOffsetTop - translateOffset;\n        var percentage = itemOffset / itemHeight;\n        var itemsFit = Math.ceil(col.height / itemHeight / 2) + 1;\n        var angle = -18 * percentage;\n        if (angle > 180) angle = 180;\n        if (angle < -180) angle = -180;\n\n        if (Math.abs(percentage) > itemsFit) {\n          $itemEl.addClass('picker-item-far');\n        } else {\n          $itemEl.removeClass('picker-item-far');\n        }\n\n        $itemEl.transform(\"translate3d(0, \".concat(-translate + maxTranslate, \"px, \").concat(picker.needsOriginFix ? -110 : 0, \"px) rotateX(\").concat(angle, \"deg)\"));\n      });\n    }\n\n    if (valueCallbacks || typeof valueCallbacks === 'undefined') {\n      // Update values\n      col.value = selectedItem.attr('data-picker-value');\n      col.displayValue = col.displayValues ? col.displayValues[activeIndex] : col.value; // On change callback\n\n      if (previousActiveIndex !== activeIndex) {\n        if (col.onChange) {\n          col.onChange(picker, col.value, col.displayValue);\n        }\n\n        picker.updateValue();\n      }\n    }\n  };\n\n  var allowItemClick = true;\n  var isTouched;\n  var isMoved;\n  var touchStartY;\n  var touchCurrentY;\n  var touchStartTime;\n  var touchEndTime;\n  var startTranslate;\n  var returnTo;\n  var currentTranslate;\n  var prevTranslate;\n  var velocityTranslate;\n\n  function handleTouchStart(e) {\n    if (isMoved || isTouched) return;\n    e.preventDefault();\n    isTouched = true;\n    touchStartY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    touchCurrentY = touchStartY;\n    touchStartTime = new Date().getTime();\n    allowItemClick = true;\n    startTranslate = Utils.getTranslate(col.$itemsEl[0], 'y');\n    currentTranslate = startTranslate;\n  }\n\n  function handleTouchMove(e) {\n    if (!isTouched) return;\n    e.preventDefault();\n    allowItemClick = false;\n    touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n    if (!isMoved) {\n      // First move\n      Utils.cancelAnimationFrame(animationFrameId);\n      isMoved = true;\n      startTranslate = Utils.getTranslate(col.$itemsEl[0], 'y');\n      currentTranslate = startTranslate;\n      col.$itemsEl.transition(0);\n    }\n\n    var diff = touchCurrentY - touchStartY;\n    currentTranslate = startTranslate + diff;\n    returnTo = undefined; // Normalize translate\n\n    if (currentTranslate < minTranslate) {\n      currentTranslate = minTranslate - Math.pow(minTranslate - currentTranslate, 0.8);\n      returnTo = 'min';\n    }\n\n    if (currentTranslate > maxTranslate) {\n      currentTranslate = maxTranslate + Math.pow(currentTranslate - maxTranslate, 0.8);\n      returnTo = 'max';\n    } // Transform wrapper\n\n\n    col.$itemsEl.transform(\"translate3d(0,\".concat(currentTranslate, \"px,0)\")); // Update items\n\n    col.updateItems(undefined, currentTranslate, 0, picker.params.updateValuesOnTouchmove); // Calc velocity\n\n    velocityTranslate = currentTranslate - prevTranslate || currentTranslate;\n    prevTranslate = currentTranslate;\n  }\n\n  function handleTouchEnd() {\n    if (!isTouched || !isMoved) {\n      isTouched = false;\n      isMoved = false;\n      return;\n    }\n\n    isTouched = false;\n    isMoved = false;\n    col.$itemsEl.transition('');\n\n    if (returnTo) {\n      if (returnTo === 'min') {\n        col.$itemsEl.transform(\"translate3d(0,\".concat(minTranslate, \"px,0)\"));\n      } else col.$itemsEl.transform(\"translate3d(0,\".concat(maxTranslate, \"px,0)\"));\n    }\n\n    touchEndTime = new Date().getTime();\n    var newTranslate;\n\n    if (touchEndTime - touchStartTime > 300) {\n      newTranslate = currentTranslate;\n    } else {\n      newTranslate = currentTranslate + velocityTranslate * picker.params.momentumRatio;\n    }\n\n    newTranslate = Math.max(Math.min(newTranslate, maxTranslate), minTranslate); // Active Index\n\n    var activeIndex = -Math.floor((newTranslate - maxTranslate) / itemHeight); // Normalize translate\n\n    if (!picker.params.freeMode) newTranslate = -activeIndex * itemHeight + maxTranslate; // Transform wrapper\n\n    col.$itemsEl.transform(\"translate3d(0,\".concat(parseInt(newTranslate, 10), \"px,0)\")); // Update items\n\n    col.updateItems(activeIndex, newTranslate, '', true); // Watch items\n\n    if (picker.params.updateValuesOnMomentum) {\n      updateDuringScroll();\n      col.$itemsEl.transitionEnd(function () {\n        Utils.cancelAnimationFrame(animationFrameId);\n      });\n    } // Allow click\n\n\n    setTimeout(function () {\n      allowItemClick = true;\n    }, 100);\n  }\n\n  function handleClick() {\n    if (!allowItemClick) return;\n    Utils.cancelAnimationFrame(animationFrameId);\n    var value = $(this).attr('data-picker-value');\n    col.setValue(value);\n  }\n\n  var activeListener = app.support.passiveListener ? {\n    passive: false,\n    capture: false\n  } : false;\n\n  col.attachEvents = function attachColEvents() {\n    col.$el.on(app.touchEvents.start, handleTouchStart, activeListener);\n    app.on('touchmove:active', handleTouchMove);\n    app.on('touchend:passive', handleTouchEnd);\n    col.items.on('click', handleClick);\n  };\n\n  col.detachEvents = function detachColEvents() {\n    col.$el.off(app.touchEvents.start, handleTouchStart, activeListener);\n    app.off('touchmove:active', handleTouchMove);\n    app.off('touchend:passive', handleTouchEnd);\n    col.items.off('click', handleClick);\n  };\n\n  col.init = function initCol() {\n    col.calcSize();\n    col.$itemsEl.transform(\"translate3d(0,\".concat(maxTranslate, \"px,0)\")).transition(0);\n    if (colIndex === 0) col.$el.addClass('picker-column-first');\n    if (colIndex === picker.cols.length - 1) col.$el.addClass('picker-column-last'); // Update items on init\n\n    if (updateItems) col.updateItems(0, maxTranslate, 0);\n    col.attachEvents();\n  };\n\n  col.destroy = function destroyCol() {\n    col.detachEvents();\n  };\n\n  col.init();\n}","map":null,"metadata":{},"sourceType":"module"}