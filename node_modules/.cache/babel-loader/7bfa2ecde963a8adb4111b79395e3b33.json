{"ast":null,"code":"import _defineProperty from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport IDate from './idate/index';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Calendar, _Framework7Class);\n\n  function Calendar(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Calendar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this, params, [app]));\n\n    var calendar = _assertThisInitialized(_assertThisInitialized(_this));\n\n    calendar.params = Utils.extend({}, app.params.calendar, params);\n\n    if (calendar.params.calendarType === 'jalali') {\n      Object.keys(calendar.params.jalali).forEach(function (param) {\n        if (!params[param]) {\n          calendar.params[param] = calendar.params.jalali[param];\n        }\n      });\n    }\n\n    if (calendar.params.calendarType === 'jalali') {\n      calendar.DateHandleClass = IDate;\n    } else {\n      calendar.DateHandleClass = Date;\n    }\n\n    var $containerEl;\n\n    if (calendar.params.containerEl) {\n      $containerEl = $(calendar.params.containerEl);\n      if ($containerEl.length === 0) return _possibleConstructorReturn(_this, calendar);\n    }\n\n    var $inputEl;\n\n    if (calendar.params.inputEl) {\n      $inputEl = $(calendar.params.inputEl);\n    }\n\n    var view;\n\n    if ($inputEl) {\n      view = $inputEl.parents('.view').length && $inputEl.parents('.view')[0].f7View;\n    }\n\n    if (!view) view = app.views.main;\n    var isHorizontal = calendar.params.direction === 'horizontal';\n    var inverter = 1;\n\n    if (isHorizontal) {\n      inverter = app.rtl ? -1 : 1;\n    }\n\n    Utils.extend(calendar, {\n      app: app,\n      $containerEl: $containerEl,\n      containerEl: $containerEl && $containerEl[0],\n      inline: $containerEl && $containerEl.length > 0,\n      $inputEl: $inputEl,\n      inputEl: $inputEl && $inputEl[0],\n      initialized: false,\n      opened: false,\n      url: calendar.params.url,\n      isHorizontal: isHorizontal,\n      inverter: inverter,\n      view: view,\n      animating: false\n    });\n\n    function onInputClick() {\n      calendar.open();\n    }\n\n    function onInputFocus(e) {\n      e.preventDefault();\n    }\n\n    function onHtmlClick(e) {\n      var $targetEl = $(e.target);\n      if (calendar.isPopover()) return;\n      if (!calendar.opened || calendar.closing) return;\n      if ($targetEl.closest('[class*=\"backdrop\"]').length) return;\n\n      if ($inputEl && $inputEl.length > 0) {\n        if ($targetEl[0] !== $inputEl[0] && $targetEl.closest('.sheet-modal, .calendar-modal').length === 0) {\n          calendar.close();\n        }\n      } else if ($(e.target).closest('.sheet-modal, .calendar-modal').length === 0) {\n        calendar.close();\n      }\n    } // Events\n\n\n    Utils.extend(calendar, {\n      attachInputEvents: function attachInputEvents() {\n        calendar.$inputEl.on('click', onInputClick);\n\n        if (calendar.params.inputReadOnly) {\n          calendar.$inputEl.on('focus mousedown', onInputFocus);\n        }\n      },\n      detachInputEvents: function detachInputEvents() {\n        calendar.$inputEl.off('click', onInputClick);\n\n        if (calendar.params.inputReadOnly) {\n          calendar.$inputEl.off('focus mousedown', onInputFocus);\n        }\n      },\n      attachHtmlEvents: function attachHtmlEvents() {\n        app.on('click', onHtmlClick);\n      },\n      detachHtmlEvents: function detachHtmlEvents() {\n        app.off('click', onHtmlClick);\n      }\n    });\n\n    calendar.attachCalendarEvents = function attachCalendarEvents() {\n      var allowItemClick = true;\n      var isTouched;\n      var isMoved;\n      var touchStartX;\n      var touchStartY;\n      var touchCurrentX;\n      var touchCurrentY;\n      var touchStartTime;\n      var touchEndTime;\n      var currentTranslate;\n      var wrapperWidth;\n      var wrapperHeight;\n      var percentage;\n      var touchesDiff;\n      var isScrolling;\n      var $el = calendar.$el,\n          $wrapperEl = calendar.$wrapperEl;\n\n      function handleTouchStart(e) {\n        if (isMoved || isTouched) return;\n        isTouched = true;\n        touchStartX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n        touchCurrentX = touchStartX;\n        touchStartY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n        touchCurrentY = touchStartY;\n        touchStartTime = new calendar.DateHandleClass().getTime();\n        percentage = 0;\n        allowItemClick = true;\n        isScrolling = undefined;\n        currentTranslate = calendar.monthsTranslate;\n      }\n\n      function handleTouchMove(e) {\n        if (!isTouched) return;\n        var isH = calendar.isHorizontal;\n        touchCurrentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n        touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n        if (typeof isScrolling === 'undefined') {\n          isScrolling = !!(isScrolling || Math.abs(touchCurrentY - touchStartY) > Math.abs(touchCurrentX - touchStartX));\n        }\n\n        if (isH && isScrolling) {\n          isTouched = false;\n          return;\n        }\n\n        e.preventDefault();\n\n        if (calendar.animating) {\n          isTouched = false;\n          return;\n        }\n\n        allowItemClick = false;\n\n        if (!isMoved) {\n          // First move\n          isMoved = true;\n          wrapperWidth = $wrapperEl[0].offsetWidth;\n          wrapperHeight = $wrapperEl[0].offsetHeight;\n          $wrapperEl.transition(0);\n        }\n\n        touchesDiff = isH ? touchCurrentX - touchStartX : touchCurrentY - touchStartY;\n        percentage = touchesDiff / (isH ? wrapperWidth : wrapperHeight);\n        currentTranslate = (calendar.monthsTranslate * calendar.inverter + percentage) * 100; // Transform wrapper\n\n        $wrapperEl.transform(\"translate3d(\".concat(isH ? currentTranslate : 0, \"%, \").concat(isH ? 0 : currentTranslate, \"%, 0)\"));\n      }\n\n      function handleTouchEnd() {\n        if (!isTouched || !isMoved) {\n          isTouched = false;\n          isMoved = false;\n          return;\n        }\n\n        isTouched = false;\n        isMoved = false;\n        touchEndTime = new calendar.DateHandleClass().getTime();\n\n        if (touchEndTime - touchStartTime < 300) {\n          if (Math.abs(touchesDiff) < 10) {\n            calendar.resetMonth();\n          } else if (touchesDiff >= 10) {\n            if (app.rtl) calendar.nextMonth();else calendar.prevMonth();\n          } else if (app.rtl) calendar.prevMonth();else calendar.nextMonth();\n        } else if (percentage <= -0.5) {\n          if (app.rtl) calendar.prevMonth();else calendar.nextMonth();\n        } else if (percentage >= 0.5) {\n          if (app.rtl) calendar.nextMonth();else calendar.prevMonth();\n        } else {\n          calendar.resetMonth();\n        } // Allow click\n\n\n        setTimeout(function () {\n          allowItemClick = true;\n        }, 100);\n      }\n\n      function handleDayClick(e) {\n        if (!allowItemClick) return;\n        var $dayEl = $(e.target).parents('.calendar-day');\n\n        if ($dayEl.length === 0 && $(e.target).hasClass('calendar-day')) {\n          $dayEl = $(e.target);\n        }\n\n        if ($dayEl.length === 0) return;\n        if ($dayEl.hasClass('calendar-day-disabled')) return;\n\n        if (!calendar.params.rangePicker) {\n          if ($dayEl.hasClass('calendar-day-next')) calendar.nextMonth();\n          if ($dayEl.hasClass('calendar-day-prev')) calendar.prevMonth();\n        }\n\n        var dateYear = parseInt($dayEl.attr('data-year'), 10);\n        var dateMonth = parseInt($dayEl.attr('data-month'), 10);\n        var dateDay = parseInt($dayEl.attr('data-day'), 10);\n        calendar.emit('local::dayClick calendarDayClick', calendar, $dayEl[0], dateYear, dateMonth, dateDay);\n\n        if (!$dayEl.hasClass('calendar-day-selected') || calendar.params.multiple || calendar.params.rangePicker) {\n          calendar.addValue(new calendar.DateHandleClass(dateYear, dateMonth, dateDay, 0, 0, 0));\n        }\n\n        if (calendar.params.closeOnSelect) {\n          if (calendar.params.rangePicker && calendar.value.length === 2 || !calendar.params.rangePicker) {\n            calendar.close();\n          }\n        }\n      }\n\n      function onNextMonthClick() {\n        calendar.nextMonth();\n      }\n\n      function onPrevMonthClick() {\n        calendar.prevMonth();\n      }\n\n      function onNextYearClick() {\n        calendar.nextYear();\n      }\n\n      function onPrevYearClick() {\n        calendar.prevYear();\n      }\n\n      var passiveListener = app.touchEvents.start === 'touchstart' && app.support.passiveListener ? {\n        passive: true,\n        capture: false\n      } : false; // Selectors clicks\n\n      $el.find('.calendar-prev-month-button').on('click', onPrevMonthClick);\n      $el.find('.calendar-next-month-button').on('click', onNextMonthClick);\n      $el.find('.calendar-prev-year-button').on('click', onPrevYearClick);\n      $el.find('.calendar-next-year-button').on('click', onNextYearClick); // Day clicks\n\n      $wrapperEl.on('click', handleDayClick); // Touch events\n\n      if (\"universal\" !== 'desktop') {\n        if (calendar.params.touchMove) {\n          $wrapperEl.on(app.touchEvents.start, handleTouchStart, passiveListener);\n          app.on('touchmove:active', handleTouchMove);\n          app.on('touchend:passive', handleTouchEnd);\n        }\n      }\n\n      calendar.detachCalendarEvents = function detachCalendarEvents() {\n        $el.find('.calendar-prev-month-button').off('click', onPrevMonthClick);\n        $el.find('.calendar-next-month-button').off('click', onNextMonthClick);\n        $el.find('.calendar-prev-year-button').off('click', onPrevYearClick);\n        $el.find('.calendar-next-year-button').off('click', onNextYearClick);\n        $wrapperEl.off('click', handleDayClick);\n\n        if (process.env.TARGET !== 'desktop') {\n          if (calendar.params.touchMove) {\n            $wrapperEl.off(app.touchEvents.start, handleTouchStart, passiveListener);\n            app.off('touchmove:active', handleTouchMove);\n            app.off('touchend:passive', handleTouchEnd);\n          }\n        }\n      };\n    };\n\n    calendar.init();\n    return _possibleConstructorReturn(_this, calendar);\n  } // eslint-disable-next-line\n\n\n  _createClass(Calendar, [{\n    key: \"normalizeDate\",\n    value: function normalizeDate(date) {\n      var calendar = this;\n      var d = new calendar.DateHandleClass(date);\n      return new calendar.DateHandleClass(d.getFullYear(), d.getMonth(), d.getDate());\n    }\n  }, {\n    key: \"normalizeValues\",\n    value: function normalizeValues(values) {\n      var calendar = this;\n      var newValues = [];\n\n      if (values && Array.isArray(values)) {\n        newValues = values.map(function (val) {\n          return calendar.normalizeDate(val);\n        });\n      }\n\n      return newValues;\n    }\n  }, {\n    key: \"initInput\",\n    value: function initInput() {\n      var calendar = this;\n      if (!calendar.$inputEl) return;\n      if (calendar.params.inputReadOnly) calendar.$inputEl.prop('readOnly', true);\n    }\n  }, {\n    key: \"isPopover\",\n    value: function isPopover() {\n      var calendar = this;\n      var app = calendar.app,\n          modal = calendar.modal,\n          params = calendar.params;\n      if (params.openIn === 'sheet') return false;\n      if (modal && modal.type !== 'popover') return false;\n\n      if (!calendar.inline && calendar.inputEl) {\n        if (params.openIn === 'popover') return true;\n\n        if (app.device.ios) {\n          return !!app.device.ipad;\n        }\n\n        if (app.width >= 768) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(d) {\n      var calendar = this;\n      var date = new calendar.DateHandleClass(d);\n      var year = date.getFullYear();\n      var month = date.getMonth();\n      var month1 = month + 1;\n      var day = date.getDate();\n      var weekDay = date.getDay();\n      var _calendar$params = calendar.params,\n          dateFormat = _calendar$params.dateFormat,\n          monthNames = _calendar$params.monthNames,\n          monthNamesShort = _calendar$params.monthNamesShort,\n          dayNames = _calendar$params.dayNames,\n          dayNamesShort = _calendar$params.dayNamesShort;\n      return dateFormat.replace(/yyyy/g, year).replace(/yy/g, String(year).substring(2)).replace(/mm/g, month1 < 10 ? \"0\".concat(month1) : month1).replace(/m(\\W+)/g, \"\".concat(month1, \"$1\")).replace(/MM/g, monthNames[month]).replace(/M(\\W+)/g, \"\".concat(monthNamesShort[month], \"$1\")).replace(/dd/g, day < 10 ? \"0\".concat(day) : day).replace(/d(\\W+)/g, \"\".concat(day, \"$1\")).replace(/DD/g, dayNames[weekDay]).replace(/D(\\W+)/g, \"\".concat(dayNamesShort[weekDay], \"$1\"));\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue() {\n      var calendar = this;\n      var value = calendar.value;\n\n      if (calendar.params.formatValue) {\n        return calendar.params.formatValue.call(calendar, value);\n      }\n\n      return value.map(function (v) {\n        return calendar.formatDate(v);\n      }).join(calendar.params.rangePicker ? ' - ' : ', ');\n    }\n  }, {\n    key: \"addValue\",\n    value: function addValue(newValue) {\n      var calendar = this;\n      var _calendar$params2 = calendar.params,\n          multiple = _calendar$params2.multiple,\n          rangePicker = _calendar$params2.rangePicker,\n          rangePickerMinDays = _calendar$params2.rangePickerMinDays,\n          rangePickerMaxDays = _calendar$params2.rangePickerMaxDays;\n\n      if (multiple) {\n        if (!calendar.value) calendar.value = [];\n        var inValuesIndex;\n\n        for (var i = 0; i < calendar.value.length; i += 1) {\n          if (new calendar.DateHandleClass(newValue).getTime() === new calendar.DateHandleClass(calendar.value[i]).getTime()) {\n            inValuesIndex = i;\n          }\n        }\n\n        if (typeof inValuesIndex === 'undefined') {\n          calendar.value.push(newValue);\n        } else {\n          calendar.value.splice(inValuesIndex, 1);\n        }\n\n        calendar.updateValue();\n      } else if (rangePicker) {\n        if (!calendar.value) calendar.value = [];\n\n        if (calendar.value.length === 2 || calendar.value.length === 0) {\n          calendar.value = [];\n        }\n\n        if (calendar.value.length === 0 || Math.abs(calendar.value[0].getTime() - newValue.getTime()) >= (rangePickerMinDays - 1) * 60 * 60 * 24 * 1000 && (rangePickerMaxDays === 0 || Math.abs(calendar.value[0].getTime() - newValue.getTime()) <= (rangePickerMaxDays - 1) * 60 * 60 * 24 * 1000)) calendar.value.push(newValue);else calendar.value = [];\n        calendar.value.sort(function (a, b) {\n          return a - b;\n        });\n        calendar.updateValue();\n      } else {\n        calendar.value = [newValue];\n        calendar.updateValue();\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(values) {\n      var calendar = this;\n      calendar.value = values;\n      calendar.updateValue();\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var calendar = this;\n      return calendar.value;\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(onlyHeader) {\n      var calendar = this;\n      var $el = calendar.$el,\n          $wrapperEl = calendar.$wrapperEl,\n          $inputEl = calendar.$inputEl,\n          value = calendar.value,\n          params = calendar.params;\n      var i;\n\n      if ($el && $el.length > 0) {\n        $wrapperEl.find('.calendar-day-selected').removeClass('calendar-day-selected');\n        var valueDate;\n\n        if (params.rangePicker && value.length === 2) {\n          for (i = new calendar.DateHandleClass(value[0]).getTime(); i <= new calendar.DateHandleClass(value[1]).getTime(); i += 24 * 60 * 60 * 1000) {\n            valueDate = new calendar.DateHandleClass(i);\n            $wrapperEl.find(\".calendar-day[data-date=\\\"\".concat(valueDate.getFullYear(), \"-\").concat(valueDate.getMonth(), \"-\").concat(valueDate.getDate(), \"\\\"]\")).addClass('calendar-day-selected');\n          }\n        } else {\n          for (i = 0; i < calendar.value.length; i += 1) {\n            valueDate = new calendar.DateHandleClass(value[i]);\n            $wrapperEl.find(\".calendar-day[data-date=\\\"\".concat(valueDate.getFullYear(), \"-\").concat(valueDate.getMonth(), \"-\").concat(valueDate.getDate(), \"\\\"]\")).addClass('calendar-day-selected');\n          }\n        }\n      }\n\n      if (!onlyHeader) {\n        calendar.emit('local::change calendarChange', calendar, value);\n      }\n\n      if ($inputEl && $inputEl.length || params.header) {\n        var inputValue = calendar.formatValue(value);\n\n        if (params.header && $el && $el.length) {\n          $el.find('.calendar-selected-date').text(inputValue);\n        }\n\n        if ($inputEl && $inputEl.length && !onlyHeader) {\n          $inputEl.val(inputValue);\n          $inputEl.trigger('change');\n        }\n      }\n    }\n  }, {\n    key: \"updateCurrentMonthYear\",\n    value: function updateCurrentMonthYear(dir) {\n      var calendar = this;\n      var $months = calendar.$months,\n          $el = calendar.$el,\n          params = calendar.params;\n\n      if (typeof dir === 'undefined') {\n        calendar.currentMonth = parseInt($months.eq(1).attr('data-month'), 10);\n        calendar.currentYear = parseInt($months.eq(1).attr('data-year'), 10);\n      } else {\n        calendar.currentMonth = parseInt($months.eq(dir === 'next' ? $months.length - 1 : 0).attr('data-month'), 10);\n        calendar.currentYear = parseInt($months.eq(dir === 'next' ? $months.length - 1 : 0).attr('data-year'), 10);\n      }\n\n      $el.find('.current-month-value').text(params.monthNames[calendar.currentMonth]);\n      $el.find('.current-year-value').text(calendar.currentYear);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var calendar = this;\n      var currentYear = calendar.currentYear,\n          currentMonth = calendar.currentMonth,\n          $wrapperEl = calendar.$wrapperEl;\n      var currentDate = new calendar.DateHandleClass(currentYear, currentMonth);\n      var prevMonthHtml = calendar.renderMonth(currentDate, 'prev');\n      var currentMonthHtml = calendar.renderMonth(currentDate);\n      var nextMonthHtml = calendar.renderMonth(currentDate, 'next');\n      $wrapperEl.transition(0).html(\"\".concat(prevMonthHtml).concat(currentMonthHtml).concat(nextMonthHtml)).transform('translate3d(0,0,0)');\n      calendar.$months = $wrapperEl.find('.calendar-month');\n      calendar.monthsTranslate = 0;\n      calendar.setMonthsTranslate();\n      calendar.$months.each(function (index, monthEl) {\n        calendar.emit('local::monthAdd calendarMonthAdd', monthEl);\n      });\n    }\n  }, {\n    key: \"onMonthChangeStart\",\n    value: function onMonthChangeStart(dir) {\n      var calendar = this;\n      var $months = calendar.$months,\n          currentYear = calendar.currentYear,\n          currentMonth = calendar.currentMonth;\n      calendar.updateCurrentMonthYear(dir);\n      $months.removeClass('calendar-month-current calendar-month-prev calendar-month-next');\n      var currentIndex = dir === 'next' ? $months.length - 1 : 0;\n      $months.eq(currentIndex).addClass('calendar-month-current');\n      $months.eq(dir === 'next' ? currentIndex - 1 : currentIndex + 1).addClass(dir === 'next' ? 'calendar-month-prev' : 'calendar-month-next');\n      calendar.emit('local::monthYearChangeStart calendarMonthYearChangeStart', calendar, currentYear, currentMonth);\n    }\n  }, {\n    key: \"onMonthChangeEnd\",\n    value: function onMonthChangeEnd(dir, rebuildBoth) {\n      var calendar = this;\n      var currentYear = calendar.currentYear,\n          currentMonth = calendar.currentMonth,\n          $wrapperEl = calendar.$wrapperEl,\n          monthsTranslate = calendar.monthsTranslate;\n      calendar.animating = false;\n      var nextMonthHtml;\n      var prevMonthHtml;\n      var currentMonthHtml;\n      $wrapperEl.find('.calendar-month:not(.calendar-month-prev):not(.calendar-month-current):not(.calendar-month-next)').remove();\n\n      if (typeof dir === 'undefined') {\n        dir = 'next'; // eslint-disable-line\n\n        rebuildBoth = true; // eslint-disable-line\n      }\n\n      if (!rebuildBoth) {\n        currentMonthHtml = calendar.renderMonth(new calendar.DateHandleClass(currentYear, currentMonth), dir);\n      } else {\n        $wrapperEl.find('.calendar-month-next, .calendar-month-prev').remove();\n        prevMonthHtml = calendar.renderMonth(new calendar.DateHandleClass(currentYear, currentMonth), 'prev');\n        nextMonthHtml = calendar.renderMonth(new calendar.DateHandleClass(currentYear, currentMonth), 'next');\n      }\n\n      if (dir === 'next' || rebuildBoth) {\n        $wrapperEl.append(currentMonthHtml || nextMonthHtml);\n      }\n\n      if (dir === 'prev' || rebuildBoth) {\n        $wrapperEl.prepend(currentMonthHtml || prevMonthHtml);\n      }\n\n      var $months = $wrapperEl.find('.calendar-month');\n      calendar.$months = $months;\n      calendar.setMonthsTranslate(monthsTranslate);\n      calendar.emit('local::monthAdd calendarMonthAdd', calendar, dir === 'next' ? $months.eq($months.length - 1)[0] : $months.eq(0)[0]);\n      calendar.emit('local::monthYearChangeEnd calendarMonthYearChangeEnd', calendar, currentYear, currentMonth);\n    }\n  }, {\n    key: \"setMonthsTranslate\",\n    value: function setMonthsTranslate(translate) {\n      var calendar = this;\n      var $months = calendar.$months,\n          isH = calendar.isHorizontal,\n          inverter = calendar.inverter; // eslint-disable-next-line\n\n      translate = translate || calendar.monthsTranslate || 0;\n\n      if (typeof calendar.monthsTranslate === 'undefined') {\n        calendar.monthsTranslate = translate;\n      }\n\n      $months.removeClass('calendar-month-current calendar-month-prev calendar-month-next');\n      var prevMonthTranslate = -(translate + 1) * 100 * inverter;\n      var currentMonthTranslate = -translate * 100 * inverter;\n      var nextMonthTranslate = -(translate - 1) * 100 * inverter;\n      $months.eq(0).transform(\"translate3d(\".concat(isH ? prevMonthTranslate : 0, \"%, \").concat(isH ? 0 : prevMonthTranslate, \"%, 0)\")).addClass('calendar-month-prev');\n      $months.eq(1).transform(\"translate3d(\".concat(isH ? currentMonthTranslate : 0, \"%, \").concat(isH ? 0 : currentMonthTranslate, \"%, 0)\")).addClass('calendar-month-current');\n      $months.eq(2).transform(\"translate3d(\".concat(isH ? nextMonthTranslate : 0, \"%, \").concat(isH ? 0 : nextMonthTranslate, \"%, 0)\")).addClass('calendar-month-next');\n    }\n  }, {\n    key: \"nextMonth\",\n    value: function nextMonth(transition) {\n      var calendar = this;\n      var params = calendar.params,\n          $wrapperEl = calendar.$wrapperEl,\n          inverter = calendar.inverter,\n          isH = calendar.isHorizontal;\n\n      if (typeof transition === 'undefined' || typeof transition === 'object') {\n        transition = ''; // eslint-disable-line\n\n        if (!params.animate) transition = 0; // eslint-disable-line\n      }\n\n      var nextMonth = parseInt(calendar.$months.eq(calendar.$months.length - 1).attr('data-month'), 10);\n      var nextYear = parseInt(calendar.$months.eq(calendar.$months.length - 1).attr('data-year'), 10);\n      var nextDate = new calendar.DateHandleClass(nextYear, nextMonth);\n      var nextDateTime = nextDate.getTime();\n      var transitionEndCallback = !calendar.animating;\n\n      if (params.maxDate) {\n        if (nextDateTime > new calendar.DateHandleClass(params.maxDate).getTime()) {\n          calendar.resetMonth();\n          return;\n        }\n      }\n\n      calendar.monthsTranslate -= 1;\n\n      if (nextMonth === calendar.currentMonth) {\n        var nextMonthTranslate = -calendar.monthsTranslate * 100 * inverter;\n        var nextMonthHtml = $(calendar.renderMonth(nextDateTime, 'next')).transform(\"translate3d(\".concat(isH ? nextMonthTranslate : 0, \"%, \").concat(isH ? 0 : nextMonthTranslate, \"%, 0)\")).addClass('calendar-month-next');\n        $wrapperEl.append(nextMonthHtml[0]);\n        calendar.$months = $wrapperEl.find('.calendar-month');\n        calendar.emit('local::monthAdd calendarMonthAdd', calendar.$months.eq(calendar.$months.length - 1)[0]);\n      }\n\n      calendar.animating = true;\n      calendar.onMonthChangeStart('next');\n      var translate = calendar.monthsTranslate * 100 * inverter;\n      $wrapperEl.transition(transition).transform(\"translate3d(\".concat(isH ? translate : 0, \"%, \").concat(isH ? 0 : translate, \"%, 0)\"));\n\n      if (transitionEndCallback) {\n        $wrapperEl.transitionEnd(function () {\n          calendar.onMonthChangeEnd('next');\n        });\n      }\n\n      if (!params.animate) {\n        calendar.onMonthChangeEnd('next');\n      }\n    }\n  }, {\n    key: \"prevMonth\",\n    value: function prevMonth(transition) {\n      var calendar = this;\n      var params = calendar.params,\n          $wrapperEl = calendar.$wrapperEl,\n          inverter = calendar.inverter,\n          isH = calendar.isHorizontal;\n\n      if (typeof transition === 'undefined' || typeof transition === 'object') {\n        transition = ''; // eslint-disable-line\n\n        if (!params.animate) transition = 0; // eslint-disable-line\n      }\n\n      var prevMonth = parseInt(calendar.$months.eq(0).attr('data-month'), 10);\n      var prevYear = parseInt(calendar.$months.eq(0).attr('data-year'), 10);\n      var prevDate = new calendar.DateHandleClass(prevYear, prevMonth + 1, -1);\n      var prevDateTime = prevDate.getTime();\n      var transitionEndCallback = !calendar.animating;\n\n      if (params.minDate) {\n        var minDate = new calendar.DateHandleClass(params.minDate);\n        minDate = new calendar.DateHandleClass(minDate.getFullYear(), minDate.getMonth(), 1);\n\n        if (prevDateTime < minDate.getTime()) {\n          calendar.resetMonth();\n          return;\n        }\n      }\n\n      calendar.monthsTranslate += 1;\n\n      if (prevMonth === calendar.currentMonth) {\n        var prevMonthTranslate = -calendar.monthsTranslate * 100 * inverter;\n        var prevMonthHtml = $(calendar.renderMonth(prevDateTime, 'prev')).transform(\"translate3d(\".concat(isH ? prevMonthTranslate : 0, \"%, \").concat(isH ? 0 : prevMonthTranslate, \"%, 0)\")).addClass('calendar-month-prev');\n        $wrapperEl.prepend(prevMonthHtml[0]);\n        calendar.$months = $wrapperEl.find('.calendar-month');\n        calendar.emit('local::monthAdd calendarMonthAdd', calendar.$months.eq(0)[0]);\n      }\n\n      calendar.animating = true;\n      calendar.onMonthChangeStart('prev');\n      var translate = calendar.monthsTranslate * 100 * inverter;\n      $wrapperEl.transition(transition).transform(\"translate3d(\".concat(isH ? translate : 0, \"%, \").concat(isH ? 0 : translate, \"%, 0)\"));\n\n      if (transitionEndCallback) {\n        $wrapperEl.transitionEnd(function () {\n          calendar.onMonthChangeEnd('prev');\n        });\n      }\n\n      if (!params.animate) {\n        calendar.onMonthChangeEnd('prev');\n      }\n    }\n  }, {\n    key: \"resetMonth\",\n    value: function resetMonth() {\n      var transition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var calendar = this;\n      var $wrapperEl = calendar.$wrapperEl,\n          inverter = calendar.inverter,\n          isH = calendar.isHorizontal,\n          monthsTranslate = calendar.monthsTranslate;\n      var translate = monthsTranslate * 100 * inverter;\n      $wrapperEl.transition(transition).transform(\"translate3d(\".concat(isH ? translate : 0, \"%, \").concat(isH ? 0 : translate, \"%, 0)\"));\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"setYearMonth\",\n    value: function setYearMonth(year, month, transition) {\n      var calendar = this;\n      var params = calendar.params,\n          isH = calendar.isHorizontal,\n          $wrapperEl = calendar.$wrapperEl,\n          inverter = calendar.inverter; // eslint-disable-next-line\n\n      if (typeof year === 'undefined') year = calendar.currentYear; // eslint-disable-next-line\n\n      if (typeof month === 'undefined') month = calendar.currentMonth;\n\n      if (typeof transition === 'undefined' || typeof transition === 'object') {\n        // eslint-disable-next-line\n        transition = ''; // eslint-disable-next-line\n\n        if (!params.animate) transition = 0;\n      }\n\n      var targetDate;\n\n      if (year < calendar.currentYear) {\n        targetDate = new calendar.DateHandleClass(year, month + 1, -1).getTime();\n      } else {\n        targetDate = new calendar.DateHandleClass(year, month).getTime();\n      }\n\n      if (params.maxDate && targetDate > new calendar.DateHandleClass(params.maxDate).getTime()) {\n        return false;\n      }\n\n      if (params.minDate) {\n        var minDate = new calendar.DateHandleClass(params.minDate);\n        minDate = new calendar.DateHandleClass(minDate.getFullYear(), minDate.getMonth(), 1);\n\n        if (targetDate < minDate.getTime()) {\n          return false;\n        }\n      }\n\n      var currentDate = new calendar.DateHandleClass(calendar.currentYear, calendar.currentMonth).getTime();\n      var dir = targetDate > currentDate ? 'next' : 'prev';\n      var newMonthHTML = calendar.renderMonth(new calendar.DateHandleClass(year, month));\n      calendar.monthsTranslate = calendar.monthsTranslate || 0;\n      var prevTranslate = calendar.monthsTranslate;\n      var monthTranslate;\n      var transitionEndCallback = !calendar.animating;\n\n      if (targetDate > currentDate) {\n        // To next\n        calendar.monthsTranslate -= 1;\n        if (!calendar.animating) calendar.$months.eq(calendar.$months.length - 1).remove();\n        $wrapperEl.append(newMonthHTML);\n        calendar.$months = $wrapperEl.find('.calendar-month');\n        monthTranslate = -(prevTranslate - 1) * 100 * inverter;\n        calendar.$months.eq(calendar.$months.length - 1).transform(\"translate3d(\".concat(isH ? monthTranslate : 0, \"%, \").concat(isH ? 0 : monthTranslate, \"%, 0)\")).addClass('calendar-month-next');\n      } else {\n        // To prev\n        calendar.monthsTranslate += 1;\n        if (!calendar.animating) calendar.$months.eq(0).remove();\n        $wrapperEl.prepend(newMonthHTML);\n        calendar.$months = $wrapperEl.find('.calendar-month');\n        monthTranslate = -(prevTranslate + 1) * 100 * inverter;\n        calendar.$months.eq(0).transform(\"translate3d(\".concat(isH ? monthTranslate : 0, \"%, \").concat(isH ? 0 : monthTranslate, \"%, 0)\")).addClass('calendar-month-prev');\n      }\n\n      calendar.emit('local::monthAdd calendarMonthAdd', dir === 'next' ? calendar.$months.eq(calendar.$months.length - 1)[0] : calendar.$months.eq(0)[0]);\n      calendar.animating = true;\n      calendar.onMonthChangeStart(dir);\n      var wrapperTranslate = calendar.monthsTranslate * 100 * inverter;\n      $wrapperEl.transition(transition).transform(\"translate3d(\".concat(isH ? wrapperTranslate : 0, \"%, \").concat(isH ? 0 : wrapperTranslate, \"%, 0)\"));\n\n      if (transitionEndCallback) {\n        $wrapperEl.transitionEnd(function () {\n          calendar.onMonthChangeEnd(dir, true);\n        });\n      }\n\n      if (!params.animate) {\n        calendar.onMonthChangeEnd(dir);\n      }\n    }\n  }, {\n    key: \"nextYear\",\n    value: function nextYear() {\n      var calendar = this;\n      calendar.setYearMonth(calendar.currentYear + 1);\n    }\n  }, {\n    key: \"prevYear\",\n    value: function prevYear() {\n      var calendar = this;\n      calendar.setYearMonth(calendar.currentYear - 1);\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"dateInRange\",\n    value: function dateInRange(dayDate, range) {\n      var calendar = this;\n      var match = false;\n      var i;\n      if (!range) return false;\n\n      if (Array.isArray(range)) {\n        for (i = 0; i < range.length; i += 1) {\n          if (range[i].from || range[i].to) {\n            if (range[i].from && range[i].to) {\n              if (dayDate <= new calendar.DateHandleClass(range[i].to).getTime() && dayDate >= new calendar.DateHandleClass(range[i].from).getTime()) {\n                match = true;\n              }\n            } else if (range[i].from) {\n              if (dayDate >= new calendar.DateHandleClass(range[i].from).getTime()) {\n                match = true;\n              }\n            } else if (range[i].to) {\n              if (dayDate <= new calendar.DateHandleClass(range[i].to).getTime()) {\n                match = true;\n              }\n            }\n          } else if (range[i].date) {\n            if (dayDate === new calendar.DateHandleClass(range[i].date).getTime()) {\n              match = true;\n            }\n          } else if (dayDate === new calendar.DateHandleClass(range[i]).getTime()) {\n            match = true;\n          }\n        }\n      } else if (range.from || range.to) {\n        if (range.from && range.to) {\n          if (dayDate <= new calendar.DateHandleClass(range.to).getTime() && dayDate >= new calendar.DateHandleClass(range.from).getTime()) {\n            match = true;\n          }\n        } else if (range.from) {\n          if (dayDate >= new calendar.DateHandleClass(range.from).getTime()) {\n            match = true;\n          }\n        } else if (range.to) {\n          if (dayDate <= new calendar.DateHandleClass(range.to).getTime()) {\n            match = true;\n          }\n        }\n      } else if (range.date) {\n        match = dayDate === new calendar.DateHandleClass(range.date).getTime();\n      } else if (typeof range === 'function') {\n        match = range(new calendar.DateHandleClass(dayDate));\n      }\n\n      return match;\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"daysInMonth\",\n    value: function daysInMonth(date) {\n      var calendar = this;\n      var d = new calendar.DateHandleClass(date);\n      return new calendar.DateHandleClass(d.getFullYear(), d.getMonth() + 1, 0).getDate();\n    }\n  }, {\n    key: \"renderMonths\",\n    value: function renderMonths(date) {\n      var calendar = this;\n\n      if (calendar.params.renderMonths) {\n        return calendar.params.renderMonths.call(calendar, date);\n      }\n\n      return \"\\n    <div class=\\\"calendar-months-wrapper\\\">\\n    \".concat(calendar.renderMonth(date, 'prev'), \"\\n    \").concat(calendar.renderMonth(date), \"\\n    \").concat(calendar.renderMonth(date, 'next'), \"\\n    </div>\\n  \").trim();\n    }\n  }, {\n    key: \"renderMonth\",\n    value: function renderMonth(d, offset) {\n      var calendar = this;\n      var params = calendar.params,\n          value = calendar.value;\n\n      if (params.renderMonth) {\n        return params.renderMonth.call(calendar, d, offset);\n      }\n\n      var date = new calendar.DateHandleClass(d);\n      var year = date.getFullYear();\n      var month = date.getMonth();\n\n      if (offset === 'next') {\n        if (month === 11) date = new calendar.DateHandleClass(year + 1, 0);else date = new calendar.DateHandleClass(year, month + 1, 1);\n      }\n\n      if (offset === 'prev') {\n        if (month === 0) date = new calendar.DateHandleClass(year - 1, 11);else date = new calendar.DateHandleClass(year, month - 1, 1);\n      }\n\n      if (offset === 'next' || offset === 'prev') {\n        month = date.getMonth();\n        year = date.getFullYear();\n      }\n\n      var currentValues = [];\n      var today = new calendar.DateHandleClass().setHours(0, 0, 0, 0);\n      var minDate = params.minDate ? new calendar.DateHandleClass(params.minDate).getTime() : null;\n      var maxDate = params.maxDate ? new calendar.DateHandleClass(params.maxDate).getTime() : null;\n      var rows = 6;\n      var cols = 7;\n      var daysInPrevMonth = calendar.daysInMonth(new calendar.DateHandleClass(date.getFullYear(), date.getMonth()).getTime() - 10 * 24 * 60 * 60 * 1000);\n      var daysInMonth = calendar.daysInMonth(date);\n      var minDayNumber = params.firstDay === 6 ? 0 : 1;\n      var monthHtml = '';\n      var dayIndex = 0 + (params.firstDay - 1);\n      var disabled;\n      var hasEvents;\n      var firstDayOfMonthIndex = new calendar.DateHandleClass(date.getFullYear(), date.getMonth()).getDay();\n      if (firstDayOfMonthIndex === 0) firstDayOfMonthIndex = 7;\n\n      if (value && value.length) {\n        for (var i = 0; i < value.length; i += 1) {\n          currentValues.push(new calendar.DateHandleClass(value[i]).setHours(0, 0, 0, 0));\n        }\n      }\n\n      for (var row = 1; row <= rows; row += 1) {\n        var rowHtml = '';\n\n        var _loop = function _loop(col) {\n          dayIndex += 1;\n          var dayDate = void 0;\n          var dayNumber = dayIndex - firstDayOfMonthIndex;\n          var addClass = '';\n\n          if (row === 1 && col === 1 && dayNumber > minDayNumber && params.firstDay !== 1) {\n            dayIndex -= 7;\n            dayNumber = dayIndex - firstDayOfMonthIndex;\n          }\n\n          var weekDayIndex = col - 1 + params.firstDay > 6 ? col - 1 - 7 + params.firstDay : col - 1 + params.firstDay;\n\n          if (dayNumber < 0) {\n            dayNumber = daysInPrevMonth + dayNumber + 1;\n            addClass += ' calendar-day-prev';\n            dayDate = new calendar.DateHandleClass(month - 1 < 0 ? year - 1 : year, month - 1 < 0 ? 11 : month - 1, dayNumber).getTime();\n          } else {\n            dayNumber += 1;\n\n            if (dayNumber > daysInMonth) {\n              dayNumber -= daysInMonth;\n              addClass += ' calendar-day-next';\n              dayDate = new calendar.DateHandleClass(month + 1 > 11 ? year + 1 : year, month + 1 > 11 ? 0 : month + 1, dayNumber).getTime();\n            } else {\n              dayDate = new calendar.DateHandleClass(year, month, dayNumber).getTime();\n            }\n          } // Today\n\n\n          if (dayDate === today) addClass += ' calendar-day-today'; // Selected\n\n          if (params.rangePicker && currentValues.length === 2) {\n            if (dayDate >= currentValues[0] && dayDate <= currentValues[1]) addClass += ' calendar-day-selected';\n          } else if (currentValues.indexOf(dayDate) >= 0) addClass += ' calendar-day-selected'; // Weekend\n\n\n          if (params.weekendDays.indexOf(weekDayIndex) >= 0) {\n            addClass += ' calendar-day-weekend';\n          } // Events\n\n\n          var eventsHtml = '';\n          hasEvents = false;\n\n          if (params.events) {\n            if (calendar.dateInRange(dayDate, params.events)) {\n              hasEvents = true;\n            }\n          }\n\n          if (hasEvents) {\n            addClass += ' calendar-day-has-events';\n            eventsHtml = \"\\n            <span class=\\\"calendar-day-events\\\">\\n              <span class=\\\"calendar-day-event\\\"></span>\\n            </span>\\n          \";\n\n            if (Array.isArray(params.events)) {\n              var eventDots = [];\n              params.events.forEach(function (ev) {\n                var color = ev.color || '';\n\n                if (eventDots.indexOf(color) < 0 && calendar.dateInRange(dayDate, ev)) {\n                  eventDots.push(color);\n                }\n              });\n              eventsHtml = \"\\n              <span class=\\\"calendar-day-events\\\">\\n                \".concat(eventDots.map(function (color) {\n                return \"\\n                  <span class=\\\"calendar-day-event\\\" style=\\\"\".concat(color ? \"background-color: \".concat(color) : '', \"\\\"></span>\\n                \").trim();\n              }).join(''), \"\\n              </span>\\n            \");\n            }\n          } // Custom Ranges\n\n\n          if (params.rangesClasses) {\n            for (var k = 0; k < params.rangesClasses.length; k += 1) {\n              if (calendar.dateInRange(dayDate, params.rangesClasses[k].range)) {\n                addClass += \" \".concat(params.rangesClasses[k].cssClass);\n              }\n            }\n          } // Disabled\n\n\n          disabled = false;\n\n          if (minDate && dayDate < minDate || maxDate && dayDate > maxDate) {\n            disabled = true;\n          }\n\n          if (params.disabled) {\n            if (calendar.dateInRange(dayDate, params.disabled)) {\n              disabled = true;\n            }\n          }\n\n          if (disabled) {\n            addClass += ' calendar-day-disabled';\n          }\n\n          dayDate = new calendar.DateHandleClass(dayDate);\n          var dayYear = dayDate.getFullYear();\n          var dayMonth = dayDate.getMonth();\n          rowHtml += \"\\n          <div data-year=\\\"\".concat(dayYear, \"\\\" data-month=\\\"\").concat(dayMonth, \"\\\" data-day=\\\"\").concat(dayNumber, \"\\\" class=\\\"calendar-day\").concat(addClass, \"\\\" data-date=\\\"\").concat(dayYear, \"-\").concat(dayMonth, \"-\").concat(dayNumber, \"\\\">\\n            <span class=\\\"calendar-day-number\\\">\").concat(dayNumber).concat(eventsHtml, \"</span>\\n          </div>\").trim();\n        };\n\n        for (var col = 1; col <= cols; col += 1) {\n          _loop(col);\n        }\n\n        monthHtml += \"<div class=\\\"calendar-row\\\">\".concat(rowHtml, \"</div>\");\n      }\n\n      monthHtml = \"<div class=\\\"calendar-month\\\" data-year=\\\"\".concat(year, \"\\\" data-month=\\\"\").concat(month, \"\\\">\").concat(monthHtml, \"</div>\");\n      return monthHtml;\n    }\n  }, {\n    key: \"renderWeekHeader\",\n    value: function renderWeekHeader() {\n      var calendar = this;\n\n      if (calendar.params.renderWeekHeader) {\n        return calendar.params.renderWeekHeader.call(calendar);\n      }\n\n      var params = calendar.params;\n      var weekDaysHtml = '';\n\n      for (var i = 0; i < 7; i += 1) {\n        var dayIndex = i + params.firstDay > 6 ? i - 7 + params.firstDay : i + params.firstDay;\n        var dayName = params.dayNamesShort[dayIndex];\n        weekDaysHtml += \"<div class=\\\"calendar-week-day\\\">\".concat(dayName, \"</div>\");\n      }\n\n      return \"\\n    <div class=\\\"calendar-week-header\\\">\\n      \".concat(weekDaysHtml, \"\\n    </div>\\n  \").trim();\n    }\n  }, {\n    key: \"renderMonthSelector\",\n    value: function renderMonthSelector() {\n      var calendar = this;\n\n      if (calendar.params.renderMonthSelector) {\n        return calendar.params.renderMonthSelector.call(calendar);\n      }\n\n      return \"\\n    <div class=\\\"calendar-month-selector\\\">\\n      <a href=\\\"#\\\" class=\\\"link icon-only calendar-prev-month-button\\\">\\n        <i class=\\\"icon icon-prev\\\"></i>\\n      </a>\\n      <span class=\\\"current-month-value\\\"></span>\\n      <a href=\\\"#\\\" class=\\\"link icon-only calendar-next-month-button\\\">\\n        <i class=\\\"icon icon-next\\\"></i>\\n      </a>\\n    </div>\\n  \".trim();\n    }\n  }, {\n    key: \"renderYearSelector\",\n    value: function renderYearSelector() {\n      var calendar = this;\n\n      if (calendar.params.renderYearSelector) {\n        return calendar.params.renderYearSelector.call(calendar);\n      }\n\n      return \"\\n    <div class=\\\"calendar-year-selector\\\">\\n      <a href=\\\"#\\\" class=\\\"link icon-only calendar-prev-year-button\\\">\\n        <i class=\\\"icon icon-prev\\\"></i>\\n      </a>\\n      <span class=\\\"current-year-value\\\"></span>\\n      <a href=\\\"#\\\" class=\\\"link icon-only calendar-next-year-button\\\">\\n        <i class=\\\"icon icon-next\\\"></i>\\n      </a>\\n    </div>\\n  \".trim();\n    }\n  }, {\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var calendar = this;\n\n      if (calendar.params.renderHeader) {\n        return calendar.params.renderHeader.call(calendar);\n      }\n\n      return \"\\n    <div class=\\\"calendar-header\\\">\\n      <div class=\\\"calendar-selected-date\\\">\".concat(calendar.params.headerPlaceholder, \"</div>\\n    </div>\\n  \").trim();\n    }\n  }, {\n    key: \"renderFooter\",\n    value: function renderFooter() {\n      var calendar = this;\n      var app = calendar.app;\n\n      if (calendar.params.renderFooter) {\n        return calendar.params.renderFooter.call(calendar);\n      }\n\n      return \"\\n    <div class=\\\"calendar-footer\\\">\\n      <a href=\\\"#\\\" class=\\\"\".concat(app.theme === 'md' ? 'button' : 'link', \" calendar-close sheet-close popover-close\\\">\").concat(calendar.params.toolbarCloseText, \"</a>\\n    </div>\\n  \").trim();\n    }\n  }, {\n    key: \"renderToolbar\",\n    value: function renderToolbar() {\n      var calendar = this;\n\n      if (calendar.params.renderToolbar) {\n        return calendar.params.renderToolbar.call(calendar, calendar);\n      }\n\n      return \"\\n    <div class=\\\"toolbar toolbar-top no-shadow\\\">\\n      <div class=\\\"toolbar-inner\\\">\\n        \".concat(calendar.renderMonthSelector(), \"\\n        \").concat(calendar.renderYearSelector(), \"\\n      </div>\\n    </div>\\n  \").trim();\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"renderInline\",\n    value: function renderInline() {\n      var calendar = this;\n      var _calendar$params3 = calendar.params,\n          cssClass = _calendar$params3.cssClass,\n          toolbar = _calendar$params3.toolbar,\n          header = _calendar$params3.header,\n          footer = _calendar$params3.footer,\n          rangePicker = _calendar$params3.rangePicker,\n          weekHeader = _calendar$params3.weekHeader;\n      var value = calendar.value;\n      var date = value && value.length ? value[0] : new calendar.DateHandleClass().setHours(0, 0, 0);\n      var inlineHtml = \"\\n    <div class=\\\"calendar calendar-inline \".concat(rangePicker ? 'calendar-range' : '', \" \").concat(cssClass || '', \"\\\">\\n      \").concat(header ? calendar.renderHeader() : '', \"\\n      \").concat(toolbar ? calendar.renderToolbar() : '', \"\\n      \").concat(weekHeader ? calendar.renderWeekHeader() : '', \"\\n      <div class=\\\"calendar-months\\\">\\n        \").concat(calendar.renderMonths(date), \"\\n      </div>\\n      \").concat(footer ? calendar.renderFooter() : '', \"\\n    </div>\\n  \").trim();\n      return inlineHtml;\n    }\n  }, {\n    key: \"renderCustomModal\",\n    value: function renderCustomModal() {\n      var calendar = this;\n      var _calendar$params4 = calendar.params,\n          cssClass = _calendar$params4.cssClass,\n          toolbar = _calendar$params4.toolbar,\n          header = _calendar$params4.header,\n          footer = _calendar$params4.footer,\n          rangePicker = _calendar$params4.rangePicker,\n          weekHeader = _calendar$params4.weekHeader;\n      var value = calendar.value;\n      var date = value && value.length ? value[0] : new calendar.DateHandleClass().setHours(0, 0, 0);\n      var sheetHtml = \"\\n    <div class=\\\"calendar calendar-modal \".concat(rangePicker ? 'calendar-range' : '', \" \").concat(cssClass || '', \"\\\">\\n      \").concat(header ? calendar.renderHeader() : '', \"\\n      \").concat(toolbar ? calendar.renderToolbar() : '', \"\\n      \").concat(weekHeader ? calendar.renderWeekHeader() : '', \"\\n      <div class=\\\"calendar-months\\\">\\n        \").concat(calendar.renderMonths(date), \"\\n      </div>\\n      \").concat(footer ? calendar.renderFooter() : '', \"\\n    </div>\\n  \").trim();\n      return sheetHtml;\n    }\n  }, {\n    key: \"renderSheet\",\n    value: function renderSheet() {\n      var calendar = this;\n      var _calendar$params5 = calendar.params,\n          cssClass = _calendar$params5.cssClass,\n          toolbar = _calendar$params5.toolbar,\n          header = _calendar$params5.header,\n          footer = _calendar$params5.footer,\n          rangePicker = _calendar$params5.rangePicker,\n          weekHeader = _calendar$params5.weekHeader;\n      var value = calendar.value;\n      var date = value && value.length ? value[0] : new calendar.DateHandleClass().setHours(0, 0, 0);\n      var sheetHtml = \"\\n    <div class=\\\"sheet-modal calendar calendar-sheet \".concat(rangePicker ? 'calendar-range' : '', \" \").concat(cssClass || '', \"\\\">\\n      \").concat(header ? calendar.renderHeader() : '', \"\\n      \").concat(toolbar ? calendar.renderToolbar() : '', \"\\n      \").concat(weekHeader ? calendar.renderWeekHeader() : '', \"\\n      <div class=\\\"sheet-modal-inner calendar-months\\\">\\n        \").concat(calendar.renderMonths(date), \"\\n      </div>\\n      \").concat(footer ? calendar.renderFooter() : '', \"\\n    </div>\\n  \").trim();\n      return sheetHtml;\n    }\n  }, {\n    key: \"renderPopover\",\n    value: function renderPopover() {\n      var calendar = this;\n      var _calendar$params6 = calendar.params,\n          cssClass = _calendar$params6.cssClass,\n          toolbar = _calendar$params6.toolbar,\n          header = _calendar$params6.header,\n          footer = _calendar$params6.footer,\n          rangePicker = _calendar$params6.rangePicker,\n          weekHeader = _calendar$params6.weekHeader;\n      var value = calendar.value;\n      var date = value && value.length ? value[0] : new calendar.DateHandleClass().setHours(0, 0, 0);\n      var popoverHtml = \"\\n    <div class=\\\"popover calendar-popover\\\">\\n      <div class=\\\"popover-inner\\\">\\n        <div class=\\\"calendar \".concat(rangePicker ? 'calendar-range' : '', \" \").concat(cssClass || '', \"\\\">\\n        \").concat(header ? calendar.renderHeader() : '', \"\\n        \").concat(toolbar ? calendar.renderToolbar() : '', \"\\n        \").concat(weekHeader ? calendar.renderWeekHeader() : '', \"\\n        <div class=\\\"calendar-months\\\">\\n          \").concat(calendar.renderMonths(date), \"\\n        </div>\\n        \").concat(footer ? calendar.renderFooter() : '', \"\\n        </div>\\n      </div>\\n    </div>\\n  \").trim();\n      return popoverHtml;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var calendar = this;\n      var params = calendar.params;\n      if (params.render) return params.render.call(calendar);\n\n      if (!calendar.inline) {\n        var modalType = params.openIn;\n        if (modalType === 'auto') modalType = calendar.isPopover() ? 'popover' : 'sheet';\n        if (modalType === 'popover') return calendar.renderPopover();\n        if (modalType === 'sheet') return calendar.renderSheet();\n        return calendar.renderCustomModal();\n      }\n\n      return calendar.renderInline();\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      var calendar = this;\n      var initialized = calendar.initialized,\n          $el = calendar.$el,\n          app = calendar.app,\n          $inputEl = calendar.$inputEl,\n          inline = calendar.inline,\n          value = calendar.value,\n          params = calendar.params;\n      calendar.closing = false;\n      calendar.opened = true;\n      calendar.opening = true; // Init main events\n\n      calendar.attachCalendarEvents();\n      var updateValue = !value && params.value; // Set value\n\n      if (!initialized) {\n        if (value) calendar.setValue(value, 0);else if (params.value) {\n          calendar.setValue(calendar.normalizeValues(params.value), 0);\n        }\n      } else if (value) {\n        calendar.setValue(value, 0);\n      } // Update current month and year\n\n\n      calendar.updateCurrentMonthYear(); // Set initial translate\n\n      calendar.monthsTranslate = 0;\n      calendar.setMonthsTranslate(); // Update input value\n\n      if (updateValue) calendar.updateValue();else if (params.header && value) {\n        calendar.updateValue(true);\n      } // Extra focus\n\n      if (!inline && $inputEl && $inputEl.length && app.theme === 'md') {\n        $inputEl.trigger('focus');\n      }\n\n      calendar.initialized = true;\n      calendar.$months.each(function (index, monthEl) {\n        calendar.emit('local::monthAdd calendarMonthAdd', monthEl);\n      }); // Trigger events\n\n      if ($el) {\n        $el.trigger('calendar:open', calendar);\n      }\n\n      if ($inputEl) {\n        $inputEl.trigger('calendar:open', calendar);\n      }\n\n      calendar.emit('local::open calendarOpen', calendar);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened() {\n      var calendar = this;\n      calendar.opening = false;\n\n      if (calendar.$el) {\n        calendar.$el.trigger('calendar:opened', calendar);\n      }\n\n      if (calendar.$inputEl) {\n        calendar.$inputEl.trigger('calendar:opened', calendar);\n      }\n\n      calendar.emit('local::opened calendarOpened', calendar);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      var calendar = this;\n      var app = calendar.app;\n      calendar.opening = false;\n      calendar.closing = true;\n\n      if (calendar.$inputEl && app.theme === 'md') {\n        calendar.$inputEl.trigger('blur');\n      }\n\n      if (calendar.detachCalendarEvents) {\n        calendar.detachCalendarEvents();\n      }\n\n      if (calendar.$el) {\n        calendar.$el.trigger('calendar:close', calendar);\n      }\n\n      if (calendar.$inputEl) {\n        calendar.$inputEl.trigger('calendar:close', calendar);\n      }\n\n      calendar.emit('local::close calendarClose', calendar);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed() {\n      var calendar = this;\n      calendar.opened = false;\n      calendar.closing = false;\n\n      if (!calendar.inline) {\n        Utils.nextTick(function () {\n          if (calendar.modal && calendar.modal.el && calendar.modal.destroy) {\n            if (!calendar.params.routableModals) {\n              calendar.modal.destroy();\n            }\n          }\n\n          delete calendar.modal;\n        });\n      }\n\n      if (calendar.$el) {\n        calendar.$el.trigger('calendar:closed', calendar);\n      }\n\n      if (calendar.$inputEl) {\n        calendar.$inputEl.trigger('calendar:closed', calendar);\n      }\n\n      calendar.emit('local::closed calendarClosed', calendar);\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var calendar = this;\n      var app = calendar.app,\n          opened = calendar.opened,\n          inline = calendar.inline,\n          $inputEl = calendar.$inputEl,\n          params = calendar.params;\n      if (opened) return;\n\n      if (inline) {\n        calendar.$el = $(calendar.render());\n        calendar.$el[0].f7Calendar = calendar;\n        calendar.$wrapperEl = calendar.$el.find('.calendar-months-wrapper');\n        calendar.$months = calendar.$wrapperEl.find('.calendar-month');\n        calendar.$containerEl.append(calendar.$el);\n        calendar.onOpen();\n        calendar.onOpened();\n        return;\n      }\n\n      var modalType = params.openIn;\n\n      if (modalType === 'auto') {\n        modalType = calendar.isPopover() ? 'popover' : 'sheet';\n      }\n\n      var modalContent = calendar.render();\n      var modalParams = {\n        targetEl: $inputEl,\n        scrollToEl: calendar.params.scrollToInput ? $inputEl : undefined,\n        content: modalContent,\n        backdrop: calendar.params.backdrop === true || modalType === 'popover' && app.params.popover.backdrop !== false && calendar.params.backdrop !== false,\n        closeByBackdropClick: calendar.params.closeByBackdropClick,\n        on: {\n          open: function open() {\n            var modal = this;\n            calendar.modal = modal;\n            calendar.$el = modalType === 'popover' ? modal.$el.find('.calendar') : modal.$el;\n            calendar.$wrapperEl = calendar.$el.find('.calendar-months-wrapper');\n            calendar.$months = calendar.$wrapperEl.find('.calendar-month');\n            calendar.$el[0].f7Calendar = calendar;\n\n            if (modalType === 'customModal') {\n              $(calendar.$el).find('.calendar-close').once('click', function () {\n                calendar.close();\n              });\n            }\n\n            calendar.onOpen();\n          },\n          opened: function opened() {\n            calendar.onOpened();\n          },\n          close: function close() {\n            calendar.onClose();\n          },\n          closed: function closed() {\n            calendar.onClosed();\n          }\n        }\n      };\n\n      if (calendar.params.routableModals) {\n        calendar.view.router.navigate({\n          url: calendar.url,\n          route: _defineProperty({\n            path: calendar.url\n          }, modalType, modalParams)\n        });\n      } else {\n        calendar.modal = app[modalType].create(modalParams);\n        calendar.modal.open();\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var calendar = this;\n      var opened = calendar.opened,\n          inline = calendar.inline;\n      if (!opened) return;\n\n      if (inline) {\n        calendar.onClose();\n        calendar.onClosed();\n        return;\n      }\n\n      if (calendar.params.routableModals) {\n        calendar.view.router.back();\n      } else {\n        calendar.modal.close();\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var calendar = this;\n      calendar.initInput();\n\n      if (calendar.inline) {\n        calendar.open();\n        calendar.emit('local::init calendarInit', calendar);\n        return;\n      }\n\n      if (!calendar.initialized && calendar.params.value) {\n        calendar.setValue(calendar.normalizeValues(calendar.params.value));\n      } // Attach input Events\n\n\n      if (calendar.$inputEl) {\n        calendar.attachInputEvents();\n      }\n\n      if (calendar.params.closeByOutsideClick) {\n        calendar.attachHtmlEvents();\n      }\n\n      calendar.emit('local::init calendarInit', calendar);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var calendar = this;\n      if (calendar.destroyed) return;\n      var $el = calendar.$el;\n      calendar.emit('local::beforeDestroy calendarBeforeDestroy', calendar);\n      if ($el) $el.trigger('calendar:beforedestroy', calendar);\n      calendar.close(); // Detach Events\n\n      if (calendar.$inputEl) {\n        calendar.detachInputEvents();\n      }\n\n      if (calendar.params.closeByOutsideClick) {\n        calendar.detachHtmlEvents();\n      }\n\n      if ($el && $el.length) delete calendar.$el[0].f7Calendar;\n      Utils.deleteProps(calendar);\n      calendar.destroyed = true;\n    }\n  }]);\n\n  return Calendar;\n}(Framework7Class);\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}