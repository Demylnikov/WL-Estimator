{"ast":null,"code":"import _construct from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\n/*\n  Copyright nainemom <nainemom@gmail.com>\n  https://github.com/nainemom/idate/blob/dev/package.json\n*/\nimport { toGregorian, toJalaali, fixDate } from './utils.js';\nvar methods = ['getHours', 'getMilliseconds', 'getMinutes', 'getSeconds', 'getTime', 'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear', 'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCMonth', 'getUTCSeconds', 'now', 'parse', 'setHours', 'setMilliseconds', 'setMinutes', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds', 'toDateString', 'toISOString', 'toJSON', 'toLocaleDateString', 'toLocaleTimeString', 'toLocaleString', 'toTimeString', 'toUTCString', 'UTC', 'valueOf'];\nvar DAY_NAMES = ['Shanbe', 'Yekshanbe', 'Doshanbe', 'Seshanbe', 'Chaharshanbe', 'Panjshanbe', 'Jom\\'e'];\nvar PERSIAN_DAY_NAMES = ['شنبه', 'یکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنجشنبه', 'جمعه'];\nvar MONTH_NAMES = ['Farvardin', 'Ordibehesht', 'Khordad', 'Tir', 'Mordad', 'Shahrivar', 'Mehr', 'Aban', 'Azar', 'Dey', 'Bahman', 'Esfand'];\nvar PERSIAN_MONTH_NAMES = ['فروردین', 'اردیبهشت', 'خرداد', 'تیر', 'مرداد', 'شهریور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'];\nvar PERSIAN_NUMBERS = ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'];\n\nvar IDate =\n/*#__PURE__*/\nfunction (_Date) {\n  _inherits(IDate, _Date);\n\n  function IDate() {\n    var _this;\n\n    _classCallCheck(this, IDate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IDate).call(this));\n    var date;\n    var args = Array.from(arguments);\n\n    if (args.length === 0) {\n      date = Date.now();\n    } else if (args.length === 1) {\n      date = args[0] instanceof Date ? args[0].getTime() : args[0];\n    } else {\n      var fixed = fixDate(args[0], args[1] || 0, typeof args[2] === 'undefined' ? 1 : args[2]);\n\n      var _converted = toGregorian(fixed[0], fixed[1] + 1, fixed[2]);\n\n      date = [_converted.gy, _converted.gm - 1, _converted.gd].concat([args[3] || 0, args[4] || 0, args[5] || 0, args[6] || 0]);\n    }\n\n    if (Array.isArray(date)) {\n      _this.gdate = _construct(Date, _toConsumableArray(date));\n    } else {\n      _this.gdate = new Date(date);\n    }\n\n    var converted = toJalaali(_this.gdate.getFullYear(), _this.gdate.getMonth() + 1, _this.gdate.getDate());\n    _this.jdate = [converted.jy, converted.jm - 1, converted.jd];\n    methods.forEach(function (method) {\n      IDate.prototype[method] = function () {\n        var _this$gdate;\n\n        return (_this$gdate = this.gdate)[method].apply(_this$gdate, arguments);\n      };\n    });\n    return _this;\n  }\n\n  _createClass(IDate, [{\n    key: \"getFullYear\",\n    value: function getFullYear() {\n      return this.jdate[0];\n    }\n  }, {\n    key: \"setFullYear\",\n    value: function setFullYear(value) {\n      this.jdate = fixDate(value, this.jdate[1], this.jdate[2]);\n      this.syncDate();\n      return this.gdate.getTime();\n    }\n  }, {\n    key: \"getMonth\",\n    value: function getMonth() {\n      return this.jdate[1];\n    }\n  }, {\n    key: \"setMonth\",\n    value: function setMonth(value) {\n      this.jdate = fixDate(this.jdate[0], value, this.jdate[2]);\n      this.syncDate();\n      return this.gdate.getTime();\n    }\n  }, {\n    key: \"getDate\",\n    value: function getDate() {\n      return this.jdate[2];\n    }\n  }, {\n    key: \"setDate\",\n    value: function setDate(value) {\n      this.jdate = fixDate(this.jdate[0], this.jdate[1], value);\n      this.syncDate();\n      return this.gdate.getTime();\n    }\n  }, {\n    key: \"getDay\",\n    value: function getDay() {\n      return (this.gdate.getDay() + 1) % 7;\n    }\n  }, {\n    key: \"syncDate\",\n    value: function syncDate() {\n      var converted = toGregorian(this.jdate[0], this.jdate[1] + 1, this.jdate[2]);\n      this.gdate.setFullYear(converted.gy);\n      this.gdate.setMonth(converted.gm - 1);\n      this.gdate.setDate(converted.gd);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var persianString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var replaceNums = function replaceNums(str) {\n        return str.replace(/./g, function (c) {\n          return PERSIAN_NUMBERS[c] || c;\n        });\n      };\n\n      var padNumber = function padNumber(num) {\n        return num.toString().length === 1 ? \"0\".concat(num) : num.toString();\n      };\n\n      var time = \"\".concat(padNumber(this.getHours()), \":\").concat(padNumber(this.getMinutes()), \":\").concat(padNumber(this.getSeconds()));\n\n      if (persianString) {\n        return replaceNums(\"\".concat(PERSIAN_DAY_NAMES[this.getDay()], \" \").concat(this.getDate(), \" \").concat(PERSIAN_MONTH_NAMES[this.getMonth()], \" \").concat(this.getFullYear(), \" \\u0633\\u0627\\u0639\\u062A \").concat(time));\n      }\n\n      return \"\".concat(DAY_NAMES[this.getDay()], \" \").concat(this.getDate(), \" \").concat(MONTH_NAMES[this.getMonth()], \" \").concat(this.getFullYear(), \" \").concat(time);\n    }\n  }]);\n\n  return IDate;\n}(_wrapNativeSuper(Date));\n\nexport { IDate as default };","map":null,"metadata":{},"sourceType":"module"}