{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport { window } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Modal from '../modal/modal-class';\n\nvar Notification =\n/*#__PURE__*/\nfunction (_Modal) {\n  _inherits(Notification, _Modal);\n\n  function Notification(app, params) {\n    var _this;\n\n    _classCallCheck(this, Notification);\n\n    var extendedParams = Utils.extend({\n      on: {}\n    }, app.params.notification, params); // Extends with open/close Modal methods;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Notification).call(this, app, extendedParams));\n\n    var notification = _assertThisInitialized(_assertThisInitialized(_this));\n\n    notification.app = app;\n    notification.params = extendedParams;\n    var _notification$params = notification.params,\n        icon = _notification$params.icon,\n        title = _notification$params.title,\n        titleRightText = _notification$params.titleRightText,\n        subtitle = _notification$params.subtitle,\n        text = _notification$params.text,\n        closeButton = _notification$params.closeButton,\n        closeTimeout = _notification$params.closeTimeout,\n        cssClass = _notification$params.cssClass,\n        closeOnClick = _notification$params.closeOnClick;\n    var $el;\n\n    if (!notification.params.el) {\n      // Find Element\n      var notificationHtml = notification.render({\n        icon: icon,\n        title: title,\n        titleRightText: titleRightText,\n        subtitle: subtitle,\n        text: text,\n        closeButton: closeButton,\n        cssClass: cssClass\n      });\n      $el = $(notificationHtml);\n    } else {\n      $el = $(notification.params.el);\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return _possibleConstructorReturn(_this, $el[0].f7Modal);\n    }\n\n    if ($el.length === 0) {\n      return _possibleConstructorReturn(_this, notification.destroy());\n    }\n\n    Utils.extend(notification, {\n      $el: $el,\n      el: $el[0],\n      type: 'notification'\n    });\n    $el[0].f7Modal = notification;\n\n    if (closeButton) {\n      $el.find('.notification-close-button').on('click', function () {\n        notification.close();\n      });\n    }\n\n    $el.on('click', function (e) {\n      if (closeButton && $(e.target).closest('.notification-close-button').length) {\n        return;\n      }\n\n      notification.emit('local::click notificationClick', notification);\n      if (closeOnClick) notification.close();\n    });\n    notification.on('beforeDestroy', function () {\n      $el.off('click');\n    });\n    /* Touch Events */\n\n    var isTouched;\n    var isMoved;\n    var isScrolling;\n    var touchesDiff;\n    var touchStartTime;\n    var notificationHeight;\n    var touchesStart = {};\n\n    function handleTouchStart(e) {\n      if (isTouched) return;\n      isTouched = true;\n      isMoved = false;\n      isScrolling = undefined;\n      touchStartTime = Utils.now();\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) < Math.abs(pageX - touchesStart.x));\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      e.preventDefault();\n\n      if (!isMoved) {\n        notification.$el.removeClass('notification-transitioning');\n        notification.$el.transition(0);\n        notificationHeight = notification.$el[0].offsetHeight / 2;\n      }\n\n      isMoved = true;\n      touchesDiff = pageY - touchesStart.y;\n      var newTranslate = touchesDiff;\n\n      if (touchesDiff > 0) {\n        newTranslate = Math.pow(touchesDiff, 0.8);\n      }\n\n      notification.$el.transform(\"translate3d(0, \".concat(newTranslate, \"px, 0)\"));\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched || !isMoved) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      isTouched = false;\n      isMoved = false;\n\n      if (touchesDiff === 0) {\n        return;\n      }\n\n      var timeDiff = Utils.now() - touchStartTime;\n      notification.$el.transition('');\n      notification.$el.addClass('notification-transitioning');\n      notification.$el.transform('');\n\n      if (touchesDiff < -10 && timeDiff < 300 || -touchesDiff >= notificationHeight / 1) {\n        notification.close();\n      }\n    }\n\n    function attachTouchEvents() {\n      if (\"universal\" !== 'desktop') {\n        notification.$el.on(app.touchEvents.start, handleTouchStart, {\n          passive: true\n        });\n        app.on('touchmove:active', handleTouchMove);\n        app.on('touchend:passive', handleTouchEnd);\n      }\n    }\n\n    function detachTouchEvents() {\n      if (process.env.TARGET !== 'desktop') {\n        notification.$el.off(app.touchEvents.start, handleTouchStart, {\n          passive: true\n        });\n        app.off('touchmove:active', handleTouchMove);\n        app.off('touchend:passive', handleTouchEnd);\n      }\n    }\n\n    var timeoutId;\n\n    function closeOnTimeout() {\n      timeoutId = Utils.nextTick(function () {\n        if (isTouched && isMoved) {\n          closeOnTimeout();\n          return;\n        }\n\n        notification.close();\n      }, closeTimeout);\n    }\n\n    notification.on('open', function () {\n      if (notification.params.swipeToClose) {\n        attachTouchEvents();\n      }\n\n      $('.notification.modal-in').each(function (index, openedEl) {\n        var notificationInstance = app.notification.get(openedEl);\n\n        if (openedEl !== notification.el && notificationInstance) {\n          notificationInstance.close();\n        }\n      });\n\n      if (closeTimeout) {\n        closeOnTimeout();\n      }\n    });\n    notification.on('close beforeDestroy', function () {\n      if (notification.params.swipeToClose) {\n        detachTouchEvents();\n      }\n\n      window.clearTimeout(timeoutId);\n    });\n    return _possibleConstructorReturn(_this, notification);\n  }\n\n  _createClass(Notification, [{\n    key: \"render\",\n    value: function render() {\n      var notification = this;\n      if (notification.params.render) return notification.params.render.call(notification, notification);\n      var _notification$params2 = notification.params,\n          icon = _notification$params2.icon,\n          title = _notification$params2.title,\n          titleRightText = _notification$params2.titleRightText,\n          subtitle = _notification$params2.subtitle,\n          text = _notification$params2.text,\n          closeButton = _notification$params2.closeButton,\n          cssClass = _notification$params2.cssClass;\n      return \"\\n      <div class=\\\"notification \".concat(cssClass || '', \"\\\">\\n        <div class=\\\"notification-header\\\">\\n          \").concat(icon ? \"<div class=\\\"notification-icon\\\">\".concat(icon, \"</div>\") : '', \"\\n          \").concat(title ? \"<div class=\\\"notification-title\\\">\".concat(title, \"</div>\") : '', \"\\n          \").concat(titleRightText ? \"<div class=\\\"notification-title-right-text\\\">\".concat(titleRightText, \"</div>\") : '', \"\\n          \").concat(closeButton ? '<span class=\"notification-close-button\"></span>' : '', \"\\n        </div>\\n        <div class=\\\"notification-content\\\">\\n          \").concat(subtitle ? \"<div class=\\\"notification-subtitle\\\">\".concat(subtitle, \"</div>\") : '', \"\\n          \").concat(text ? \"<div class=\\\"notification-text\\\">\".concat(text, \"</div>\") : '', \"\\n        </div>\\n      </div>\\n    \").trim();\n    }\n  }]);\n\n  return Notification;\n}(Modal);\n\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}