{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7ListInput =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7ListInput, _React$Component);\n\n  function F7ListInput(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7ListInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7ListInput).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        isSortable: props.sortable,\n        inputFocused: false,\n        inputInvalid: false\n      };\n    }();\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_assertThisInitialized(_this)), 'onChange onInput onFocus onBlur onTextareaResize onInputNotEmpty onInputEmpty onInputClear'.split(' '));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7ListInput, [{\n    key: \"domValue\",\n    value: function domValue() {\n      var self = this;\n      var inputEl = self.refs.inputEl;\n      if (!inputEl) return undefined;\n      return inputEl.value;\n    }\n  }, {\n    key: \"inputHasValue\",\n    value: function inputHasValue() {\n      var self = this;\n      var value = self.props.value;\n      var domValue = self.domValue();\n      return typeof value === 'undefined' ? domValue || domValue === 0 : value || value === 0;\n    }\n  }, {\n    key: \"validateInput\",\n    value: function validateInput(inputEl) {\n      var self = this;\n      var f7 = self.$f7;\n      if (!f7 || !inputEl) return;\n      var validity = inputEl.validity;\n      if (!validity) return;\n\n      if (!validity.valid) {\n        if (self.state.inputInvalid !== true) {\n          self.setState({\n            inputInvalid: true\n          });\n        }\n      } else if (self.state.inputInvalid !== false) {\n        self.setState({\n          inputInvalid: false\n        });\n      }\n    }\n  }, {\n    key: \"onTextareaResize\",\n    value: function onTextareaResize(event) {\n      this.dispatchEvent('textarea:resize textareaResize', event);\n    }\n  }, {\n    key: \"onInputNotEmpty\",\n    value: function onInputNotEmpty(event) {\n      this.dispatchEvent('input:notempty inputNotEmpty', event);\n    }\n  }, {\n    key: \"onInputEmpty\",\n    value: function onInputEmpty(event) {\n      this.dispatchEvent('input:empty inputEmpty', event);\n    }\n  }, {\n    key: \"onInputClear\",\n    value: function onInputClear(event) {\n      this.dispatchEvent('input:clear inputClear', event);\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(event) {\n      var self = this;\n      var _self$props = self.props,\n          validate = _self$props.validate,\n          validateOnBlur = _self$props.validateOnBlur;\n      self.dispatchEvent('input', event);\n\n      if (!(validateOnBlur || validateOnBlur === '') && (validate || validate === '') && self.refs && self.refs.inputEl) {\n        self.validateInput(self.refs.inputEl);\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      this.dispatchEvent('focus', event);\n      this.setState({\n        inputFocused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      var self = this;\n      var _self$props2 = self.props,\n          validate = _self$props2.validate,\n          validateOnBlur = _self$props2.validateOnBlur;\n      self.dispatchEvent('blur', event);\n\n      if ((validate || validate === '' || validateOnBlur || validateOnBlur === '') && self.refs && self.refs.inputEl) {\n        self.validateInput(self.refs.inputEl);\n      }\n\n      self.setState({\n        inputFocused: false\n      });\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      this.dispatchEvent('change', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var _self$state = self.state,\n          inputFocused = _self$state.inputFocused,\n          inputInvalid = _self$state.inputInvalid;\n      var props = self.props;\n      var id = props.id,\n          style = props.style,\n          className = props.className,\n          sortable = props.sortable,\n          media = props.media,\n          dropdown = props.dropdown,\n          renderInput = props.input,\n          wrap = props.wrap,\n          type = props.type,\n          name = props.name,\n          value = props.value,\n          defaultValue = props.defaultValue,\n          readonly = props.readonly,\n          required = props.required,\n          disabled = props.disabled,\n          placeholder = props.placeholder,\n          inputId = props.inputId,\n          size = props.size,\n          accept = props.accept,\n          autocomplete = props.autocomplete,\n          autocorrect = props.autocorrect,\n          autocapitalize = props.autocapitalize,\n          spellcheck = props.spellcheck,\n          autofocus = props.autofocus,\n          autosave = props.autosave,\n          max = props.max,\n          min = props.min,\n          step = props.step,\n          maxlength = props.maxlength,\n          minlength = props.minlength,\n          multiple = props.multiple,\n          inputStyle = props.inputStyle,\n          pattern = props.pattern,\n          validate = props.validate,\n          validateOnBlur = props.validateOnBlur,\n          tabindex = props.tabindex,\n          resizable = props.resizable,\n          clearButton = props.clearButton,\n          noFormStoreData = props.noFormStoreData,\n          noStoreData = props.noStoreData,\n          ignoreStoreData = props.ignoreStoreData,\n          errorMessage = props.errorMessage,\n          errorMessageForce = props.errorMessageForce,\n          info = props.info,\n          label = props.label,\n          inlineLabel = props.inlineLabel,\n          floatingLabel = props.floatingLabel;\n      var domValue = self.domValue();\n      var inputHasValue = self.inputHasValue();\n      var isSortable = sortable || self.state.isSortable;\n\n      var createInput = function createInput(InputTag, children) {\n        var needsValue = type !== 'file';\n        var needsType = InputTag === 'input';\n        var inputClassName = Utils.classNames({\n          resizable: type === 'textarea' && resizable,\n          'no-store-data': noFormStoreData || noStoreData || ignoreStoreData,\n          'input-invalid': errorMessage && errorMessageForce || inputInvalid,\n          'input-with-value': inputHasValue,\n          'input-focused': inputFocused\n        });\n        var input;\n        var inputValue;\n\n        if (needsValue) {\n          if (typeof value !== 'undefined') inputValue = value;else inputValue = domValue;\n        }\n\n        var valueProps = {};\n        if ('value' in props) valueProps.value = inputValue;\n        if ('defaultValue' in props) valueProps.defaultValue = defaultValue;\n        {\n          input = React.createElement(InputTag, Object.assign({\n            ref: function ref(__reactNode) {\n              _this2.__reactRefs['inputEl'] = __reactNode;\n            },\n            style: inputStyle,\n            name: name,\n            type: needsType ? type : undefined,\n            placeholder: placeholder,\n            id: inputId,\n            size: size,\n            accept: accept,\n            autoComplete: autocomplete,\n            autoCorrect: autocorrect,\n            autoCapitalize: autocapitalize,\n            spellCheck: spellcheck,\n            autoFocus: autofocus,\n            autoSave: autosave,\n            disabled: disabled,\n            max: max,\n            maxLength: maxlength,\n            min: min,\n            minLength: minlength,\n            step: step,\n            multiple: multiple,\n            readOnly: readonly,\n            required: required,\n            pattern: pattern,\n            validate: typeof validate === 'string' && validate.length ? validate : undefined,\n            'data-validate': validate === true || validate === '' || validateOnBlur === true || validateOnBlur === '' ? true : undefined,\n            'data-validate-on-blur': validateOnBlur === true || validateOnBlur === '' ? true : undefined,\n            tabIndex: tabindex,\n            'data-error-message': errorMessageForce ? undefined : errorMessage,\n            className: inputClassName,\n            onFocus: self.onFocus,\n            onBlur: self.onBlur,\n            onInput: self.onInput,\n            onChange: self.onChange\n          }, valueProps), children);\n        }\n        return input;\n      };\n\n      var inputEl;\n\n      if (renderInput) {\n        if (type === 'select' || type === 'textarea' || type === 'file') {\n          if (type === 'select') {\n            inputEl = createInput('select', self.slots.default);\n          } else if (type === 'file') {\n            inputEl = createInput('input');\n          } else {\n            inputEl = createInput('textarea');\n          }\n        } else {\n          inputEl = createInput('input');\n        }\n      }\n\n      var hasErrorMessage = !!errorMessage || self.slots['error-message'] && self.slots['error-message'].length;\n      var ItemContent = React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['itemContentEl'] = __reactNode;\n        },\n        className: Utils.classNames('item-content item-input', !wrap && className, !wrap && {\n          disabled: disabled\n        }, !wrap && Mixins.colorClasses(props), {\n          'inline-label': inlineLabel,\n          'item-input-focused': inputFocused,\n          'item-input-with-info': !!info || self.slots.info && self.slots.info.length,\n          'item-input-with-value': inputHasValue,\n          'item-input-with-error-message': hasErrorMessage && errorMessageForce || inputInvalid,\n          'item-input-invalid': hasErrorMessage && errorMessageForce || inputInvalid\n        })\n      }, this.slots['content-start'], (media || self.slots.media) && React.createElement('div', {\n        className: 'item-media'\n      }, media && React.createElement('img', {\n        src: media\n      }), this.slots['media']), React.createElement('div', {\n        className: 'item-inner'\n      }, this.slots['inner-start'], (label || self.slots.label) && React.createElement('div', {\n        className: Utils.classNames('item-title item-label', {\n          'item-floating-label': floatingLabel\n        })\n      }, label, this.slots['label']), React.createElement('div', {\n        className: Utils.classNames('item-input-wrap', {\n          'input-dropdown': dropdown === 'auto' ? type === 'select' : dropdown\n        })\n      }, inputEl, this.slots['input'], hasErrorMessage && errorMessageForce && React.createElement('div', {\n        className: 'item-input-error-message'\n      }, errorMessage, this.slots['error-message']), clearButton && React.createElement('span', {\n        className: 'input-clear-button'\n      }), (info || self.slots.info) && React.createElement('div', {\n        className: 'item-input-info'\n      }, info, this.slots['info'])), this.slots['inner'], this.slots['inner-end']), this.slots['content'], this.slots['content-end']);\n\n      if (!wrap) {\n        return ItemContent;\n      }\n\n      return React.createElement('li', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: Utils.classNames(className, {\n          disabled: disabled\n        }, Mixins.colorClasses(props))\n      }, this.slots['root-start'], ItemContent, isSortable && React.createElement('div', {\n        className: 'sortable-handler'\n      }), this.slots['root'], this.slots['root-end']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var inputEl = self.refs.inputEl;\n      if (!inputEl) return;\n      inputEl.removeEventListener('input:notempty', self.onInputNotEmpty, false);\n      inputEl.removeEventListener('textarea:resze', self.onTextareaResize, false);\n      inputEl.removeEventListener('input:empty', self.onInputEmpty, false);\n      inputEl.removeEventListener('input:clear', self.onInputClear, false);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.value', prevProps, prevState, function () {\n        var self = _this3;\n        if (!self.$f7) return;\n        self.updateInputOnDidUpdate = true;\n      });\n\n      var self = this;\n      var $listEl = self.$listEl;\n      if (!$listEl || $listEl && $listEl.length === 0) return;\n      var isSortable = $listEl.hasClass('sortable');\n\n      if (isSortable !== self.state.isSortable) {\n        self.setState({\n          isSortable: isSortable\n        });\n      }\n\n      var _self$props3 = self.props,\n          validate = _self$props3.validate,\n          validateOnBlur = _self$props3.validateOnBlur,\n          resizable = _self$props3.resizable,\n          type = _self$props3.type;\n      var f7 = self.$f7;\n      if (!f7) return;\n\n      if (self.updateInputOnDidUpdate) {\n        var inputEl = self.refs.inputEl;\n        if (!inputEl) return;\n        self.updateInputOnDidUpdate = false;\n\n        if (validate && !validateOnBlur) {\n          self.validateInput(inputEl);\n        }\n\n        if (type === 'textarea' && resizable) {\n          f7.input.resizeTextarea(inputEl);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      var itemContentEl = self.refs.itemContentEl;\n      if (!el && !itemContentEl) return;\n      self.$f7ready(function (f7) {\n        var _self$props4 = self.props,\n            validate = _self$props4.validate,\n            validateOnBlur = _self$props4.validateOnBlur,\n            resizable = _self$props4.resizable,\n            value = _self$props4.value,\n            defaultValue = _self$props4.defaultValue,\n            type = _self$props4.type;\n        var inputEl = self.refs.inputEl;\n        if (!inputEl) return;\n        inputEl.addEventListener('input:notempty', self.onInputNotEmpty, false);\n        inputEl.addEventListener('textarea:resze', self.onTextareaResize, false);\n        inputEl.addEventListener('input:empty', self.onInputEmpty, false);\n        inputEl.addEventListener('input:clear', self.onInputClear, false);\n\n        if (!(validateOnBlur || validateOnBlur === '') && (validate || validate === '') && (typeof value !== 'undefined' && value !== null && value !== '' || typeof defaultValue !== 'undefined' && defaultValue !== null && defaultValue !== '')) {\n          setTimeout(function () {\n            self.validateInput(inputEl);\n          }, 0);\n        }\n\n        if (type === 'textarea' && resizable) {\n          f7.input.resizeTextarea(inputEl);\n        }\n      });\n      self.$listEl = self.$$(el || itemContentEl).parents('.list, .list-group').eq(0);\n\n      if (self.$listEl.length) {\n        self.setState({\n          isSortable: self.$listEl.hasClass('sortable')\n        });\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7ListInput;\n}(React.Component);\n\n__reactComponentSetProps(F7ListInput, Object.assign({\n  id: [String, Number],\n  style: Object,\n  className: String,\n  sortable: Boolean,\n  media: String,\n  dropdown: {\n    type: [String, Boolean],\n    default: 'auto'\n  },\n  wrap: {\n    type: Boolean,\n    default: true\n  },\n  input: {\n    type: Boolean,\n    default: true\n  },\n  type: {\n    type: String,\n    default: 'text'\n  },\n  name: String,\n  value: [String, Number, Array],\n  defaultValue: [String, Number, Array],\n  readonly: Boolean,\n  required: Boolean,\n  disabled: Boolean,\n  placeholder: String,\n  inputId: [String, Number],\n  size: [String, Number],\n  accept: [String, Number],\n  autocomplete: [String],\n  autocorrect: [String],\n  autocapitalize: [String],\n  spellcheck: [String],\n  autofocus: Boolean,\n  autosave: String,\n  max: [String, Number],\n  min: [String, Number],\n  step: [String, Number],\n  maxlength: [String, Number],\n  minlength: [String, Number],\n  multiple: Boolean,\n  inputStyle: Object,\n  pattern: String,\n  validate: [Boolean, String],\n  validateOnBlur: Boolean,\n  tabindex: [String, Number],\n  resizable: Boolean,\n  clearButton: Boolean,\n  noFormStoreData: Boolean,\n  noStoreData: Boolean,\n  ignoreStoreData: Boolean,\n  errorMessage: String,\n  errorMessageForce: Boolean,\n  info: String,\n  label: [String, Number],\n  inlineLabel: Boolean,\n  floatingLabel: Boolean\n}, Mixins.colorProps));\n\nF7ListInput.displayName = 'f7-list-input';\nexport default F7ListInput;","map":null,"metadata":{},"sourceType":"module"}