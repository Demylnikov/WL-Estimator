{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7MenuDropdownItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7MenuDropdownItem, _React$Component);\n\n  function F7MenuDropdownItem(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7MenuDropdownItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7MenuDropdownItem).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_assertThisInitialized(_this)), ['onClick']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7MenuDropdownItem, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.dispatchEvent('click', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          className = props.className,\n          style = props.style,\n          link = props.link,\n          href = props.href,\n          text = props.text,\n          divider = props.divider,\n          menuClose = props.menuClose;\n      var isLink = link || href || href === '';\n      var Tag = isLink ? 'a' : 'div';\n      var classes = Utils.classNames({\n        'menu-dropdown-link': isLink && !divider,\n        'menu-dropdown-item': !isLink && !divider,\n        'menu-dropdown-divider': divider\n      }, className, Mixins.colorClasses(props), Mixins.linkRouterClasses(props), Mixins.linkActionsClasses(props), {\n        'menu-close': typeof menuClose === 'undefined'\n      });\n      return React.createElement(Tag, Object.assign({\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        className: classes,\n        id: id,\n        style: style\n      }, self.attrs), text, this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      el.removeEventListener('click', self.onClick);\n      delete el.f7RouteProps;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      var routeProps = self.props.routeProps;\n      if (routeProps) el.f7RouteProps = routeProps;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      el.addEventListener('click', self.onClick);\n      var routeProps = self.props.routeProps;\n      if (routeProps) el.f7RouteProps = routeProps;\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"attrs\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var link = props.link,\n          href = props.href,\n          target = props.target;\n      var hrefComputed = href;\n      if (typeof hrefComputed === 'undefined' && link) hrefComputed = '#';\n      return Utils.extend({\n        href: hrefComputed,\n        target: target\n      }, Mixins.linkRouterAttrs(props), Mixins.linkActionsAttrs(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7MenuDropdownItem;\n}(React.Component);\n\n__reactComponentSetProps(F7MenuDropdownItem, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  text: String,\n  link: Boolean,\n  href: String,\n  target: String,\n  divider: Boolean\n}, Mixins.colorProps, Mixins.linkRouterProps, Mixins.linkActionsProps));\n\nF7MenuDropdownItem.displayName = 'f7-menu-dropdown-item';\nexport default F7MenuDropdownItem;","map":null,"metadata":{},"sourceType":"module"}