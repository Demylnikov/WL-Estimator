{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nvar Messages =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Messages, _Framework7Class);\n\n  function Messages(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Messages);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Messages).call(this, params, [app]));\n\n    var m = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = {\n      autoLayout: true,\n      messages: [],\n      newMessagesFirst: false,\n      scrollMessages: true,\n      scrollMessagesOnEdge: true,\n      firstMessageRule: undefined,\n      lastMessageRule: undefined,\n      tailMessageRule: undefined,\n      sameNameMessageRule: undefined,\n      sameHeaderMessageRule: undefined,\n      sameFooterMessageRule: undefined,\n      sameAvatarMessageRule: undefined,\n      customClassMessageRule: undefined,\n      renderMessage: undefined\n    }; // Extend defaults with modules params\n\n    m.useModulesParams(defaults);\n    m.params = Utils.extend(defaults, params);\n    var $el = $(params.el).eq(0);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, m);\n    if ($el[0].f7Messages) return _possibleConstructorReturn(_this, $el[0].f7Messages);\n    $el[0].f7Messages = m;\n    var $pageContentEl = $el.closest('.page-content').eq(0);\n    Utils.extend(m, {\n      messages: m.params.messages,\n      $el: $el,\n      el: $el[0],\n      $pageContentEl: $pageContentEl,\n      pageContentEl: $pageContentEl[0]\n    }); // Install Modules\n\n    m.useModules(); // Init\n\n    m.init();\n    return _possibleConstructorReturn(_this, m);\n  } // eslint-disable-next-line\n\n\n  _createClass(Messages, [{\n    key: \"getMessageData\",\n    value: function getMessageData(messageEl) {\n      var $messageEl = $(messageEl);\n      var data = {\n        name: $messageEl.find('.message-name').html(),\n        header: $messageEl.find('.message-header').html(),\n        textHeader: $messageEl.find('.message-text-header').html(),\n        textFooter: $messageEl.find('.message-text-footer').html(),\n        footer: $messageEl.find('.message-footer').html(),\n        isTitle: $messageEl.hasClass('messages-title'),\n        type: $messageEl.hasClass('message-sent') ? 'sent' : 'received',\n        text: $messageEl.find('.message-text').html(),\n        image: $messageEl.find('.message-image').html(),\n        imageSrc: $messageEl.find('.message-image img').attr('src'),\n        typing: $messageEl.hasClass('message-typing')\n      };\n\n      if (data.isTitle) {\n        data.text = $messageEl.html();\n      }\n\n      if (data.text && data.textHeader) {\n        data.text = data.text.replace(\"<div class=\\\"message-text-header\\\">\".concat(data.textHeader, \"</div>\"), '');\n      }\n\n      if (data.text && data.textFooter) {\n        data.text = data.text.replace(\"<div class=\\\"message-text-footer\\\">\".concat(data.textFooter, \"</div>\"), '');\n      }\n\n      var avatar = $messageEl.find('.message-avatar').css('background-image');\n      if (avatar === 'none' || avatar === '') avatar = undefined;\n\n      if (avatar && typeof avatar === 'string') {\n        avatar = avatar.replace('url(', '').replace(')', '').replace(/\"/g, '').replace(/'/g, '');\n      } else {\n        avatar = undefined;\n      }\n\n      data.avatar = avatar;\n      return data;\n    }\n  }, {\n    key: \"getMessagesData\",\n    value: function getMessagesData() {\n      var m = this;\n      var data = [];\n      m.$el.find('.message, .messages-title').each(function (index, messageEl) {\n        data.push(m.getMessageData(messageEl));\n      });\n      return data;\n    }\n  }, {\n    key: \"renderMessage\",\n    value: function renderMessage(messageToRender) {\n      var m = this;\n      var message = Utils.extend({\n        type: 'sent',\n        attrs: {}\n      }, messageToRender);\n\n      if (m.params.renderMessage) {\n        return m.params.renderMessage.call(m, message);\n      }\n\n      if (message.isTitle) {\n        return \"<div class=\\\"messages-title\\\">\".concat(message.text, \"</div>\");\n      }\n\n      var attrs = Object.keys(message.attrs).map(function (attr) {\n        return \"\".concat(attr, \"=\\\"\").concat(message.attrs[attr], \"\\\"\");\n      }).join(' ');\n      return \"\\n      <div class=\\\"message message-\".concat(message.type, \" \").concat(message.isTyping ? 'message-typing' : '', \" \").concat(message.cssClass || '', \"\\\" \").concat(attrs, \">\\n        \").concat(message.avatar ? \"\\n        <div class=\\\"message-avatar\\\" style=\\\"background-image:url(\".concat(message.avatar, \")\\\"></div>\\n        \") : '', \"\\n        <div class=\\\"message-content\\\">\\n          \").concat(message.name ? \"<div class=\\\"message-name\\\">\".concat(message.name, \"</div>\") : '', \"\\n          \").concat(message.header ? \"<div class=\\\"message-header\\\">\".concat(message.header, \"</div>\") : '', \"\\n          <div class=\\\"message-bubble\\\">\\n            \").concat(message.textHeader ? \"<div class=\\\"message-text-header\\\">\".concat(message.textHeader, \"</div>\") : '', \"\\n            \").concat(message.image ? \"<div class=\\\"message-image\\\">\".concat(message.image, \"</div>\") : '', \"\\n            \").concat(message.imageSrc && !message.image ? \"<div class=\\\"message-image\\\"><img src=\\\"\".concat(message.imageSrc, \"\\\"></div>\") : '', \"\\n            \").concat(message.text || message.isTyping ? \"<div class=\\\"message-text\\\">\".concat(message.text || '').concat(message.isTyping ? '<div class=\"message-typing-indicator\"><div></div><div></div><div></div></div>' : '', \"</div>\") : '', \"\\n            \").concat(message.textFooter ? \"<div class=\\\"message-text-footer\\\">\".concat(message.textFooter, \"</div>\") : '', \"\\n          </div>\\n          \").concat(message.footer ? \"<div class=\\\"message-footer\\\">\".concat(message.footer, \"</div>\") : '', \"\\n        </div>\\n      </div>\\n    \");\n    }\n  }, {\n    key: \"renderMessages\",\n    value: function renderMessages() {\n      var messagesToRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.messages;\n      var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.params.newMessagesFirst ? 'prepend' : 'append';\n      var m = this;\n      var html = messagesToRender.map(function (message) {\n        return m.renderMessage(message);\n      }).join('');\n      m.$el[method](html);\n    }\n  }, {\n    key: \"isFirstMessage\",\n    value: function isFirstMessage() {\n      var _m$params;\n\n      var m = this;\n      if (m.params.firstMessageRule) return (_m$params = m.params).firstMessageRule.apply(_m$params, arguments);\n      return false;\n    }\n  }, {\n    key: \"isLastMessage\",\n    value: function isLastMessage() {\n      var _m$params2;\n\n      var m = this;\n      if (m.params.lastMessageRule) return (_m$params2 = m.params).lastMessageRule.apply(_m$params2, arguments);\n      return false;\n    }\n  }, {\n    key: \"isTailMessage\",\n    value: function isTailMessage() {\n      var _m$params3;\n\n      var m = this;\n      if (m.params.tailMessageRule) return (_m$params3 = m.params).tailMessageRule.apply(_m$params3, arguments);\n      return false;\n    }\n  }, {\n    key: \"isSameNameMessage\",\n    value: function isSameNameMessage() {\n      var _m$params4;\n\n      var m = this;\n      if (m.params.sameNameMessageRule) return (_m$params4 = m.params).sameNameMessageRule.apply(_m$params4, arguments);\n      return false;\n    }\n  }, {\n    key: \"isSameHeaderMessage\",\n    value: function isSameHeaderMessage() {\n      var _m$params5;\n\n      var m = this;\n      if (m.params.sameHeaderMessageRule) return (_m$params5 = m.params).sameHeaderMessageRule.apply(_m$params5, arguments);\n      return false;\n    }\n  }, {\n    key: \"isSameFooterMessage\",\n    value: function isSameFooterMessage() {\n      var _m$params6;\n\n      var m = this;\n      if (m.params.sameFooterMessageRule) return (_m$params6 = m.params).sameFooterMessageRule.apply(_m$params6, arguments);\n      return false;\n    }\n  }, {\n    key: \"isSameAvatarMessage\",\n    value: function isSameAvatarMessage() {\n      var _m$params7;\n\n      var m = this;\n      if (m.params.sameAvatarMessageRule) return (_m$params7 = m.params).sameAvatarMessageRule.apply(_m$params7, arguments);\n      return false;\n    }\n  }, {\n    key: \"isCustomClassMessage\",\n    value: function isCustomClassMessage() {\n      var _m$params8;\n\n      var m = this;\n      if (m.params.customClassMessageRule) return (_m$params8 = m.params).customClassMessageRule.apply(_m$params8, arguments);\n      return undefined;\n    }\n  }, {\n    key: \"layout\",\n    value: function layout() {\n      var m = this;\n      m.$el.find('.message, .messages-title').each(function (index, messageEl) {\n        var $messageEl = $(messageEl);\n\n        if (!m.messages) {\n          m.messages = m.getMessagesData();\n        }\n\n        var classes = [];\n        var message = m.messages[index];\n        var previousMessage = m.messages[index - 1];\n        var nextMessage = m.messages[index + 1];\n\n        if (m.isFirstMessage(message, previousMessage, nextMessage)) {\n          classes.push('message-first');\n        }\n\n        if (m.isLastMessage(message, previousMessage, nextMessage)) {\n          classes.push('message-last');\n        }\n\n        if (m.isTailMessage(message, previousMessage, nextMessage)) {\n          classes.push('message-tail');\n        }\n\n        if (m.isSameNameMessage(message, previousMessage, nextMessage)) {\n          classes.push('message-same-name');\n        }\n\n        if (m.isSameHeaderMessage(message, previousMessage, nextMessage)) {\n          classes.push('message-same-header');\n        }\n\n        if (m.isSameFooterMessage(message, previousMessage, nextMessage)) {\n          classes.push('message-same-footer');\n        }\n\n        if (m.isSameAvatarMessage(message, previousMessage, nextMessage)) {\n          classes.push('message-same-avatar');\n        }\n\n        var customMessageClasses = m.isCustomClassMessage(message, previousMessage, nextMessage);\n\n        if (customMessageClasses && customMessageClasses.length) {\n          if (typeof customMessageClasses === 'string') {\n            customMessageClasses = customMessageClasses.split(' ');\n          }\n\n          customMessageClasses.forEach(function (customClass) {\n            classes.push(customClass);\n          });\n        }\n\n        $messageEl.removeClass('message-first message-last message-tail message-same-name message-same-header message-same-footer message-same-avatar');\n        classes.forEach(function (className) {\n          $messageEl.addClass(className);\n        });\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var m = this;\n      m.messages = [];\n      m.$el.html('');\n    }\n  }, {\n    key: \"removeMessage\",\n    value: function removeMessage(messageToRemove) {\n      var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var m = this; // Index or El\n\n      var index;\n      var $el;\n\n      if (typeof messageToRemove === 'number') {\n        index = messageToRemove;\n        $el = m.$el.find('.message, .messages-title').eq(index);\n      } else if (m.messages && m.messages.indexOf(messageToRemove) >= 0) {\n        index = m.messages.indexOf(messageToRemove);\n        $el = m.$el.children().eq(index);\n      } else {\n        $el = $(messageToRemove);\n        index = $el.index();\n      }\n\n      if ($el.length === 0) {\n        return m;\n      }\n\n      $el.remove();\n      m.messages.splice(index, 1);\n      if (m.params.autoLayout && layout) m.layout();\n      return m;\n    }\n  }, {\n    key: \"removeMessages\",\n    value: function removeMessages(messagesToRemove) {\n      var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var m = this;\n\n      if (Array.isArray(messagesToRemove)) {\n        var messagesToRemoveEls = [];\n        messagesToRemove.forEach(function (messageToRemoveIndex) {\n          messagesToRemoveEls.push(m.$el.find('.message, .messages-title').eq(messageToRemoveIndex));\n        });\n        messagesToRemoveEls.forEach(function (messageToRemove) {\n          m.removeMessage(messageToRemove, false);\n        });\n      } else {\n        $(messagesToRemove).each(function (index, messageToRemove) {\n          m.removeMessage(messageToRemove, false);\n        });\n      }\n\n      if (m.params.autoLayout && layout) m.layout();\n      return m;\n    }\n  }, {\n    key: \"addMessage\",\n    value: function addMessage() {\n      var m = this;\n      var messageToAdd;\n      var animate;\n      var method;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (typeof args[1] === 'boolean') {\n        messageToAdd = args[0];\n        animate = args[1];\n        method = args[2];\n      } else {\n        messageToAdd = args[0];\n        method = args[1];\n        animate = args[2];\n      }\n\n      if (typeof animate === 'undefined') {\n        animate = true;\n      }\n\n      if (typeof method === 'undefined') {\n        method = m.params.newMessagesFirst ? 'prepend' : 'append';\n      }\n\n      return m.addMessages([messageToAdd], animate, method);\n    }\n  }, {\n    key: \"addMessages\",\n    value: function addMessages() {\n      var m = this;\n      var messagesToAdd;\n      var animate;\n      var method;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (typeof args[1] === 'boolean') {\n        messagesToAdd = args[0];\n        animate = args[1];\n        method = args[2];\n      } else {\n        messagesToAdd = args[0];\n        method = args[1];\n        animate = args[2];\n      }\n\n      if (typeof animate === 'undefined') {\n        animate = true;\n      }\n\n      if (typeof method === 'undefined') {\n        method = m.params.newMessagesFirst ? 'prepend' : 'append';\n      } // Define scroll positions before new messages added\n\n\n      var scrollHeightBefore = m.pageContentEl.scrollHeight;\n      var heightBefore = m.pageContentEl.offsetHeight;\n      var scrollBefore = m.pageContentEl.scrollTop; // Add message to DOM and data\n\n      var messagesHTML = '';\n      var typingMessage = m.messages.filter(function (el) {\n        return el.isTyping;\n      })[0];\n      messagesToAdd.forEach(function (messageToAdd) {\n        if (typingMessage) {\n          if (method === 'append') {\n            m.messages.splice(m.messages.indexOf(typingMessage), 0, messageToAdd);\n          } else {\n            m.messages.splice(m.messages.indexOf(typingMessage) + 1, 0, messageToAdd);\n          }\n        } else {\n          m.messages[method === 'append' ? 'push' : 'unshift'](messageToAdd);\n        }\n\n        messagesHTML += m.renderMessage(messageToAdd);\n      });\n      var $messagesEls = $(messagesHTML);\n\n      if (animate) {\n        if (method === 'append' && !m.params.newMessagesFirst) {\n          $messagesEls.addClass('message-appear-from-bottom');\n        }\n\n        if (method === 'prepend' && m.params.newMessagesFirst) {\n          $messagesEls.addClass('message-appear-from-top');\n        }\n      }\n\n      if (typingMessage) {\n        if (method === 'append') {\n          $messagesEls.insertBefore(m.$el.find('.message-typing'));\n        } else {\n          $messagesEls.insertAfter(m.$el.find('.message-typing'));\n        }\n      } else {\n        m.$el[method]($messagesEls);\n      } // Layout\n\n\n      if (m.params.autoLayout) m.layout();\n\n      if (method === 'prepend' && !typingMessage) {\n        m.pageContentEl.scrollTop = scrollBefore + (m.pageContentEl.scrollHeight - scrollHeightBefore);\n      }\n\n      if (m.params.scrollMessages && (method === 'append' && !m.params.newMessagesFirst || method === 'prepend' && m.params.newMessagesFirst && !typingMessage)) {\n        if (m.params.scrollMessagesOnEdge) {\n          var onEdge = false;\n\n          if (m.params.newMessagesFirst && scrollBefore === 0) {\n            onEdge = true;\n          }\n\n          if (!m.params.newMessagesFirst && scrollBefore - (scrollHeightBefore - heightBefore) >= -10) {\n            onEdge = true;\n          }\n\n          if (onEdge) m.scroll(animate ? undefined : 0);\n        } else {\n          m.scroll(animate ? undefined : 0);\n        }\n      }\n\n      return m;\n    }\n  }, {\n    key: \"showTyping\",\n    value: function showTyping() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var m = this;\n      var typingMessage = m.messages.filter(function (el) {\n        return el.isTyping;\n      })[0];\n\n      if (typingMessage) {\n        m.removeMessage(m.messages.indexOf(typingMessage));\n      }\n\n      m.addMessage(Utils.extend({\n        type: 'received',\n        isTyping: true\n      }, message));\n      return m;\n    }\n  }, {\n    key: \"hideTyping\",\n    value: function hideTyping() {\n      var m = this;\n      var typingMessageIndex;\n      var typingFound;\n      m.messages.forEach(function (message, index) {\n        if (message.isTyping) typingMessageIndex = index;\n      });\n\n      if (typeof typingMessageIndex !== 'undefined') {\n        if (m.$el.find('.message').eq(typingMessageIndex).hasClass('message-typing')) {\n          typingFound = true;\n          m.removeMessage(typingMessageIndex);\n        }\n      }\n\n      if (!typingFound) {\n        var $typingMessageEl = m.$el.find('.message-typing');\n\n        if ($typingMessageEl.length) {\n          m.removeMessage($typingMessageEl);\n        }\n      }\n\n      return m;\n    }\n  }, {\n    key: \"scroll\",\n    value: function scroll() {\n      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n      var scrollTop = arguments.length > 1 ? arguments[1] : undefined;\n      var m = this;\n      var currentScroll = m.pageContentEl.scrollTop;\n      var newScrollTop;\n      if (typeof scrollTop !== 'undefined') newScrollTop = scrollTop;else {\n        newScrollTop = m.params.newMessagesFirst ? 0 : m.pageContentEl.scrollHeight - m.pageContentEl.offsetHeight;\n        if (newScrollTop === currentScroll) return m;\n      }\n      m.$pageContentEl.scrollTop(newScrollTop, duration);\n      return m;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var m = this;\n\n      if (!m.messages || m.messages.length === 0) {\n        m.messages = m.getMessagesData();\n      }\n\n      if (m.params.messages && m.params.messages.length) {\n        m.renderMessages();\n      }\n\n      if (m.params.autoLayout) m.layout();\n      if (m.params.scrollMessages) m.scroll(0);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var m = this;\n      m.emit('local::beforeDestroy messagesBeforeDestroy', m);\n      m.$el.trigger('messages:beforedestroy', m);\n\n      if (m.$el[0]) {\n        m.$el[0].f7Messages = null;\n        delete m.$el[0].f7Messages;\n      }\n\n      Utils.deleteProps(m);\n    }\n  }]);\n\n  return Messages;\n}(Framework7Class);\n\nexport default Messages;","map":null,"metadata":{},"sourceType":"module"}