{"ast":null,"code":"import _defineProperty from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport Support from '../../utils/support';\n\nvar Range =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Range, _Framework7Class);\n\n  function Range(app, params) {\n    var _this;\n\n    _classCallCheck(this, Range);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Range).call(this, params, [app]));\n\n    var range = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = {\n      el: null,\n      inputEl: null,\n      dual: false,\n      step: 1,\n      label: false,\n      min: 0,\n      max: 100,\n      value: 0,\n      draggableBar: true,\n      vertical: false,\n      verticalReversed: false,\n      formatLabel: null,\n      scale: false,\n      scaleSteps: 5,\n      scaleSubSteps: 0,\n      formatScaleLabel: null\n    }; // Extend defaults with modules params\n\n    range.useModulesParams(defaults);\n    range.params = Utils.extend(defaults, params);\n    var el = range.params.el;\n    if (!el) return _possibleConstructorReturn(_this, range);\n    var $el = $(el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, range);\n    if ($el[0].f7Range) return _possibleConstructorReturn(_this, $el[0].f7Range);\n    var dataset = $el.dataset();\n    'step min max value scaleSteps scaleSubSteps'.split(' ').forEach(function (paramName) {\n      if (typeof params[paramName] === 'undefined' && typeof dataset[paramName] !== 'undefined') {\n        range.params[paramName] = parseFloat(dataset[paramName]);\n      }\n    });\n    'dual label vertical verticalReversed scale'.split(' ').forEach(function (paramName) {\n      if (typeof params[paramName] === 'undefined' && typeof dataset[paramName] !== 'undefined') {\n        range.params[paramName] = dataset[paramName];\n      }\n    });\n\n    if (!range.params.value) {\n      if (typeof dataset.value !== 'undefined') range.params.value = dataset.value;\n\n      if (typeof dataset.valueLeft !== 'undefined' && typeof dataset.valueRight !== 'undefined') {\n        range.params.value = [parseFloat(dataset.valueLeft), parseFloat(dataset.valueRight)];\n      }\n    }\n\n    var $inputEl;\n\n    if (!range.params.dual) {\n      if (range.params.inputEl) {\n        $inputEl = $(range.params.inputEl);\n      } else if ($el.find('input[type=\"range\"]').length) {\n        $inputEl = $el.find('input[type=\"range\"]').eq(0);\n      }\n    }\n\n    var _range$params = range.params,\n        dual = _range$params.dual,\n        step = _range$params.step,\n        label = _range$params.label,\n        min = _range$params.min,\n        max = _range$params.max,\n        value = _range$params.value,\n        vertical = _range$params.vertical,\n        verticalReversed = _range$params.verticalReversed,\n        scale = _range$params.scale,\n        scaleSteps = _range$params.scaleSteps,\n        scaleSubSteps = _range$params.scaleSubSteps;\n    Utils.extend(range, {\n      app: app,\n      $el: $el,\n      el: $el[0],\n      $inputEl: $inputEl,\n      inputEl: $inputEl ? $inputEl[0] : undefined,\n      dual: dual,\n      step: step,\n      label: label,\n      min: min,\n      max: max,\n      value: value,\n      previousValue: value,\n      vertical: vertical,\n      verticalReversed: verticalReversed,\n      scale: scale,\n      scaleSteps: scaleSteps,\n      scaleSubSteps: scaleSubSteps\n    });\n\n    if ($inputEl) {\n      'step min max'.split(' ').forEach(function (paramName) {\n        if (!params[paramName] && $inputEl.attr(paramName)) {\n          range.params[paramName] = parseFloat($inputEl.attr(paramName));\n          range[paramName] = parseFloat($inputEl.attr(paramName));\n        }\n      });\n\n      if (typeof $inputEl.val() !== 'undefined') {\n        range.params.value = parseFloat($inputEl.val());\n        range.value = parseFloat($inputEl.val());\n      }\n    } // Dual\n\n\n    if (range.dual) {\n      $el.addClass('range-slider-dual');\n    }\n\n    if (range.label) {\n      $el.addClass('range-slider-label');\n    } // Vertical\n\n\n    if (range.vertical) {\n      $el.addClass('range-slider-vertical');\n\n      if (range.verticalReversed) {\n        $el.addClass('range-slider-vertical-reversed');\n      }\n    } else {\n      $el.addClass('range-slider-horizontal');\n    } // Check for layout\n\n\n    var $barEl = $('<div class=\"range-bar\"></div>');\n    var $barActiveEl = $('<div class=\"range-bar-active\"></div>');\n    $barEl.append($barActiveEl); // Create Knobs\n\n    var knobHTML = \"\\n      <div class=\\\"range-knob-wrap\\\">\\n        <div class=\\\"range-knob\\\"></div>\\n        \".concat(range.label ? '<div class=\"range-knob-label\"></div>' : '', \"\\n      </div>\\n    \");\n    var knobs = [$(knobHTML)];\n\n    if (range.dual) {\n      knobs.push($(knobHTML));\n    }\n\n    $el.append($barEl);\n    knobs.forEach(function ($knobEl) {\n      $el.append($knobEl);\n    }); // Labels\n\n    var labels = [];\n\n    if (range.label) {\n      labels.push(knobs[0].find('.range-knob-label'));\n\n      if (range.dual) {\n        labels.push(knobs[1].find('.range-knob-label'));\n      }\n    } // Scale\n\n\n    var $scaleEl;\n\n    if (range.scale && range.scaleSteps > 1) {\n      $scaleEl = $(\"\\n        <div class=\\\"range-scale\\\">\\n          \".concat(range.renderScale(), \"\\n        </div>\\n      \"));\n      $el.append($scaleEl);\n    }\n\n    Utils.extend(range, {\n      knobs: knobs,\n      labels: labels,\n      $barEl: $barEl,\n      $barActiveEl: $barActiveEl,\n      $scaleEl: $scaleEl\n    });\n    $el[0].f7Range = range; // Touch Events\n\n    var isTouched;\n    var touchesStart = {};\n    var isScrolling;\n    var rangeOffset;\n    var rangeOffsetLeft;\n    var rangeOffsetTop;\n    var $touchedKnobEl;\n    var dualValueIndex;\n    var valueChangedByTouch;\n\n    function onTouchChange() {\n      valueChangedByTouch = true;\n    }\n\n    function handleTouchStart(e) {\n      if (isTouched) return;\n\n      if (!range.params.draggableBar) {\n        if ($(e.target).closest('.range-knob').length === 0) {\n          return;\n        }\n      }\n\n      valueChangedByTouch = false;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      isTouched = true;\n      isScrolling = undefined;\n      rangeOffset = $el.offset();\n      rangeOffsetLeft = rangeOffset.left;\n      rangeOffsetTop = rangeOffset.top;\n      var progress;\n\n      if (range.vertical) {\n        progress = (touchesStart.y - rangeOffsetTop) / range.rangeHeight;\n        if (!range.verticalReversed) progress = 1 - progress;\n      } else if (range.app.rtl) {\n        progress = (rangeOffsetLeft + range.rangeWidth - touchesStart.x) / range.rangeWidth;\n      } else {\n        progress = (touchesStart.x - rangeOffsetLeft) / range.rangeWidth;\n      }\n\n      var newValue = progress * (range.max - range.min) + range.min;\n\n      if (range.dual) {\n        if (Math.abs(range.value[0] - newValue) < Math.abs(range.value[1] - newValue)) {\n          dualValueIndex = 0;\n          $touchedKnobEl = range.knobs[0];\n          newValue = [newValue, range.value[1]];\n        } else {\n          dualValueIndex = 1;\n          $touchedKnobEl = range.knobs[1];\n          newValue = [range.value[0], newValue];\n        }\n      } else {\n        $touchedKnobEl = range.knobs[0];\n        newValue = progress * (range.max - range.min) + range.min;\n      }\n\n      Utils.nextTick(function () {\n        if (isTouched) $touchedKnobEl.addClass('range-knob-active-state');\n      }, 70);\n      range.on('change', onTouchChange);\n      range.setValue(newValue, true);\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (typeof isScrolling === 'undefined') {\n        if (range.vertical) {\n          isScrolling = !(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n        } else {\n          isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n        }\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      e.preventDefault();\n      var progress;\n\n      if (range.vertical) {\n        progress = (pageY - rangeOffsetTop) / range.rangeHeight;\n        if (!range.verticalReversed) progress = 1 - progress;\n      } else if (range.app.rtl) {\n        progress = (rangeOffsetLeft + range.rangeWidth - pageX) / range.rangeWidth;\n      } else {\n        progress = (pageX - rangeOffsetLeft) / range.rangeWidth;\n      }\n\n      var newValue = progress * (range.max - range.min) + range.min;\n\n      if (range.dual) {\n        var leftValue;\n        var rightValue;\n\n        if (dualValueIndex === 0) {\n          leftValue = newValue;\n          rightValue = range.value[1];\n\n          if (leftValue > rightValue) {\n            rightValue = leftValue;\n          }\n        } else {\n          leftValue = range.value[0];\n          rightValue = newValue;\n\n          if (rightValue < leftValue) {\n            leftValue = rightValue;\n          }\n        }\n\n        newValue = [leftValue, rightValue];\n      }\n\n      range.setValue(newValue, true);\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched) {\n        if (isScrolling) $touchedKnobEl.removeClass('range-knob-active-state');\n        isTouched = false;\n        return;\n      }\n\n      range.off('change', onTouchChange);\n      isTouched = false;\n      $touchedKnobEl.removeClass('range-knob-active-state');\n\n      if (valueChangedByTouch && range.$inputEl && !range.dual) {\n        range.$inputEl.trigger('change');\n      }\n\n      valueChangedByTouch = false;\n\n      if (typeof range.previousValue !== 'undefined') {\n        if (range.dual && (range.previousValue[0] !== range.value[0] || range.previousValue[1] !== range.value[1]) || !range.dual && range.previousValue !== range.value) {\n          range.$el.trigger('range:changed', range, range.value);\n          range.emit('local::changed rangeChanged', range, range.value);\n        }\n      }\n    }\n\n    function handleResize() {\n      range.calcSize();\n      range.layout();\n    }\n\n    var parentModals;\n    var parentPanel;\n    var parentPage;\n\n    range.attachEvents = function attachEvents() {\n      var passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      range.$el.on(app.touchEvents.start, handleTouchStart, passive);\n      app.on('touchmove', handleTouchMove);\n      app.on('touchend:passive', handleTouchEnd);\n      app.on('tabShow', handleResize);\n      app.on('resize', handleResize);\n      parentModals = range.$el.parents('.sheet-modal, .actions-modal, .popup, .popover, .login-screen, .dialog, .toast');\n      parentModals.on('modal:open', handleResize);\n      parentPanel = range.$el.parents('.panel');\n      parentPanel.on('panel:open', handleResize);\n      parentPage = range.$el.parents('.page').eq(0);\n      parentPage.on('page:reinit', handleResize);\n    };\n\n    range.detachEvents = function detachEvents() {\n      var passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      range.$el.off(app.touchEvents.start, handleTouchStart, passive);\n      app.off('touchmove', handleTouchMove);\n      app.off('touchend:passive', handleTouchEnd);\n      app.off('tabShow', handleResize);\n      app.off('resize', handleResize);\n\n      if (parentModals) {\n        parentModals.off('modal:open', handleResize);\n      }\n\n      if (parentPanel) {\n        parentPanel.off('panel:open', handleResize);\n      }\n\n      if (parentPage) {\n        parentPage.off('page:reinit', handleResize);\n      }\n\n      parentModals = null;\n      parentPanel = null;\n      parentPage = null;\n    }; // Install Modules\n\n\n    range.useModules(); // Init\n\n    range.init();\n    return _possibleConstructorReturn(_this, range);\n  }\n\n  _createClass(Range, [{\n    key: \"calcSize\",\n    value: function calcSize() {\n      var range = this;\n\n      if (range.vertical) {\n        var height = range.$el.outerHeight();\n        if (height === 0) return;\n        range.rangeHeight = height;\n        range.knobHeight = range.knobs[0].outerHeight();\n      } else {\n        var width = range.$el.outerWidth();\n        if (width === 0) return;\n        range.rangeWidth = width;\n        range.knobWidth = range.knobs[0].outerWidth();\n      }\n    }\n  }, {\n    key: \"layout\",\n    value: function layout() {\n      var range = this;\n      var app = range.app,\n          knobWidth = range.knobWidth,\n          knobHeight = range.knobHeight,\n          rangeWidth = range.rangeWidth,\n          rangeHeight = range.rangeHeight,\n          min = range.min,\n          max = range.max,\n          knobs = range.knobs,\n          $barActiveEl = range.$barActiveEl,\n          value = range.value,\n          label = range.label,\n          labels = range.labels,\n          vertical = range.vertical,\n          verticalReversed = range.verticalReversed;\n      var knobSize = vertical ? knobHeight : knobWidth;\n      var rangeSize = vertical ? rangeHeight : rangeWidth; // eslint-disable-next-line\n\n      var positionProperty = vertical ? verticalReversed ? 'top' : 'bottom' : app.rtl ? 'right' : 'left';\n\n      if (range.dual) {\n        var _$barActiveEl$css;\n\n        var progress = [(value[0] - min) / (max - min), (value[1] - min) / (max - min)];\n        $barActiveEl.css((_$barActiveEl$css = {}, _defineProperty(_$barActiveEl$css, positionProperty, \"\".concat(progress[0] * 100, \"%\")), _defineProperty(_$barActiveEl$css, vertical ? 'height' : 'width', \"\".concat((progress[1] - progress[0]) * 100, \"%\")), _$barActiveEl$css));\n        knobs.forEach(function ($knobEl, knobIndex) {\n          var startPos = rangeSize * progress[knobIndex];\n\n          if (app.theme === 'ios') {\n            var realStartPos = rangeSize * progress[knobIndex] - knobSize / 2;\n            if (realStartPos < 0) startPos = knobSize / 2;\n            if (realStartPos + knobSize > rangeSize) startPos = rangeSize - knobSize / 2;\n          }\n\n          $knobEl.css(positionProperty, \"\".concat(startPos, \"px\"));\n          if (label) labels[knobIndex].text(range.formatLabel(value[knobIndex], labels[knobIndex][0]));\n        });\n      } else {\n        var _progress = (value - min) / (max - min);\n\n        $barActiveEl.css(vertical ? 'height' : 'width', \"\".concat(_progress * 100, \"%\"));\n        var startPos = rangeSize * _progress;\n\n        if (app.theme === 'ios') {\n          var realStartPos = rangeSize * _progress - knobSize / 2;\n          if (realStartPos < 0) startPos = knobSize / 2;\n          if (realStartPos + knobSize > rangeSize) startPos = rangeSize - knobSize / 2;\n        }\n\n        knobs[0].css(positionProperty, \"\".concat(startPos, \"px\"));\n        if (label) labels[0].text(range.formatLabel(value, labels[0][0]));\n      }\n\n      if (range.dual && value.indexOf(min) >= 0 || !range.dual && value === min) {\n        range.$el.addClass('range-slider-min');\n      } else {\n        range.$el.removeClass('range-slider-min');\n      }\n\n      if (range.dual && value.indexOf(max) >= 0 || !range.dual && value === max) {\n        range.$el.addClass('range-slider-max');\n      } else {\n        range.$el.removeClass('range-slider-max');\n      }\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(newValue, byTouchMove) {\n      var range = this;\n      var step = range.step,\n          min = range.min,\n          max = range.max;\n      var valueChanged;\n      var oldValue;\n\n      if (range.dual) {\n        oldValue = [range.value[0], range.value[1]];\n        var newValues = newValue;\n        if (!Array.isArray(newValues)) newValues = [newValue, newValue];\n\n        if (newValue[0] > newValue[1]) {\n          newValues = [newValues[0], newValues[0]];\n        }\n\n        newValues = newValues.map(function (value) {\n          return Math.max(Math.min(Math.round(value / step) * step, max), min);\n        });\n\n        if (newValues[0] === range.value[0] && newValues[1] === range.value[1]) {\n          return range;\n        }\n\n        newValues.forEach(function (value, valueIndex) {\n          range.value[valueIndex] = value;\n        });\n        valueChanged = oldValue[0] !== newValues[0] || oldValue[1] !== newValues[1];\n        range.layout();\n      } else {\n        oldValue = range.value;\n        var value = Math.max(Math.min(Math.round(newValue / step) * step, max), min);\n        range.value = value;\n        range.layout();\n        valueChanged = oldValue !== value;\n      }\n\n      if (valueChanged) {\n        range.previousValue = oldValue;\n      } // Events\n\n\n      if (!valueChanged) return range;\n      range.$el.trigger('range:change', range, range.value);\n\n      if (range.$inputEl && !range.dual) {\n        range.$inputEl.val(range.value);\n\n        if (!byTouchMove) {\n          range.$inputEl.trigger('input change');\n        } else {\n          range.$inputEl.trigger('input');\n        }\n      }\n\n      if (!byTouchMove) {\n        range.$el.trigger('range:changed', range, range.value);\n        range.emit('local::changed rangeChanged', range, range.value);\n      }\n\n      range.emit('local::change rangeChange', range, range.value);\n      return range;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n  }, {\n    key: \"formatLabel\",\n    value: function formatLabel(value, labelEl) {\n      var range = this;\n      if (range.params.formatLabel) return range.params.formatLabel.call(range, value, labelEl);\n      return value;\n    }\n  }, {\n    key: \"formatScaleLabel\",\n    value: function formatScaleLabel(value) {\n      var range = this;\n      if (range.params.formatScaleLabel) return range.params.formatScaleLabel.call(range, value);\n      return value;\n    }\n  }, {\n    key: \"renderScale\",\n    value: function renderScale() {\n      var range = this;\n      var app = range.app,\n          verticalReversed = range.verticalReversed,\n          vertical = range.vertical; // eslint-disable-next-line\n\n      var positionProperty = vertical ? verticalReversed ? 'top' : 'bottom' : app.rtl ? 'right' : 'left';\n      var html = '';\n      Array.from({\n        length: range.scaleSteps + 1\n      }).forEach(function (scaleEl, index) {\n        var scaleStepValue = (range.max - range.min) / range.scaleSteps;\n        var scaleValue = range.min + scaleStepValue * index;\n        var progress = (scaleValue - range.min) / (range.max - range.min);\n        html += \"<div class=\\\"range-scale-step\\\" style=\\\"\".concat(positionProperty, \": \").concat(progress * 100, \"%\\\">\").concat(range.formatScaleLabel(scaleValue), \"</div>\");\n\n        if (range.scaleSubSteps && range.scaleSubSteps > 1 && index < range.scaleSteps) {\n          Array.from({\n            length: range.scaleSubSteps - 1\n          }).forEach(function (subStepEl, subIndex) {\n            var subStep = scaleStepValue / range.scaleSubSteps;\n            var scaleSubValue = scaleValue + subStep * (subIndex + 1);\n            var subProgress = (scaleSubValue - range.min) / (range.max - range.min);\n            html += \"<div class=\\\"range-scale-step range-scale-substep\\\" style=\\\"\".concat(positionProperty, \": \").concat(subProgress * 100, \"%\\\"></div>\");\n          });\n        }\n      });\n      return html;\n    }\n  }, {\n    key: \"updateScale\",\n    value: function updateScale() {\n      var range = this;\n\n      if (!range.scale || range.scaleSteps < 2) {\n        if (range.$scaleEl) range.$scaleEl.remove();\n        delete range.$scaleEl;\n        return;\n      }\n\n      if (!range.$scaleEl) {\n        range.$scaleEl = $('<div class=\"range-scale\"></div>');\n        range.$el.append(range.$scaleEl);\n      }\n\n      range.$scaleEl.html(range.renderScale());\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var range = this;\n      range.calcSize();\n      range.layout();\n      range.attachEvents();\n      return range;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var range = this;\n      range.$el.trigger('range:beforedestroy', range);\n      range.emit('local::beforeDestroy rangeBeforeDestroy', range);\n      delete range.$el[0].f7Range;\n      range.detachEvents();\n      Utils.deleteProps(range);\n      range = null;\n    }\n  }]);\n\n  return Range;\n}(Framework7Class);\n\nexport default Range;","map":null,"metadata":{},"sourceType":"module"}