{"ast":null,"code":"import _defineProperty from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { window, document } from 'ssr-window';\nimport $ from 'dom7';\nimport Utils from './utils';\nvar History = {\n  queue: [],\n  clearQueue: function clearQueue() {\n    if (History.queue.length === 0) return;\n    var currentQueue = History.queue.shift();\n    currentQueue();\n  },\n  routerQueue: [],\n  clearRouterQueue: function clearRouterQueue() {\n    if (History.routerQueue.length === 0) return;\n    var currentQueue = History.routerQueue.pop();\n    var router = currentQueue.router,\n        stateUrl = currentQueue.stateUrl,\n        action = currentQueue.action;\n    var animate = router.params.animate;\n    if (router.params.pushStateAnimate === false) animate = false;\n\n    if (action === 'back') {\n      router.back({\n        animate: animate,\n        pushState: false\n      });\n    }\n\n    if (action === 'load') {\n      router.navigate(stateUrl, {\n        animate: animate,\n        pushState: false\n      });\n    }\n  },\n  handle: function handle(e) {\n    if (History.blockPopstate) return;\n    var app = this; // const mainView = app.views.main;\n\n    var state = e.state;\n    History.previousState = History.state;\n    History.state = state;\n    History.allowChange = true;\n    History.clearQueue();\n    state = History.state;\n    if (!state) state = {};\n    app.views.forEach(function (view) {\n      var router = view.router;\n      var viewState = state[view.id];\n\n      if (!viewState && view.params.pushState) {\n        viewState = {\n          url: view.router.history[0]\n        };\n      }\n\n      if (!viewState) return;\n      var stateUrl = viewState.url || undefined;\n      var animate = router.params.animate;\n      if (router.params.pushStateAnimate === false) animate = false;\n\n      if (stateUrl !== router.url) {\n        if (router.history.indexOf(stateUrl) >= 0) {\n          // Go Back\n          if (router.allowPageChange) {\n            router.back({\n              animate: animate,\n              pushState: false\n            });\n          } else {\n            History.routerQueue.push({\n              action: 'back',\n              router: router\n            });\n          }\n        } else if (router.allowPageChange) {\n          // Load page\n          router.navigate(stateUrl, {\n            animate: animate,\n            pushState: false\n          });\n        } else {\n          History.routerQueue.unshift({\n            action: 'load',\n            stateUrl: stateUrl,\n            router: router\n          });\n        }\n      }\n    });\n  },\n  initViewState: function initViewState(viewId, viewState) {\n    var newState = Utils.extend({}, History.state || {}, _defineProperty({}, viewId, viewState));\n    History.state = newState;\n    window.history.replaceState(newState, '');\n  },\n  push: function push(viewId, viewState, url) {\n    if (!History.allowChange) {\n      History.queue.push(function () {\n        History.push(viewId, viewState, url);\n      });\n      return;\n    }\n\n    History.previousState = History.state;\n    var newState = Utils.extend({}, History.previousState || {}, _defineProperty({}, viewId, viewState));\n    History.state = newState;\n    window.history.pushState(newState, '', url);\n  },\n  replace: function replace(viewId, viewState, url) {\n    if (!History.allowChange) {\n      History.queue.push(function () {\n        History.replace(viewId, viewState, url);\n      });\n      return;\n    }\n\n    History.previousState = History.state;\n    var newState = Utils.extend({}, History.previousState || {}, _defineProperty({}, viewId, viewState));\n    History.state = newState;\n    window.history.replaceState(newState, '', url);\n  },\n  go: function go(index) {\n    History.allowChange = false;\n    window.history.go(index);\n  },\n  back: function back() {\n    History.allowChange = false;\n    window.history.back();\n  },\n  allowChange: true,\n  previousState: {},\n  state: window.history.state,\n  blockPopstate: true,\n  init: function init(app) {\n    $(window).on('load', function () {\n      setTimeout(function () {\n        History.blockPopstate = false;\n      }, 0);\n    });\n\n    if (document.readyState && document.readyState === 'complete') {\n      History.blockPopstate = false;\n    }\n\n    $(window).on('popstate', History.handle.bind(app));\n  }\n};\nexport default History;","map":null,"metadata":{},"sourceType":"module"}