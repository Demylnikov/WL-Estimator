{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7Icon from './icon';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7MenuItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7MenuItem, _React$Component);\n\n  function F7MenuItem(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7MenuItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7MenuItem).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_assertThisInitialized(_this)), ['onClick', 'onOpened', 'onClosed']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7MenuItem, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      this.dispatchEvent('click', e);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(e) {\n      this.dispatchEvent('menuOpened menu:opened', e);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(e) {\n      this.dispatchEvent('menuClosed menu:closed', e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          className = props.className,\n          style = props.style,\n          link = props.link,\n          href = props.href,\n          text = props.text,\n          dropdown = props.dropdown,\n          iconOnly = props.iconOnly,\n          icon = props.icon,\n          iconColor = props.iconColor,\n          iconSize = props.iconSize,\n          iconMaterial = props.iconMaterial,\n          iconIon = props.iconIon,\n          iconFa = props.iconFa,\n          iconF7 = props.iconF7,\n          iconIfMd = props.iconIfMd,\n          iconIfIos = props.iconIfIos,\n          iconMd = props.iconMd,\n          iconIos = props.iconIos;\n      var slots = self.slots;\n      var iconEl;\n      var iconOnlyComputed;\n      var mdThemeIcon = iconIfMd || iconMd;\n      var iosThemeIcon = iconIfIos || iconIos;\n\n      if (icon || iconMaterial || iconIon || iconFa || iconF7 || mdThemeIcon || iosThemeIcon) {\n        iconEl = React.createElement(F7Icon, {\n          material: iconMaterial,\n          f7: iconF7,\n          fa: iconFa,\n          ion: iconIon,\n          icon: icon,\n          md: mdThemeIcon,\n          ios: iosThemeIcon,\n          color: iconColor,\n          size: iconSize\n        });\n      }\n\n      if (iconOnly || !text && slots.text && slots.text.length === 0 || !text && !slots.text) {\n        iconOnlyComputed = true;\n      } else {\n        iconOnlyComputed = false;\n      }\n\n      var isLink = link || href || href === '';\n      var Tag = isLink ? 'a' : 'div';\n      var isDropdown = dropdown || dropdown === '';\n      var classes = Utils.classNames({\n        'menu-item': true,\n        'menu-item-dropdown': isDropdown,\n        'icon-only': iconOnlyComputed\n      }, className, Mixins.colorClasses(props), Mixins.linkRouterClasses(props), Mixins.linkActionsClasses(props));\n      return React.createElement(Tag, Object.assign({\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        className: classes,\n        id: id,\n        style: style\n      }, self.attrs), (text || slots.text && slots.text.length || iconEl) && React.createElement('div', {\n        className: 'menu-item-content'\n      }, text, iconEl, this.slots['text']), this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      el.removeEventListener('click', self.onClick);\n      el.removeEventListener('menu:opened', self.onOpened);\n      el.removeEventListener('menu:closed', self.onClosed);\n      delete el.f7RouteProps;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      var routeProps = self.props.routeProps;\n      if (routeProps) el.f7RouteProps = routeProps;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      el.addEventListener('click', self.onClick);\n      el.addEventListener('menu:opened', self.onOpened);\n      el.addEventListener('menu:closed', self.onClosed);\n      var routeProps = self.props.routeProps;\n      if (routeProps) el.f7RouteProps = routeProps;\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"attrs\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var href = props.href,\n          link = props.link,\n          target = props.target;\n      var hrefComputed = href;\n      if (typeof hrefComputed === 'undefined' && link) hrefComputed = '#';\n      return Utils.extend({\n        href: hrefComputed,\n        target: target\n      }, Mixins.linkRouterAttrs(props), Mixins.linkActionsAttrs(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7MenuItem;\n}(React.Component);\n\n__reactComponentSetProps(F7MenuItem, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  text: String,\n  iconOnly: Boolean,\n  href: String,\n  link: Boolean,\n  target: String,\n  dropdown: Boolean\n}, Mixins.colorProps, Mixins.linkIconProps, Mixins.linkRouterProps, Mixins.linkActionsProps));\n\nF7MenuItem.displayName = 'f7-menu-item';\nexport default F7MenuItem;","map":null,"metadata":{},"sourceType":"module"}