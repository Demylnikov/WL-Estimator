{"ast":null,"code":"import $ from 'dom7';\nimport History from '../../utils/history';\nimport Support from '../../utils/support';\nimport Device from '../../utils/device';\nimport Utils from '../../utils/utils';\n\nfunction SwipeBack(r) {\n  var router = r;\n  var $el = router.$el,\n      $navbarEl = router.$navbarEl,\n      app = router.app,\n      params = router.params;\n  var isTouched = false;\n  var isMoved = false;\n  var touchesStart = {};\n  var isScrolling;\n  var currentPage = [];\n  var previousPage = [];\n  var viewContainerWidth;\n  var touchesDiff;\n  var allowViewTouchMove = true;\n  var touchStartTime;\n  var $currentNavbarInner = [];\n  var $previousNavbarInner = [];\n  var dynamicNavbar;\n  var separateNavbar;\n  var pageShadow;\n  var pageOpacity;\n  var animatableNavEls;\n  var paramsSwipeBackAnimateShadow = params[\"\".concat(app.theme, \"SwipeBackAnimateShadow\")];\n  var paramsSwipeBackAnimateOpacity = params[\"\".concat(app.theme, \"SwipeBackAnimateOpacity\")];\n  var paramsSwipeBackActiveArea = params[\"\".concat(app.theme, \"SwipeBackActiveArea\")];\n  var paramsSwipeBackThreshold = params[\"\".concat(app.theme, \"SwipeBackThreshold\")];\n  var transformOrigin = app.rtl ? 'right center' : 'left center';\n\n  function animatableNavElements() {\n    var els = [];\n    var inverter = app.rtl ? -1 : 1;\n    var currentNavIsLarge = $currentNavbarInner.hasClass('navbar-inner-large');\n    var previousNavIsLarge = $previousNavbarInner.hasClass('navbar-inner-large');\n    var fromLarge = currentNavIsLarge && !$currentNavbarInner.hasClass('navbar-inner-large-collapsed');\n    var toLarge = previousNavIsLarge && !$previousNavbarInner.hasClass('navbar-inner-large-collapsed');\n    var $currentNavElements = $currentNavbarInner.children('.left, .title, .right, .subnavbar, .fading, .title-large');\n    var $previousNavElements = $previousNavbarInner.children('.left, .title, .right, .subnavbar, .fading, .title-large');\n    var activeNavBackIconText;\n    var previousNavBackIconText;\n\n    if (params.iosAnimateNavbarBackIcon) {\n      if ($currentNavbarInner.hasClass('sliding')) {\n        activeNavBackIconText = $currentNavbarInner.children('.left').find('.back .icon + span').eq(0);\n      } else {\n        activeNavBackIconText = $currentNavbarInner.children('.left.sliding').find('.back .icon + span').eq(0);\n      }\n\n      if ($previousNavbarInner.hasClass('sliding')) {\n        previousNavBackIconText = $previousNavbarInner.children('.left').find('.back .icon + span').eq(0);\n      } else {\n        previousNavBackIconText = $previousNavbarInner.children('.left.sliding').find('.back .icon + span').eq(0);\n      }\n\n      if (activeNavBackIconText.length) {\n        $previousNavElements.each(function (index, el) {\n          if (!$(el).hasClass('title')) return;\n          el.f7NavbarLeftOffset += activeNavBackIconText.prev('.icon')[0].offsetWidth;\n        });\n      }\n    }\n\n    $currentNavElements.each(function (index, navEl) {\n      var $navEl = $(navEl);\n      var isSubnavbar = $navEl.hasClass('subnavbar');\n      var isLeft = $navEl.hasClass('left');\n      var isTitle = $navEl.hasClass('title');\n      if (!fromLarge && $navEl.hasClass('.title-large')) return;\n      var el = {\n        el: navEl\n      };\n\n      if (fromLarge) {\n        if (isTitle) return;\n\n        if ($navEl.hasClass('title-large')) {\n          if (!separateNavbar) return;\n\n          if (toLarge) {\n            if (els.indexOf(el) < 0) els.push(el);\n            el.overflow = 'visible';\n            el.transform = 'translateX(100%)';\n            $navEl.find('.title-large-text, .title-large-inner').each(function (subIndex, subNavEl) {\n              els.push({\n                el: subNavEl,\n                transform: function transform(progress) {\n                  return \"translateX(\".concat(-100 + progress * 100 * inverter, \"%)\");\n                }\n              });\n            });\n          } else {\n            if (els.indexOf(el) < 0) els.push(el);\n            el.overflow = 'hidden';\n\n            el.transform = function (progress) {\n              return \"translateY(calc(\".concat(-progress, \" * var(--f7-navbar-large-title-height)))\");\n            };\n\n            $navEl.find('.title-large-text, .title-large-inner').each(function (subIndex, subNavEl) {\n              els.push({\n                el: subNavEl,\n                transform: function transform(progress) {\n                  return \"translateX(\".concat(progress * 100 * inverter, \"%) translateY(calc(\").concat(progress, \" * var(--f7-navbar-large-title-height)))\");\n                }\n              });\n            });\n          }\n\n          return;\n        }\n      }\n\n      if (toLarge) {\n        if (!fromLarge) {\n          if ($navEl.hasClass('title-large')) {\n            if (!separateNavbar) return;\n            if (els.indexOf(el) < 0) els.push(el);\n            el.opacity = 0;\n          }\n        }\n\n        if (isLeft && separateNavbar) {\n          if (els.indexOf(el) < 0) els.push(el);\n\n          el.opacity = function (progress) {\n            return 1 - Math.pow(progress, 0.33);\n          };\n\n          $navEl.find('.back span').each(function (subIndex, subNavEl) {\n            els.push({\n              el: subNavEl,\n              'transform-origin': transformOrigin,\n              transform: function transform(progress) {\n                return \"translateY(calc(var(--f7-navbar-height) * \".concat(progress, \")) scale(\").concat(1 + 1 * progress, \")\");\n              }\n            });\n          });\n          return;\n        }\n      }\n\n      if ($navEl.hasClass('title-large')) return;\n      var isSliding = $navEl.hasClass('sliding') || $currentNavbarInner.hasClass('sliding');\n      if (els.indexOf(el) < 0) els.push(el);\n\n      if (!isSubnavbar || isSubnavbar && !isSliding) {\n        el.opacity = function (progress) {\n          return 1 - Math.pow(progress, 0.33);\n        };\n      }\n\n      if (isSliding) {\n        var transformTarget = el;\n\n        if (isLeft && activeNavBackIconText.length && params.iosAnimateNavbarBackIcon) {\n          var textEl = {\n            el: activeNavBackIconText[0]\n          };\n          transformTarget = textEl;\n          els.push(textEl);\n        }\n\n        transformTarget.transform = function (progress) {\n          var activeNavTranslate = progress * transformTarget.el.f7NavbarRightOffset;\n          if (Device.pixelRatio === 1) activeNavTranslate = Math.round(activeNavTranslate);\n\n          if (isSubnavbar && currentNavIsLarge && separateNavbar) {\n            return \"translate3d(\".concat(activeNavTranslate, \"px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)\");\n          }\n\n          return \"translate3d(\".concat(activeNavTranslate, \"px,0,0)\");\n        };\n      }\n    });\n    $previousNavElements.each(function (index, navEl) {\n      var $navEl = $(navEl);\n      var isSubnavbar = $navEl.hasClass('subnavbar');\n      var isLeft = $navEl.hasClass('left');\n      var isTitle = $navEl.hasClass('title');\n      var el = {\n        el: navEl\n      };\n\n      if (toLarge) {\n        if (isTitle) return;\n        if (els.indexOf(el) < 0) els.push(el);\n\n        if ($navEl.hasClass('title-large')) {\n          if (!separateNavbar) return;\n\n          if (fromLarge) {\n            el.opacity = 1;\n            el.overflow = 'visible';\n            el.transform = 'translateY(0)';\n            $navEl.find('.title-large-text').each(function (subIndex, subNavEl) {\n              els.push({\n                el: subNavEl,\n                'transform-origin': transformOrigin,\n                opacity: function opacity(progress) {\n                  return Math.pow(progress, 3);\n                },\n                transform: function transform(progress) {\n                  return \"translateY(calc(\".concat(-1 + progress * 1, \" * var(--f7-navbar-large-title-height))) scale(\").concat(0.5 + progress * 0.5, \")\");\n                }\n              });\n            });\n          } else {\n            el.transform = function (progress) {\n              return \"translateY(calc(\".concat(progress - 1, \" * var(--f7-navbar-large-title-height)))\");\n            };\n\n            el.opacity = 1;\n            el.overflow = 'hidden';\n            $navEl.find('.title-large-text').each(function (subIndex, subNavEl) {\n              els.push({\n                el: subNavEl,\n                'transform-origin': transformOrigin,\n                opacity: function opacity(progress) {\n                  return Math.pow(progress, 3);\n                },\n                transform: function transform(progress) {\n                  return \"scale(\".concat(0.5 + progress * 0.5, \")\");\n                }\n              });\n            });\n          }\n\n          $navEl.find('.title-large-inner').each(function (subIndex, subNavEl) {\n            els.push({\n              el: subNavEl,\n              'transform-origin': transformOrigin,\n              opacity: function opacity(progress) {\n                return Math.pow(progress, 3);\n              },\n              transform: function transform(progress) {\n                return \"translateX(\".concat(-100 * (1 - progress) * inverter, \"%)\");\n              }\n            });\n          });\n          return;\n        }\n      }\n\n      if ($navEl.hasClass('title-large')) return;\n      var isSliding = $navEl.hasClass('sliding') || $previousNavbarInner.hasClass('sliding');\n      if (els.indexOf(el) < 0) els.push(el);\n\n      if (!isSubnavbar || isSubnavbar && !isSliding) {\n        el.opacity = function (progress) {\n          return Math.pow(progress, 3);\n        };\n      }\n\n      if (isSliding) {\n        var transformTarget = el;\n\n        if (isLeft && previousNavBackIconText.length && params.iosAnimateNavbarBackIcon) {\n          var textEl = {\n            el: activeNavBackIconText[0]\n          };\n          transformTarget = textEl;\n          els.push(textEl);\n        }\n\n        transformTarget.transform = function (progress) {\n          var previousNavTranslate = transformTarget.el.f7NavbarLeftOffset * (1 - progress);\n          if (Device.pixelRatio === 1) previousNavTranslate = Math.round(previousNavTranslate);\n\n          if (isSubnavbar && previousNavIsLarge && separateNavbar) {\n            return \"translate3d(\".concat(previousNavTranslate, \"px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)\");\n          }\n\n          return \"translate3d(\".concat(previousNavTranslate, \"px,0,0)\");\n        };\n      }\n    });\n    return els;\n  }\n\n  function setAnimatableNavElements() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        progress = _ref.progress,\n        reset = _ref.reset,\n        transition = _ref.transition;\n\n    var styles = ['overflow', 'transform', 'transform-origin', 'opacity'];\n\n    for (var i = 0; i < animatableNavEls.length; i += 1) {\n      var el = animatableNavEls[i];\n\n      if (el && el.el) {\n        if (transition === true) el.el.classList.add('navbar-page-transitioning');\n        if (transition === false) el.el.classList.remove('navbar-page-transitioning');\n\n        for (var j = 0; j < styles.length; j += 1) {\n          var styleProp = styles[j];\n\n          if (el[styleProp]) {\n            if (reset) {\n              el.el.style[styleProp] = '';\n            } else if (typeof el[styleProp] === 'function') {\n              el.el.style[styleProp] = el[styleProp](progress);\n            } else {\n              el.el.style[styleProp] = el[styleProp];\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function handleTouchStart(e) {\n    var swipeBackEnabled = params[\"\".concat(app.theme, \"SwipeBack\")];\n    if (!allowViewTouchMove || !swipeBackEnabled || isTouched || app.swipeout && app.swipeout.el || !router.allowPageChange) return;\n    if ($(e.target).closest('.range-slider, .calendar-months').length > 0) return;\n    if ($(e.target).closest('.page-master, .page-master-detail').length > 0 && params.masterDetailBreakpoint > 0 && app.width >= params.masterDetailBreakpoint) return;\n    isMoved = false;\n    isTouched = true;\n    isScrolling = undefined;\n    touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n    touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    touchStartTime = Utils.now();\n    dynamicNavbar = router.dynamicNavbar;\n    separateNavbar = router.separateNavbar;\n  }\n\n  function handleTouchMove(e) {\n    if (!isTouched) return;\n    var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n    var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n    if (typeof isScrolling === 'undefined') {\n      isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x)) || pageX < touchesStart.x && !app.rtl || pageX > touchesStart.x && app.rtl;\n    }\n\n    if (isScrolling || e.f7PreventSwipeBack || app.preventSwipeBack) {\n      isTouched = false;\n      return;\n    }\n\n    if (!isMoved) {\n      // Calc values during first move fired\n      var cancel = false;\n      var target = $(e.target);\n      var swipeout = target.closest('.swipeout');\n\n      if (swipeout.length > 0) {\n        if (!app.rtl && swipeout.find('.swipeout-actions-left').length > 0) cancel = true;\n        if (app.rtl && swipeout.find('.swipeout-actions-right').length > 0) cancel = true;\n      }\n\n      currentPage = target.closest('.page');\n      if (currentPage.hasClass('no-swipeback') || target.closest('.no-swipeback, .card-opened').length > 0) cancel = true;\n      previousPage = $el.find('.page-previous:not(.stacked)');\n      var notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;\n      viewContainerWidth = $el.width();\n\n      if (app.rtl) {\n        notFromBorder = touchesStart.x < $el.offset().left - $el[0].scrollLeft + (viewContainerWidth - paramsSwipeBackActiveArea);\n      } else {\n        notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;\n      }\n\n      if (notFromBorder) cancel = true;\n      if (previousPage.length === 0 || currentPage.length === 0) cancel = true;\n\n      if (cancel) {\n        isTouched = false;\n        return;\n      }\n\n      if (paramsSwipeBackAnimateShadow) {\n        pageShadow = currentPage.find('.page-shadow-effect');\n\n        if (pageShadow.length === 0) {\n          pageShadow = $('<div class=\"page-shadow-effect\"></div>');\n          currentPage.append(pageShadow);\n        }\n      }\n\n      if (paramsSwipeBackAnimateOpacity) {\n        pageOpacity = previousPage.find('.page-opacity-effect');\n\n        if (pageOpacity.length === 0) {\n          pageOpacity = $('<div class=\"page-opacity-effect\"></div>');\n          previousPage.append(pageOpacity);\n        }\n      }\n\n      if (dynamicNavbar) {\n        if (separateNavbar) {\n          $currentNavbarInner = $navbarEl.find('.navbar-current:not(.stacked)');\n          $previousNavbarInner = $navbarEl.find('.navbar-previous:not(.stacked)');\n        } else {\n          $currentNavbarInner = currentPage.children('.navbar').children('.navbar-inner');\n          $previousNavbarInner = previousPage.children('.navbar').children('.navbar-inner');\n        }\n\n        animatableNavEls = animatableNavElements($previousNavbarInner, $currentNavbarInner);\n      } // Close/Hide Any Picker\n\n\n      if ($('.sheet.modal-in').length > 0 && app.sheet) {\n        app.sheet.close($('.sheet.modal-in'));\n      }\n    }\n\n    e.f7PreventPanelSwipe = true;\n    isMoved = true;\n    app.preventSwipePanelBySwipeBack = true;\n    e.preventDefault(); // RTL inverter\n\n    var inverter = app.rtl ? -1 : 1; // Touches diff\n\n    touchesDiff = (pageX - touchesStart.x - paramsSwipeBackThreshold) * inverter;\n    if (touchesDiff < 0) touchesDiff = 0;\n    var percentage = Math.min(Math.max(touchesDiff / viewContainerWidth, 0), 1); // Swipe Back Callback\n\n    var callbackData = {\n      percentage: percentage,\n      progress: percentage,\n      currentPageEl: currentPage[0],\n      previousPageEl: previousPage[0],\n      currentNavbarEl: $currentNavbarInner[0],\n      previousNavbarEl: $previousNavbarInner[0]\n    };\n    $el.trigger('swipeback:move', callbackData);\n    router.emit('swipebackMove', callbackData); // Transform pages\n\n    var currentPageTranslate = touchesDiff * inverter;\n    var previousPageTranslate = (touchesDiff / 5 - viewContainerWidth / 5) * inverter;\n\n    if (!app.rtl) {\n      currentPageTranslate = Math.min(currentPageTranslate, viewContainerWidth);\n      previousPageTranslate = Math.min(previousPageTranslate, 0);\n    } else {\n      currentPageTranslate = Math.max(currentPageTranslate, -viewContainerWidth);\n      previousPageTranslate = Math.max(previousPageTranslate, 0);\n    }\n\n    if (Device.pixelRatio === 1) {\n      currentPageTranslate = Math.round(currentPageTranslate);\n      previousPageTranslate = Math.round(previousPageTranslate);\n    }\n\n    router.swipeBackActive = true;\n    $([currentPage[0], previousPage[0]]).addClass('page-swipeback-active');\n    currentPage.transform(\"translate3d(\".concat(currentPageTranslate, \"px,0,0)\"));\n    if (paramsSwipeBackAnimateShadow) pageShadow[0].style.opacity = 1 - 1 * percentage;\n\n    if (app.theme !== 'md') {\n      previousPage.transform(\"translate3d(\".concat(previousPageTranslate, \"px,0,0)\"));\n    }\n\n    if (paramsSwipeBackAnimateOpacity) pageOpacity[0].style.opacity = 1 - 1 * percentage; // Dynamic Navbars Animation\n\n    if (!dynamicNavbar) return;\n    setAnimatableNavElements({\n      progress: percentage\n    });\n  }\n\n  function handleTouchEnd() {\n    app.preventSwipePanelBySwipeBack = false;\n\n    if (!isTouched || !isMoved) {\n      isTouched = false;\n      isMoved = false;\n      return;\n    }\n\n    isTouched = false;\n    isMoved = false;\n    router.swipeBackActive = false;\n    $([currentPage[0], previousPage[0]]).removeClass('page-swipeback-active');\n\n    if (touchesDiff === 0) {\n      $([currentPage[0], previousPage[0]]).transform('');\n      if (pageShadow && pageShadow.length > 0) pageShadow.remove();\n      if (pageOpacity && pageOpacity.length > 0) pageOpacity.remove();\n\n      if (dynamicNavbar) {\n        setAnimatableNavElements({\n          reset: true\n        });\n      }\n\n      return;\n    }\n\n    var timeDiff = Utils.now() - touchStartTime;\n    var pageChanged = false; // Swipe back to previous page\n\n    if (timeDiff < 300 && touchesDiff > 10 || timeDiff >= 300 && touchesDiff > viewContainerWidth / 2) {\n      currentPage.removeClass('page-current').addClass(\"page-next\".concat(app.theme === 'md' ? ' page-next-on-right' : ''));\n      previousPage.removeClass('page-previous').addClass('page-current').removeAttr('aria-hidden');\n      if (pageShadow) pageShadow[0].style.opacity = '';\n      if (pageOpacity) pageOpacity[0].style.opacity = '';\n\n      if (dynamicNavbar) {\n        $currentNavbarInner.removeClass('navbar-current').addClass('navbar-next');\n        $previousNavbarInner.removeClass('navbar-previous').addClass('navbar-current').removeAttr('aria-hidden');\n      }\n\n      pageChanged = true;\n    } // Reset custom styles\n    // Add transitioning class for transition-duration\n\n\n    $([currentPage[0], previousPage[0]]).addClass('page-transitioning page-transitioning-swipeback').transform('');\n\n    if (dynamicNavbar) {\n      setAnimatableNavElements({\n        progress: pageChanged ? 1 : 0,\n        transition: true\n      });\n    }\n\n    allowViewTouchMove = false;\n    router.allowPageChange = false; // Swipe Back Callback\n\n    var callbackData = {\n      currentPageEl: currentPage[0],\n      previousPageEl: previousPage[0],\n      currentNavbarEl: $currentNavbarInner[0],\n      previousNavbarEl: $previousNavbarInner[0]\n    };\n\n    if (pageChanged) {\n      // Update Route\n      router.currentRoute = previousPage[0].f7Page.route;\n      router.currentPage = previousPage[0]; // Page before animation callback\n\n      router.pageCallback('beforeOut', currentPage, $currentNavbarInner, 'current', 'next', {\n        route: currentPage[0].f7Page.route,\n        swipeBack: true\n      });\n      router.pageCallback('beforeIn', previousPage, $previousNavbarInner, 'previous', 'current', {\n        route: previousPage[0].f7Page.route,\n        swipeBack: true\n      });\n      $el.trigger('swipeback:beforechange', callbackData);\n      router.emit('swipebackBeforeChange', callbackData);\n    } else {\n      $el.trigger('swipeback:beforereset', callbackData);\n      router.emit('swipebackBeforeReset', callbackData);\n    }\n\n    currentPage.transitionEnd(function () {\n      $([currentPage[0], previousPage[0]]).removeClass('page-transitioning page-transitioning-swipeback');\n\n      if (dynamicNavbar) {\n        setAnimatableNavElements({\n          reset: true,\n          transition: false\n        });\n      }\n\n      allowViewTouchMove = true;\n      router.allowPageChange = true;\n\n      if (pageChanged) {\n        // Update History\n        if (router.history.length === 1) {\n          router.history.unshift(router.url);\n        }\n\n        router.history.pop();\n        router.saveHistory(); // Update push state\n\n        if (params.pushState) {\n          History.back();\n        } // Page after animation callback\n\n\n        router.pageCallback('afterOut', currentPage, $currentNavbarInner, 'current', 'next', {\n          route: currentPage[0].f7Page.route,\n          swipeBack: true\n        });\n        router.pageCallback('afterIn', previousPage, $previousNavbarInner, 'previous', 'current', {\n          route: previousPage[0].f7Page.route,\n          swipeBack: true\n        }); // Remove Old Page\n\n        if (params.stackPages && router.initialPages.indexOf(currentPage[0]) >= 0) {\n          currentPage.addClass('stacked');\n\n          if (separateNavbar) {\n            $currentNavbarInner.addClass('stacked');\n          }\n        } else {\n          router.pageCallback('beforeRemove', currentPage, $currentNavbarInner, 'next', {\n            swipeBack: true\n          });\n          router.removePage(currentPage);\n\n          if (separateNavbar) {\n            router.removeNavbar($currentNavbarInner);\n          }\n        }\n\n        $el.trigger('swipeback:afterchange', callbackData);\n        router.emit('swipebackAfterChange', callbackData);\n        router.emit('routeChanged', router.currentRoute, router.previousRoute, router);\n\n        if (params.preloadPreviousPage) {\n          router.back(router.history[router.history.length - 2], {\n            preload: true\n          });\n        }\n      } else {\n        $el.trigger('swipeback:afterreset', callbackData);\n        router.emit('swipebackAfterReset', callbackData);\n      }\n\n      if (pageShadow && pageShadow.length > 0) pageShadow.remove();\n      if (pageOpacity && pageOpacity.length > 0) pageOpacity.remove();\n    });\n  }\n\n  function attachEvents() {\n    var passiveListener = app.touchEvents.start === 'touchstart' && Support.passiveListener ? {\n      passive: true,\n      capture: false\n    } : false;\n    $el.on(app.touchEvents.start, handleTouchStart, passiveListener);\n    app.on('touchmove:active', handleTouchMove);\n    app.on('touchend:passive', handleTouchEnd);\n  }\n\n  function detachEvents() {\n    var passiveListener = app.touchEvents.start === 'touchstart' && Support.passiveListener ? {\n      passive: true,\n      capture: false\n    } : false;\n    $el.off(app.touchEvents.start, handleTouchStart, passiveListener);\n    app.off('touchmove:active', handleTouchMove);\n    app.off('touchend:passive', handleTouchEnd);\n  }\n\n  attachEvents();\n  router.on('routerDestroy', detachEvents);\n}\n\nexport default SwipeBack;","map":null,"metadata":{},"sourceType":"module"}