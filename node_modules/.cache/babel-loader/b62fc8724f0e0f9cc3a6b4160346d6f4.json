{"ast":null,"code":"import $ from 'dom7';\nimport { window, document } from 'ssr-window';\nimport Utils from '../../utils/utils'; // Form Data\n\nvar FormData = {\n  store: function store(form, data) {\n    var app = this;\n    var formId = form;\n    var $formEl = $(form);\n\n    if ($formEl.length && $formEl.is('form') && $formEl.attr('id')) {\n      formId = $formEl.attr('id');\n    } // Store form data in app.formsData\n\n\n    app.form.data[\"form-\".concat(formId)] = data; // Store form data in local storage also\n\n    try {\n      window.localStorage[\"f7form-\".concat(formId)] = JSON.stringify(data);\n    } catch (e) {\n      throw e;\n    }\n  },\n  get: function get(form) {\n    var app = this;\n    var formId = form;\n    var $formEl = $(form);\n\n    if ($formEl.length && $formEl.is('form') && $formEl.attr('id')) {\n      formId = $formEl.attr('id');\n    }\n\n    try {\n      if (window.localStorage[\"f7form-\".concat(formId)]) {\n        return JSON.parse(window.localStorage[\"f7form-\".concat(formId)]);\n      }\n    } catch (e) {\n      throw e;\n    }\n\n    if (app.form.data[\"form-\".concat(formId)]) {\n      return app.form.data[\"form-\".concat(formId)];\n    }\n\n    return undefined;\n  },\n  remove: function remove(form) {\n    var app = this;\n    var formId = form;\n    var $formEl = $(form);\n\n    if ($formEl.length && $formEl.is('form') && $formEl.attr('id')) {\n      formId = $formEl.attr('id');\n    } // Delete form data from app.formsData\n\n\n    if (app.form.data[\"form-\".concat(formId)]) {\n      app.form.data[\"form-\".concat(formId)] = '';\n      delete app.form.data[\"form-\".concat(formId)];\n    } // Delete form data from local storage also\n\n\n    try {\n      if (window.localStorage[\"f7form-\".concat(formId)]) {\n        window.localStorage[\"f7form-\".concat(formId)] = '';\n        window.localStorage.removeItem(\"f7form-\".concat(formId));\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n}; // Form Storage\n\nvar FormStorage = {\n  init: function init(formEl) {\n    var app = this;\n    var $formEl = $(formEl);\n    var formId = $formEl.attr('id');\n    if (!formId) return;\n    var initialData = app.form.getFormData(formId);\n\n    if (initialData) {\n      app.form.fillFromData($formEl, initialData);\n    }\n\n    function store() {\n      var data = app.form.convertToData($formEl);\n      if (!data) return;\n      app.form.storeFormData(formId, data);\n      $formEl.trigger('form:storedata', data);\n      app.emit('formStoreData', $formEl[0], data);\n    }\n\n    $formEl.on('change submit', store);\n  },\n  destroy: function destroy(formEl) {\n    var $formEl = $(formEl);\n    $formEl.off('change submit');\n  }\n}; // Form To/From Data\n\nfunction formToData(formEl) {\n  var app = this;\n  var $formEl = $(formEl).eq(0);\n  if ($formEl.length === 0) return undefined; // Form data\n\n  var data = {}; // Skip input types\n\n  var skipTypes = ['submit', 'image', 'button', 'file'];\n  var skipNames = [];\n  $formEl.find('input, select, textarea').each(function (inputIndex, inputEl) {\n    var $inputEl = $(inputEl);\n\n    if ($inputEl.hasClass('ignore-store-data') || $inputEl.hasClass('no-store-data')) {\n      return;\n    }\n\n    var name = $inputEl.attr('name');\n    var type = $inputEl.attr('type');\n    var tag = inputEl.nodeName.toLowerCase();\n    if (skipTypes.indexOf(type) >= 0) return;\n    if (skipNames.indexOf(name) >= 0 || !name) return;\n\n    if (tag === 'select' && $inputEl.prop('multiple')) {\n      skipNames.push(name);\n      data[name] = [];\n      $formEl.find(\"select[name=\\\"\".concat(name, \"\\\"] option\")).each(function (index, el) {\n        if (el.selected) data[name].push(el.value);\n      });\n    } else {\n      switch (type) {\n        case 'checkbox':\n          skipNames.push(name);\n          data[name] = [];\n          $formEl.find(\"input[name=\\\"\".concat(name, \"\\\"]\")).each(function (index, el) {\n            if (el.checked) data[name].push(el.value);\n          });\n          break;\n\n        case 'radio':\n          skipNames.push(name);\n          $formEl.find(\"input[name=\\\"\".concat(name, \"\\\"]\")).each(function (index, el) {\n            if (el.checked) data[name] = el.value;\n          });\n          break;\n\n        default:\n          data[name] = $inputEl.val();\n          break;\n      }\n    }\n  });\n  $formEl.trigger('form:todata', data);\n  app.emit('formToData', $formEl[0], data);\n  return data;\n}\n\nfunction formFromData(formEl, formData) {\n  var app = this;\n  var $formEl = $(formEl).eq(0);\n  if (!$formEl.length) return;\n  var data = formData;\n  var formId = $formEl.attr('id');\n\n  if (!data && formId) {\n    data = app.form.getFormData(formId);\n  }\n\n  if (!data) return; // Skip input types\n\n  var skipTypes = ['submit', 'image', 'button', 'file'];\n  var skipNames = [];\n  $formEl.find('input, select, textarea').each(function (inputIndex, inputEl) {\n    var $inputEl = $(inputEl);\n\n    if ($inputEl.hasClass('ignore-store-data') || $inputEl.hasClass('no-store-data')) {\n      return;\n    }\n\n    var name = $inputEl.attr('name');\n    var type = $inputEl.attr('type');\n    var tag = inputEl.nodeName.toLowerCase();\n    if (typeof data[name] === 'undefined' || data[name] === null) return;\n    if (skipTypes.indexOf(type) >= 0) return;\n    if (skipNames.indexOf(name) >= 0 || !name) return;\n\n    if (tag === 'select' && $inputEl.prop('multiple')) {\n      skipNames.push(name);\n      $formEl.find(\"select[name=\\\"\".concat(name, \"\\\"] option\")).each(function (index, el) {\n        var selectEl = el;\n        if (data[name].indexOf(el.value) >= 0) selectEl.selected = true;else selectEl.selected = false;\n      });\n    } else {\n      switch (type) {\n        case 'checkbox':\n          skipNames.push(name);\n          $formEl.find(\"input[name=\\\"\".concat(name, \"\\\"]\")).each(function (index, el) {\n            var checkboxEl = el;\n            if (data[name].indexOf(el.value) >= 0) checkboxEl.checked = true;else checkboxEl.checked = false;\n          });\n          break;\n\n        case 'radio':\n          skipNames.push(name);\n          $formEl.find(\"input[name=\\\"\".concat(name, \"\\\"]\")).each(function (index, el) {\n            var radioEl = el;\n            if (data[name] === el.value) radioEl.checked = true;else radioEl.checked = false;\n          });\n          break;\n\n        default:\n          $inputEl.val(data[name]);\n          break;\n      }\n    }\n\n    if (tag === 'select' || tag === 'input' || tag === 'textarea') {\n      $inputEl.trigger('change', 'fromdata');\n    }\n  });\n  $formEl.trigger('form:fromdata', data);\n  app.emit('formFromData', $formEl[0], data);\n}\n\nfunction initAjaxForm() {\n  var app = this;\n\n  function onSubmitChange(e, fromData) {\n    var $formEl = $(this);\n    if (e.type === 'change' && !$formEl.hasClass('form-ajax-submit-onchange')) return;\n    if (e.type === 'submit') e.preventDefault();\n    if (e.type === 'change' && fromData === 'fromdata') return;\n    var method = ($formEl.attr('method') || 'GET').toUpperCase();\n    var contentType = $formEl.prop('enctype') || $formEl.attr('enctype');\n    var url = $formEl.attr('action');\n    if (!url) return;\n    var data;\n\n    if (method === 'POST') {\n      if (contentType === 'application/x-www-form-urlencoded') {\n        data = app.form.convertToData($formEl[0]);\n      } else {\n        data = new window.FormData($formEl[0]);\n      }\n    } else {\n      data = Utils.serializeObject(app.form.convertToData($formEl[0]));\n    }\n\n    app.request({\n      method: method,\n      url: url,\n      contentType: contentType,\n      data: data,\n      beforeSend: function beforeSend(xhr) {\n        $formEl.trigger('formajax:beforesend', data, xhr);\n        app.emit('formAjaxBeforeSend', $formEl[0], data, xhr);\n      },\n      error: function error(xhr) {\n        $formEl.trigger('formajax:error', data, xhr);\n        app.emit('formAjaxError', $formEl[0], data, xhr);\n      },\n      complete: function complete(xhr) {\n        $formEl.trigger('formajax:complete', data, xhr);\n        app.emit('formAjaxComplete', $formEl[0], data, xhr);\n      },\n      success: function success(response, status, xhr) {\n        $formEl.trigger('formajax:success', data, xhr);\n        app.emit('formAjaxSuccess', $formEl[0], data, xhr);\n      }\n    });\n  }\n\n  $(document).on('submit change', 'form.form-ajax-submit, form.form-ajax-submit-onchange', onSubmitChange);\n}\n\nexport default {\n  name: 'form',\n  create: function create() {\n    var app = this;\n    Utils.extend(app, {\n      form: {\n        data: {},\n        storeFormData: FormData.store.bind(app),\n        getFormData: FormData.get.bind(app),\n        removeFormData: FormData.remove.bind(app),\n        convertToData: formToData.bind(app),\n        fillFromData: formFromData.bind(app),\n        storage: {\n          init: FormStorage.init.bind(app),\n          destroy: FormStorage.destroy.bind(app)\n        }\n      }\n    });\n  },\n  on: {\n    init: function init() {\n      var app = this;\n      initAjaxForm.call(app);\n    },\n    tabBeforeRemove: function tabBeforeRemove(tabEl) {\n      var app = this;\n      $(tabEl).find('.form-store-data').each(function (index, formEl) {\n        app.form.storage.destroy(formEl);\n      });\n    },\n    tabMounted: function tabMounted(tabEl) {\n      var app = this;\n      $(tabEl).find('.form-store-data').each(function (index, formEl) {\n        app.form.storage.init(formEl);\n      });\n    },\n    pageBeforeRemove: function pageBeforeRemove(page) {\n      var app = this;\n      page.$el.find('.form-store-data').each(function (index, formEl) {\n        app.form.storage.destroy(formEl);\n      });\n    },\n    pageInit: function pageInit(page) {\n      var app = this;\n      page.$el.find('.form-store-data').each(function (index, formEl) {\n        app.form.storage.init(formEl);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}