{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nvar DataTable =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(DataTable, _Framework7Class);\n\n  function DataTable(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DataTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTable).call(this, params, [app]));\n\n    var table = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = {}; // Extend defaults with modules params\n\n    table.useModulesParams(defaults);\n    table.params = Utils.extend(defaults, params); // El\n\n    var $el = $(table.params.el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, undefined);\n    table.$el = $el;\n    table.el = $el[0];\n\n    if (table.$el[0].f7DataTable) {\n      var instance = table.$el[0].f7DataTable;\n      table.destroy();\n      return _possibleConstructorReturn(_this, instance);\n    }\n\n    table.$el[0].f7DataTable = table;\n    Utils.extend(table, {\n      collapsible: $el.hasClass('data-table-collapsible'),\n      // Headers\n      $headerEl: $el.find('.data-table-header'),\n      $headerSelectedEl: $el.find('.data-table-header-selected')\n    }); // Events\n\n    function handleChange(e) {\n      if (e.detail && e.detail.sentByF7DataTable) {\n        // Scripted event, don't do anything\n        return;\n      }\n\n      var $inputEl = $(this);\n      var checked = $inputEl[0].checked;\n      var columnIndex = $inputEl.parents('td,th').index();\n\n      if ($inputEl.parents('thead').length > 0) {\n        if (columnIndex === 0) {\n          $el.find('tbody tr')[checked ? 'addClass' : 'removeClass']('data-table-row-selected');\n        }\n\n        $el.find(\"tbody tr td:nth-child(\".concat(columnIndex + 1, \") input\")).prop('checked', checked).trigger('change', {\n          sentByF7DataTable: true\n        });\n      } else {\n        if (columnIndex === 0) {\n          $inputEl.parents('tr')[checked ? 'addClass' : 'removeClass']('data-table-row-selected');\n        }\n\n        if (!checked) {\n          $el.find(\"thead .checkbox-cell:nth-child(\".concat(columnIndex + 1, \") input[type=\\\"checkbox\\\"]\")).prop('checked', false);\n        } else if ($el.find(\"tbody .checkbox-cell:nth-child(\".concat(columnIndex + 1, \") input[type=\\\"checkbox\\\"]:checked\")).length === $el.find('tbody tr').length) {\n          $el.find(\"thead .checkbox-cell:nth-child(\".concat(columnIndex + 1, \") input[type=\\\"checkbox\\\"]\")).prop('checked', true).trigger('change', {\n            sentByF7DataTable: true\n          });\n        }\n      }\n\n      table.checkSelectedHeader();\n    }\n\n    function handleSortableClick() {\n      var $cellEl = $(this);\n      var isActive = $cellEl.hasClass('sortable-cell-active');\n      var currentSort = $cellEl.hasClass('sortable-desc') ? 'desc' : 'asc';\n      var newSort;\n\n      if (isActive) {\n        newSort = currentSort === 'desc' ? 'asc' : 'desc';\n        $cellEl.removeClass('sortable-desc sortable-asc').addClass(\"sortable-\".concat(newSort));\n      } else {\n        $el.find('thead .sortable-cell-active').removeClass('sortable-cell-active');\n        $cellEl.addClass('sortable-cell-active');\n        newSort = currentSort;\n      }\n\n      $cellEl.trigger('datatable:sort', newSort);\n      table.emit('local::sort dataTableSort', table, newSort);\n    }\n\n    table.attachEvents = function attachEvents() {\n      table.$el.on('change', '.checkbox-cell input[type=\"checkbox\"]', handleChange);\n      table.$el.find('thead .sortable-cell').on('click', handleSortableClick);\n    };\n\n    table.detachEvents = function detachEvents() {\n      table.$el.off('change', '.checkbox-cell input[type=\"checkbox\"]', handleChange);\n      table.$el.find('thead .sortable-cell').off('click', handleSortableClick);\n    }; // Install Modules\n\n\n    table.useModules(); // Init\n\n    table.init();\n    return _possibleConstructorReturn(_this, table);\n  }\n\n  _createClass(DataTable, [{\n    key: \"setCollapsibleLabels\",\n    value: function setCollapsibleLabels() {\n      var table = this;\n      if (!table.collapsible) return;\n      table.$el.find('tbody td:not(.checkbox-cell)').each(function (index, el) {\n        var $el = $(el);\n        var elIndex = $el.index();\n        var collpsibleTitle = $el.attr('data-collapsible-title');\n\n        if (!collpsibleTitle && collpsibleTitle !== '') {\n          $el.attr('data-collapsible-title', table.$el.find('thead th').eq(elIndex).text());\n        }\n      });\n    }\n  }, {\n    key: \"checkSelectedHeader\",\n    value: function checkSelectedHeader() {\n      var table = this;\n\n      if (table.$headerEl.length > 0 && table.$headerSelectedEl.length > 0) {\n        var checkedItems = table.$el.find('tbody .checkbox-cell input:checked').length;\n        table.$el[checkedItems > 0 ? 'addClass' : 'removeClass']('data-table-has-checked');\n        table.$headerSelectedEl.find('.data-table-selected-count').text(checkedItems);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var table = this;\n      table.attachEvents();\n      table.setCollapsibleLabels();\n      table.checkSelectedHeader();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var table = this;\n      table.$el.trigger('datatable:beforedestroy', table);\n      table.emit('local::beforeDestroy dataTableBeforeDestroy', table);\n      table.attachEvents();\n\n      if (table.$el[0]) {\n        table.$el[0].f7DataTable = null;\n        delete table.$el[0].f7DataTable;\n      }\n\n      Utils.deleteProps(table);\n      table = null;\n    }\n  }]);\n\n  return DataTable;\n}(Framework7Class);\n\nexport default DataTable;","map":null,"metadata":{},"sourceType":"module"}