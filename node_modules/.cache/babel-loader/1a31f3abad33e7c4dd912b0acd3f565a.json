{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nvar Stepper =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Stepper, _Framework7Class);\n\n  function Stepper(app, params) {\n    var _this;\n\n    _classCallCheck(this, Stepper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stepper).call(this, params, [app]));\n\n    var stepper = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = {\n      el: null,\n      inputEl: null,\n      valueEl: null,\n      value: 0,\n      formatValue: null,\n      step: 1,\n      min: 0,\n      max: 100,\n      watchInput: true,\n      autorepeat: false,\n      autorepeatDynamic: false,\n      wraps: false,\n      manualInputMode: false,\n      decimalPoint: 4,\n      buttonsEndInputMode: true\n    }; // Extend defaults with modules params\n\n    stepper.useModulesParams(defaults);\n    stepper.params = Utils.extend(defaults, params);\n\n    if (stepper.params.value < stepper.params.min) {\n      stepper.params.value = stepper.params.min;\n    }\n\n    if (stepper.params.value > stepper.params.max) {\n      stepper.params.value = stepper.params.max;\n    }\n\n    var el = stepper.params.el;\n    if (!el) return _possibleConstructorReturn(_this, stepper);\n    var $el = $(el);\n    if ($el.length === 0) return _possibleConstructorReturn(_this, stepper);\n    if ($el[0].f7Stepper) return _possibleConstructorReturn(_this, $el[0].f7Stepper);\n    var $inputEl;\n\n    if (stepper.params.inputEl) {\n      $inputEl = $(stepper.params.inputEl);\n    } else if ($el.find('.stepper-input-wrap').find('input, textarea').length) {\n      $inputEl = $el.find('.stepper-input-wrap').find('input, textarea').eq(0);\n    }\n\n    if ($inputEl && $inputEl.length) {\n      'step min max'.split(' ').forEach(function (paramName) {\n        if (!params[paramName] && $inputEl.attr(paramName)) {\n          stepper.params[paramName] = parseFloat($inputEl.attr(paramName));\n        }\n      });\n\n      var _decimalPoint = parseInt(stepper.params.decimalPoint, 10);\n\n      if (Number.isNaN(_decimalPoint)) {\n        stepper.params.decimalPoint = 0;\n      } else {\n        stepper.params.decimalPoint = _decimalPoint;\n      }\n\n      var inputValue = parseFloat($inputEl.val());\n\n      if (typeof params.value === 'undefined' && !Number.isNaN(inputValue) && (inputValue || inputValue === 0)) {\n        stepper.params.value = inputValue;\n      }\n    }\n\n    var $valueEl;\n\n    if (stepper.params.valueEl) {\n      $valueEl = $(stepper.params.valueEl);\n    } else if ($el.find('.stepper-value').length) {\n      $valueEl = $el.find('.stepper-value').eq(0);\n    }\n\n    var $buttonPlusEl = $el.find('.stepper-button-plus');\n    var $buttonMinusEl = $el.find('.stepper-button-minus');\n    var _stepper$params = stepper.params,\n        step = _stepper$params.step,\n        min = _stepper$params.min,\n        max = _stepper$params.max,\n        value = _stepper$params.value,\n        decimalPoint = _stepper$params.decimalPoint;\n    Utils.extend(stepper, {\n      app: app,\n      $el: $el,\n      el: $el[0],\n      $buttonPlusEl: $buttonPlusEl,\n      buttonPlusEl: $buttonPlusEl[0],\n      $buttonMinusEl: $buttonMinusEl,\n      buttonMinusEl: $buttonMinusEl[0],\n      $inputEl: $inputEl,\n      inputEl: $inputEl ? $inputEl[0] : undefined,\n      $valueEl: $valueEl,\n      valueEl: $valueEl ? $valueEl[0] : undefined,\n      step: step,\n      min: min,\n      max: max,\n      value: value,\n      decimalPoint: decimalPoint,\n      typeModeChanged: false\n    });\n    $el[0].f7Stepper = stepper; // Handle Events\n\n    var touchesStart = {};\n    var isTouched;\n    var isScrolling;\n    var preventButtonClick;\n    var intervalId;\n    var timeoutId;\n    var autorepeatAction = null;\n    var autorepeatInAction = false;\n    var manualInput = false;\n\n    function dynamicRepeat(current, progressions, startsIn, progressionStep, repeatEvery, action) {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(function () {\n        if (current === 1) {\n          preventButtonClick = true;\n          autorepeatInAction = true;\n        }\n\n        clearInterval(intervalId);\n        action();\n        intervalId = setInterval(function () {\n          action();\n        }, repeatEvery);\n\n        if (current < progressions) {\n          dynamicRepeat(current + 1, progressions, startsIn, progressionStep, repeatEvery / 2, action);\n        }\n      }, current === 1 ? startsIn : progressionStep);\n    }\n\n    function onTouchStart(e) {\n      if (isTouched) return;\n\n      if (manualInput) {\n        return;\n      }\n\n      if ($(e.target).closest($buttonPlusEl).length) {\n        autorepeatAction = 'increment';\n      } else if ($(e.target).closest($buttonMinusEl).length) {\n        autorepeatAction = 'decrement';\n      }\n\n      if (!autorepeatAction) return;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      isTouched = true;\n      isScrolling = undefined;\n      var progressions = stepper.params.autorepeatDynamic ? 4 : 1;\n      dynamicRepeat(1, progressions, 500, 1000, 300, function () {\n        stepper[autorepeatAction]();\n      });\n    }\n\n    function onTouchMove(e) {\n      if (!isTouched) return;\n\n      if (manualInput) {\n        return;\n      }\n\n      var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (typeof isScrolling === 'undefined' && !autorepeatInAction) {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n      }\n\n      var distance = Math.pow(Math.pow(pageX - touchesStart.x, 2) + Math.pow(pageY - touchesStart.y, 2), 0.5);\n\n      if (isScrolling || distance > 20) {\n        isTouched = false;\n        clearTimeout(timeoutId);\n        clearInterval(intervalId);\n      }\n    }\n\n    function onTouchEnd() {\n      clearTimeout(timeoutId);\n      clearInterval(intervalId);\n      autorepeatAction = null;\n      autorepeatInAction = false;\n      isTouched = false;\n    }\n\n    function onMinusClick() {\n      if (manualInput) {\n        if (stepper.params.buttonsEndInputMode) {\n          manualInput = false;\n          stepper.endTypeMode(true);\n        }\n\n        return;\n      }\n\n      if (preventButtonClick) {\n        preventButtonClick = false;\n        return;\n      }\n\n      stepper.decrement(true);\n    }\n\n    function onPlusClick() {\n      if (manualInput) {\n        if (stepper.params.buttonsEndInputMode) {\n          manualInput = false;\n          stepper.endTypeMode(true);\n        }\n\n        return;\n      }\n\n      if (preventButtonClick) {\n        preventButtonClick = false;\n        return;\n      }\n\n      stepper.increment(true);\n    }\n\n    function onInputClick(e) {\n      if (!e.target.readOnly && stepper.params.manualInputMode) {\n        manualInput = true;\n\n        if (typeof e.target.selectionStart === 'number') {\n          e.target.selectionStart = e.target.value.length;\n          e.target.selectionEnd = e.target.value.length;\n        }\n      }\n    }\n\n    function onInputKey(e) {\n      if (e.keyCode === 13 || e.which === 13) {\n        e.preventDefault();\n        manualInput = false;\n        stepper.endTypeMode();\n      }\n    }\n\n    function onInputBlur() {\n      manualInput = false;\n      stepper.endTypeMode(true);\n    }\n\n    function onInput(e) {\n      if (manualInput) {\n        stepper.typeValue(e.target.value);\n        return;\n      }\n\n      if (e.detail && e.detail.sentByF7Stepper) return;\n      stepper.setValue(e.target.value, true);\n    }\n\n    stepper.attachEvents = function attachEvents() {\n      $buttonMinusEl.on('click', onMinusClick);\n      $buttonPlusEl.on('click', onPlusClick);\n\n      if (stepper.params.watchInput && $inputEl && $inputEl.length) {\n        $inputEl.on('input', onInput);\n        $inputEl.on('click', onInputClick);\n        $inputEl.on('blur', onInputBlur);\n        $inputEl.on('keyup', onInputKey);\n      }\n\n      if (stepper.params.autorepeat) {\n        app.on('touchstart:passive', onTouchStart);\n        app.on('touchmove:active', onTouchMove);\n        app.on('touchend:passive', onTouchEnd);\n      }\n    };\n\n    stepper.detachEvents = function detachEvents() {\n      $buttonMinusEl.off('click', onMinusClick);\n      $buttonPlusEl.off('click', onPlusClick);\n\n      if (stepper.params.watchInput && $inputEl && $inputEl.length) {\n        $inputEl.off('input', onInput);\n        $inputEl.off('click', onInputClick);\n        $inputEl.off('blur', onInputBlur);\n        $inputEl.off('keyup', onInputKey);\n      }\n    }; // Install Modules\n\n\n    stepper.useModules(); // Init\n\n    stepper.init();\n    return _possibleConstructorReturn(_this, stepper);\n  }\n\n  _createClass(Stepper, [{\n    key: \"minus\",\n    value: function minus() {\n      return this.decrement();\n    }\n  }, {\n    key: \"plus\",\n    value: function plus() {\n      return this.increment();\n    }\n  }, {\n    key: \"decrement\",\n    value: function decrement() {\n      var stepper = this;\n      return stepper.setValue(stepper.value - stepper.step, false, true);\n    }\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      var stepper = this;\n      return stepper.setValue(stepper.value + stepper.step, false, true);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(newValue, forceUpdate, withWraps) {\n      var stepper = this;\n      var step = stepper.step,\n          min = stepper.min,\n          max = stepper.max;\n      var oldValue = stepper.value;\n      var value = Math.round(newValue / step) * step;\n\n      if (stepper.params.wraps && withWraps) {\n        if (value > max) value = min;\n        if (value < min) value = max;\n      } else {\n        value = Math.max(Math.min(value, max), min);\n      }\n\n      if (Number.isNaN(value)) {\n        value = oldValue;\n      }\n\n      stepper.value = value;\n      var valueChanged = oldValue !== value; // Events\n\n      if (!valueChanged && !forceUpdate) return stepper;\n      stepper.$el.trigger('stepper:change', stepper, stepper.value);\n      var formattedValue = stepper.formatValue(stepper.value);\n\n      if (stepper.$inputEl && stepper.$inputEl.length) {\n        stepper.$inputEl.val(formattedValue);\n        stepper.$inputEl.trigger('input change', {\n          sentByF7Stepper: true\n        });\n      }\n\n      if (stepper.$valueEl && stepper.$valueEl.length) {\n        stepper.$valueEl.html(formattedValue);\n      }\n\n      stepper.emit('local::change stepperChange', stepper, stepper.value);\n      return stepper;\n    }\n  }, {\n    key: \"endTypeMode\",\n    value: function endTypeMode(noBlur) {\n      var stepper = this;\n      var min = stepper.min,\n          max = stepper.max;\n      var value = parseFloat(stepper.value);\n      if (Number.isNaN(value)) value = 0;\n      value = Math.max(Math.min(value, max), min);\n      stepper.value = value;\n\n      if (!stepper.typeModeChanged) {\n        if (stepper.$inputEl && stepper.$inputEl.length && !noBlur) {\n          stepper.$inputEl.blur();\n        }\n\n        return stepper;\n      }\n\n      stepper.typeModeChanged = false;\n      stepper.$el.trigger('stepper:change', stepper, stepper.value);\n      var formattedValue = stepper.formatValue(stepper.value);\n\n      if (stepper.$inputEl && stepper.$inputEl.length) {\n        stepper.$inputEl.val(formattedValue);\n        stepper.$inputEl.trigger('input change', {\n          sentByF7Stepper: true\n        });\n        if (!noBlur) stepper.$inputEl.blur();\n      }\n\n      if (stepper.$valueEl && stepper.$valueEl.length) {\n        stepper.$valueEl.html(formattedValue);\n      }\n\n      stepper.emit('local::change stepperChange', stepper, stepper.value);\n      return stepper;\n    }\n  }, {\n    key: \"typeValue\",\n    value: function typeValue(value) {\n      var stepper = this;\n      stepper.typeModeChanged = true;\n      var inputTxt = String(value);\n\n      if (inputTxt.lastIndexOf('.') + 1 === inputTxt.length || inputTxt.lastIndexOf(',') + 1 === inputTxt.length) {\n        if (inputTxt.lastIndexOf('.') !== inputTxt.indexOf('.') || inputTxt.lastIndexOf(',') !== inputTxt.indexOf(',')) {\n          inputTxt = inputTxt.slice(0, -1);\n          stepper.value = inputTxt;\n          stepper.$inputEl.val(stepper.value);\n          return stepper;\n        }\n      } else {\n        var newValue = parseFloat(inputTxt.replace(',', '.'));\n\n        if (newValue === 0) {\n          stepper.value = inputTxt.replace(',', '.');\n          stepper.$inputEl.val(stepper.value);\n          return stepper;\n        }\n\n        if (Number.isNaN(newValue)) {\n          stepper.value = 0;\n          stepper.$inputEl.val(stepper.value);\n          return stepper;\n        }\n\n        var powVal = Math.pow(10, stepper.params.decimalPoint);\n        newValue = Math.round(newValue * powVal).toFixed(stepper.params.decimalPoint + 1) / powVal;\n        stepper.value = parseFloat(String(newValue).replace(',', '.'));\n        stepper.$inputEl.val(stepper.value);\n        return stepper;\n      }\n\n      stepper.value = inputTxt;\n      stepper.$inputEl.val(inputTxt);\n      return stepper;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.value;\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      var stepper = this;\n      if (!stepper.params.formatValue) return value;\n      return stepper.params.formatValue.call(stepper, value);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var stepper = this;\n      stepper.attachEvents();\n\n      if (stepper.$valueEl && stepper.$valueEl.length) {\n        var formattedValue = stepper.formatValue(stepper.value);\n        stepper.$valueEl.html(formattedValue);\n      }\n\n      return stepper;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var stepper = this;\n      stepper.$el.trigger('stepper:beforedestroy', stepper);\n      stepper.emit('local::beforeDestroy stepperBeforeDestroy', stepper);\n      delete stepper.$el[0].f7Stepper;\n      stepper.detachEvents();\n      Utils.deleteProps(stepper);\n      stepper = null;\n    }\n  }]);\n\n  return Stepper;\n}(Framework7Class);\n\nexport default Stepper;","map":null,"metadata":{},"sourceType":"module"}