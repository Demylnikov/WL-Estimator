{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Support from '../../utils/support';\nimport Framework7Class from '../../utils/class';\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Tooltip, _Framework7Class);\n\n  function Tooltip(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, app, params));\n\n    var tooltip = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var defaults = Utils.extend({}, app.params.tooltip); // Extend defaults with modules params\n\n    tooltip.useModulesParams(defaults);\n    tooltip.params = Utils.extend(defaults, params);\n    var targetEl = tooltip.params.targetEl;\n    if (!targetEl) return _possibleConstructorReturn(_this, tooltip);\n    var $targetEl = $(targetEl);\n    if ($targetEl.length === 0) return _possibleConstructorReturn(_this, tooltip);\n    if ($targetEl[0].f7Tooltip) return _possibleConstructorReturn(_this, $targetEl[0].f7Tooltip);\n    var $el = $(tooltip.render()).eq(0);\n    Utils.extend(tooltip, {\n      app: app,\n      $targetEl: $targetEl,\n      targetEl: $targetEl && $targetEl[0],\n      $el: $el,\n      el: $el && $el[0],\n      text: tooltip.params.text || '',\n      visible: false,\n      opened: false\n    });\n    $targetEl[0].f7Tooltip = tooltip;\n    var touchesStart = {};\n    var isTouched;\n\n    function handleTouchStart(e) {\n      if (isTouched) return;\n      isTouched = true;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      tooltip.show(this);\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      var x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      var y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n      var distance = Math.pow(Math.pow(x - touchesStart.x, 2) + Math.pow(y - touchesStart.y, 2), 0.5);\n\n      if (distance > 50) {\n        isTouched = false;\n        tooltip.hide();\n      }\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched) return;\n      isTouched = false;\n      tooltip.hide();\n    }\n\n    function handleMouseEnter() {\n      tooltip.show(this);\n    }\n\n    function handleMouseLeave() {\n      tooltip.hide();\n    }\n\n    function handleTransitionEnd() {\n      if (!$el.hasClass('tooltip-in')) {\n        $el.removeClass('tooltip-out').remove();\n      }\n    }\n\n    tooltip.attachEvents = function attachEvents() {\n      $el.on('transitionend webkitTransitionEnd', handleTransitionEnd);\n\n      if (Support.touch) {\n        var passive = Support.passiveListener ? {\n          passive: true\n        } : false;\n        $targetEl.on(app.touchEvents.start, handleTouchStart, passive);\n        app.on('touchmove', handleTouchMove);\n        app.on('touchend:passive', handleTouchEnd);\n      } else {\n        $targetEl.on('mouseenter', handleMouseEnter);\n        $targetEl.on('mouseleave', handleMouseLeave);\n      }\n    };\n\n    tooltip.detachEvents = function detachEvents() {\n      $el.off('transitionend webkitTransitionEnd', handleTransitionEnd);\n\n      if (Support.touch) {\n        var passive = Support.passiveListener ? {\n          passive: true\n        } : false;\n        $targetEl.off(app.touchEvents.start, handleTouchStart, passive);\n        app.off('touchmove', handleTouchMove);\n        app.off('touchend:passive', handleTouchEnd);\n      } else {\n        $targetEl.off('mouseenter', handleMouseEnter);\n        $targetEl.off('mouseleave', handleMouseLeave);\n      }\n    }; // Install Modules\n\n\n    tooltip.useModules();\n    tooltip.init();\n    return _possibleConstructorReturn(_this, tooltip);\n  }\n\n  _createClass(Tooltip, [{\n    key: \"position\",\n    value: function position(targetEl) {\n      var tooltip = this;\n      var $el = tooltip.$el,\n          app = tooltip.app;\n      $el.css({\n        left: '',\n        top: ''\n      });\n      var $targetEl = $(targetEl || tooltip.targetEl);\n      var _ref = [$el.width(), $el.height()],\n          width = _ref[0],\n          height = _ref[1];\n      $el.css({\n        left: '',\n        top: ''\n      });\n      var targetWidth;\n      var targetHeight;\n      var targetOffsetLeft;\n      var targetOffsetTop;\n\n      if ($targetEl && $targetEl.length > 0) {\n        targetWidth = $targetEl.outerWidth();\n        targetHeight = $targetEl.outerHeight();\n        var targetOffset = $targetEl.offset();\n        targetOffsetLeft = targetOffset.left - app.left;\n        targetOffsetTop = targetOffset.top - app.top;\n        var targetParentPage = $targetEl.parents('.page');\n\n        if (targetParentPage.length > 0) {\n          targetOffsetTop -= targetParentPage[0].scrollTop;\n        }\n      }\n\n      var _ref2 = [0, 0, 0],\n          left = _ref2[0],\n          top = _ref2[1]; // Top Position\n\n      var position = 'top';\n\n      if (height < targetOffsetTop) {\n        // On top\n        top = targetOffsetTop - height;\n      } else if (height < app.height - targetOffsetTop - targetHeight) {\n        // On bottom\n        position = 'bottom';\n        top = targetOffsetTop + targetHeight;\n      } else {\n        // On middle\n        position = 'middle';\n        top = targetHeight / 2 + targetOffsetTop - height / 2;\n\n        if (top <= 0) {\n          top = 8;\n        } else if (top + height >= app.height) {\n          top = app.height - height - 8;\n        }\n      } // Horizontal Position\n\n\n      if (position === 'top' || position === 'bottom') {\n        left = targetWidth / 2 + targetOffsetLeft - width / 2;\n        if (left < 8) left = 8;\n        if (left + width > app.width) left = app.width - width - 8;\n        if (left < 0) left = 0;\n      } else if (position === 'middle') {\n        left = targetOffsetLeft - width;\n\n        if (left < 8 || left + width > app.width) {\n          if (left < 8) left = targetOffsetLeft + targetWidth;\n          if (left + width > app.width) left = app.width - width - 8;\n        }\n      } // Apply Styles\n\n\n      $el.css({\n        top: \"\".concat(top, \"px\"),\n        left: \"\".concat(left, \"px\")\n      });\n    }\n  }, {\n    key: \"show\",\n    value: function show(aroundEl) {\n      var tooltip = this;\n      var app = tooltip.app,\n          $el = tooltip.$el,\n          $targetEl = tooltip.$targetEl;\n      app.root.append($el);\n      tooltip.position(aroundEl);\n      var $aroundEl = $(aroundEl);\n      tooltip.visible = true;\n      tooltip.opened = true;\n      $targetEl.trigger('tooltip:show', tooltip);\n      $el.trigger('tooltip:show', tooltip);\n\n      if ($aroundEl.length && $aroundEl[0] !== $targetEl[0]) {\n        $aroundEl.trigger('tooltip:show', tooltip);\n      }\n\n      tooltip.emit('local::show tooltipShow', tooltip);\n      $el.removeClass('tooltip-out').addClass('tooltip-in');\n      return tooltip;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var tooltip = this;\n      var $el = tooltip.$el,\n          $targetEl = tooltip.$targetEl;\n      tooltip.visible = false;\n      tooltip.opened = false;\n      $targetEl.trigger('tooltip:hide', tooltip);\n      $el.trigger('tooltip:hide', tooltip);\n      tooltip.emit('local::hide tooltipHide', tooltip);\n      $el.addClass('tooltip-out').removeClass('tooltip-in');\n      return tooltip;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tooltip = this;\n      if (tooltip.params.render) return tooltip.params.render.call(tooltip, tooltip);\n      var _tooltip$params = tooltip.params,\n          cssClass = _tooltip$params.cssClass,\n          text = _tooltip$params.text;\n      return \"\\n      <div class=\\\"tooltip \".concat(cssClass || '', \"\\\">\\n        <div class=\\\"tooltip-content\\\">\").concat(text || '', \"</div>\\n      </div>\\n    \").trim();\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(newText) {\n      var tooltip = this;\n\n      if (typeof newText === 'undefined') {\n        return tooltip;\n      }\n\n      tooltip.params.text = newText;\n      tooltip.text = newText;\n\n      if (tooltip.$el) {\n        tooltip.$el.children('.tooltip-content').html(newText);\n      }\n\n      if (tooltip.opened) {\n        tooltip.position();\n      }\n\n      return tooltip;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var tooltip = this;\n      tooltip.attachEvents();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var tooltip = this;\n      if (!tooltip.$targetEl || tooltip.destroyed) return;\n      tooltip.$targetEl.trigger('tooltip:beforedestroy', tooltip);\n      tooltip.emit('local::beforeDestroy tooltipBeforeDestroy', tooltip);\n      tooltip.$el.remove();\n      delete tooltip.$targetEl[0].f7Tooltip;\n      tooltip.detachEvents();\n      Utils.deleteProps(tooltip);\n      tooltip.destroyed = true;\n    }\n  }]);\n\n  return Tooltip;\n}(Framework7Class);\n\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}