{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Support from '../../utils/support';\nvar CardExpandable = {\n  open: function open() {\n    var cardEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.card-expandable';\n    var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var app = this;\n    if ($('.card-opened').length) return;\n    var $cardEl = $(cardEl).eq(0);\n    if (!$cardEl || !$cardEl.length) return;\n    if ($cardEl.hasClass('card-opened') || $cardEl.hasClass('card-opening') || $cardEl.hasClass('card-closing')) return;\n    var $pageEl = $cardEl.parents('.page').eq(0);\n    if (!$pageEl.length) return;\n    var prevented;\n\n    function prevent() {\n      prevented = true;\n    }\n\n    $cardEl.trigger('card:beforeopen', {\n      prevent: prevent\n    });\n    app.emit('cardBeforeOpen', $cardEl[0], prevent);\n    if (prevented) return;\n    var $backropEl;\n\n    if (app.params.card.backrop) {\n      $backropEl = $cardEl.parents('.page-content').find('.card-backdrop');\n\n      if (!$backropEl.length) {\n        $backropEl = $('<div class=\"card-backdrop\"></div>');\n        $cardEl.parents('.page-content').append($backropEl);\n      }\n    }\n\n    var $navbarEl;\n    var $toolbarEl;\n\n    if (app.params.card.hideNavbarOnOpen) {\n      $navbarEl = $pageEl.children('.navbar');\n\n      if (!$navbarEl.length) {\n        if ($pageEl[0].f7Page) $navbarEl = $pageEl[0].f7Page.$navbarEl;\n      }\n    }\n\n    if (app.params.card.hideToolbarOnOpen) {\n      $toolbarEl = $pageEl.children('.toolbar');\n\n      if (!$toolbarEl.length) {\n        $toolbarEl = $pageEl.parents('.view').children('.toolbar');\n      }\n\n      if (!$toolbarEl.length) {\n        $toolbarEl = $pageEl.parents('.views').children('.toolbar');\n      }\n    }\n\n    var currTransform = $cardEl.css('transform');\n    var hasTransform;\n\n    if (currTransform && currTransform.match(/[2-9]/)) {\n      hasTransform = true;\n    }\n\n    var $cardContentEl = $cardEl.children('.card-content');\n    var $cardSizeEl = $(document.createElement('div')).addClass('card-expandable-size');\n    $cardEl.append($cardSizeEl);\n    var cardWidth = $cardEl[0].offsetWidth;\n    var cardHeight = $cardEl[0].offsetHeight;\n    var pageWidth = $pageEl[0].offsetWidth;\n    var pageHeight = $pageEl[0].offsetHeight;\n    var maxWidth = $cardSizeEl[0].offsetWidth || pageWidth;\n    var maxHeight = $cardSizeEl[0].offsetHeight || pageHeight;\n    var scaleX = maxWidth / cardWidth;\n    var scaleY = maxHeight / cardHeight;\n    var offset = $cardEl.offset();\n    var cardLeftOffset;\n    var cardTopOffset;\n\n    if (hasTransform) {\n      cardLeftOffset = $cardEl[0].offsetLeft;\n      cardTopOffset = $cardEl[0].offsetTop - $cardEl.parents('.page-content')[0].scrollTop;\n    } else {\n      cardLeftOffset = offset.left;\n      cardTopOffset = offset.top - $pageEl.offset().top;\n      if (app.rtl) cardLeftOffset -= $cardEl[0].scrollLeft;\n    }\n\n    cardLeftOffset -= (pageWidth - maxWidth) / 2;\n    cardTopOffset -= (pageHeight - maxHeight) / 2;\n    var cardRightOffset = maxWidth - cardWidth - cardLeftOffset;\n\n    if (app.rtl) {\n      var _ref = [cardRightOffset, cardLeftOffset];\n      cardLeftOffset = _ref[0];\n      cardRightOffset = _ref[1];\n    }\n\n    var cardBottomOffset = maxHeight - cardHeight - cardTopOffset;\n    var translateX = (cardRightOffset - cardLeftOffset) / 2;\n    var translateY = (cardBottomOffset - cardTopOffset) / 2;\n\n    if (app.params.card.hideNavbarOnOpen && $navbarEl && $navbarEl.length) {\n      app.navbar.hide($navbarEl, animate);\n    }\n\n    if (app.params.card.hideToolbarOnOpen && $toolbarEl && $toolbarEl.length) {\n      app.toolbar.hide($toolbarEl, animate);\n    }\n\n    if ($backropEl) {\n      $backropEl.removeClass('card-backdrop-out').addClass('card-backdrop-in');\n    }\n\n    $cardEl.removeClass('card-transitioning');\n\n    if (animate) {\n      $cardEl.addClass('card-opening');\n    }\n\n    $cardEl.trigger('card:open');\n    app.emit('cardOpen', $cardEl[0]);\n\n    function transitionEnd() {\n      $cardEl.addClass('card-opened');\n      $cardEl.removeClass('card-opening');\n      $cardEl.trigger('card:opened');\n      app.emit('cardOpened', $cardEl[0]);\n    }\n\n    $cardContentEl.css({\n      width: \"\".concat(maxWidth, \"px\"),\n      height: \"\".concat(maxHeight, \"px\")\n    }).transform(\"translate3d(\".concat(app.rtl ? cardLeftOffset + translateX : -cardLeftOffset - translateX, \"px, 0px, 0) scale(\").concat(1 / scaleX, \", \").concat(1 / scaleY, \")\"));\n    $cardEl.transform(\"translate3d(\".concat(translateX, \"px, \").concat(translateY, \"px, 0) scale(\").concat(scaleX, \", \").concat(scaleY, \")\"));\n\n    if (animate) {\n      $cardEl.transitionEnd(function () {\n        transitionEnd();\n      });\n    } else {\n      transitionEnd();\n    }\n\n    $pageEl.addClass('page-with-card-opened');\n\n    function onResize() {\n      $cardEl.removeClass('card-transitioning');\n      cardWidth = $cardEl[0].offsetWidth;\n      cardHeight = $cardEl[0].offsetHeight;\n      pageWidth = $pageEl[0].offsetWidth;\n      pageHeight = $pageEl[0].offsetHeight;\n      maxWidth = $cardSizeEl[0].offsetWidth || pageWidth;\n      maxHeight = $cardSizeEl[0].offsetHeight || pageHeight;\n      scaleX = maxWidth / cardWidth;\n      scaleY = maxHeight / cardHeight;\n      $cardEl.transform('translate3d(0px, 0px, 0) scale(1)');\n      offset = $cardEl.offset();\n      cardLeftOffset = offset.left - (pageWidth - maxWidth) / 2;\n      if (app.rtl) cardLeftOffset -= $cardEl[0].scrollLeft;\n      cardTopOffset = offset.top - (pageHeight - maxHeight) / 2;\n      cardRightOffset = maxWidth - cardWidth - cardLeftOffset;\n      cardBottomOffset = maxHeight - cardHeight - cardTopOffset;\n\n      if (app.rtl) {\n        var _ref2 = [cardRightOffset, cardLeftOffset];\n        cardLeftOffset = _ref2[0];\n        cardRightOffset = _ref2[1];\n      }\n\n      translateX = (cardRightOffset - cardLeftOffset) / 2;\n      translateY = (cardBottomOffset - cardTopOffset) / 2;\n      $cardEl.transform(\"translate3d(\".concat(translateX, \"px, \").concat(translateY, \"px, 0) scale(\").concat(scaleX, \", \").concat(scaleY, \")\"));\n      $cardContentEl.css({\n        width: \"\".concat(maxWidth, \"px\"),\n        height: \"\".concat(maxHeight, \"px\")\n      }).transform(\"translate3d(\".concat(app.rtl ? cardLeftOffset + translateX : -cardLeftOffset - translateX, \"px, 0px, 0) scale(\").concat(1 / scaleX, \", \").concat(1 / scaleY, \")\"));\n    }\n\n    var cardScrollTop;\n    var isTouched;\n    var isMoved;\n    var touchStartX;\n    var touchStartY;\n    var touchEndX;\n    var touchEndY;\n    var isScrolling;\n    var progress;\n    var isV;\n    var isH;\n\n    function onTouchStart(e) {\n      if (!$(e.target).closest($cardEl).length) return;\n      if (!$cardEl.hasClass('card-opened')) return;\n      cardScrollTop = $cardContentEl.scrollTop();\n      isTouched = true;\n      touchStartX = e.targetTouches[0].pageX;\n      touchStartY = e.targetTouches[0].pageY;\n      isScrolling = undefined;\n      isV = false;\n      isH = false;\n    }\n\n    function onTouchMove(e) {\n      if (!isTouched) return;\n      touchEndX = e.targetTouches[0].pageX;\n      touchEndY = e.targetTouches[0].pageY;\n\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(touchEndY - touchStartY) > Math.abs(touchEndX - touchStartX));\n      }\n\n      if (!isH && !isV) {\n        if (!isScrolling && e.targetTouches[0].clientX <= 50) {\n          isH = true;\n        } else {\n          isV = true;\n        }\n      }\n\n      if (!(isH || isV) || isV && cardScrollTop !== 0) {\n        isTouched = true;\n        isMoved = true;\n        return;\n      }\n\n      if (!isMoved) {\n        $cardEl.removeClass('card-transitioning');\n      }\n\n      isMoved = true;\n      progress = isV ? Math.max((touchEndY - touchStartY) / 150, 0) : Math.max((touchEndX - touchStartX) / (cardWidth / 2), 0);\n\n      if (progress > 0 && isV || isH) {\n        if (isV && app.device.ios) {\n          $cardContentEl.css('-webkit-overflow-scrolling', 'auto');\n          $cardContentEl.scrollTop(0);\n        }\n\n        e.preventDefault();\n      }\n\n      if (progress > 1) progress = Math.pow(progress, 0.3);\n\n      if (progress > (isV ? 1.3 : 1.1)) {\n        isTouched = false;\n        isMoved = false;\n        app.card.close($cardEl);\n      } else {\n        $cardEl.transform(\"translate3d(\".concat(translateX, \"px, \").concat(translateY, \"px, 0) scale(\").concat(scaleX * (1 - progress * 0.2), \", \").concat(scaleY * (1 - progress * 0.2), \")\"));\n      }\n    }\n\n    function onTouchEnd() {\n      if (!isTouched || !isMoved) return;\n      isTouched = false;\n      isMoved = false;\n\n      if (app.device.ios) {\n        $cardContentEl.css('-webkit-overflow-scrolling', '');\n      }\n\n      if (progress >= 0.8) {\n        app.card.close($cardEl);\n      } else {\n        $cardEl.addClass('card-transitioning').transform(\"translate3d(\".concat(translateX, \"px, \").concat(translateY, \"px, 0) scale(\").concat(scaleX, \", \").concat(scaleY, \")\"));\n      }\n    }\n\n    $cardEl[0].detachEventHandlers = function detachEventHandlers() {\n      app.off('resize', onResize);\n\n      if (Support.touch && app.params.card.swipeToClose) {\n        app.off('touchstart:passive', onTouchStart);\n        app.off('touchmove:active', onTouchMove);\n        app.off('touchend:passive', onTouchEnd);\n      }\n    };\n\n    app.on('resize', onResize);\n\n    if (Support.touch && app.params.card.swipeToClose) {\n      app.on('touchstart:passive', onTouchStart);\n      app.on('touchmove:active', onTouchMove);\n      app.on('touchend:passive', onTouchEnd);\n    }\n  },\n  close: function close() {\n    var cardEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.card-expandable.card-opened';\n    var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var app = this;\n    var $cardEl = $(cardEl).eq(0);\n    if (!$cardEl || !$cardEl.length) return;\n    if (!$cardEl.hasClass('card-opened') || $cardEl.hasClass('card-opening') || $cardEl.hasClass('card-closing')) return;\n    var $cardContentEl = $cardEl.children('.card-content');\n    var $pageEl = $cardEl.parents('.page').eq(0);\n    if (!$pageEl.length) return;\n    var $navbarEl;\n    var $toolbarEl;\n    var $backropEl;\n\n    if (app.params.card.backrop) {\n      $backropEl = $cardEl.parents('.page-content').find('.card-backdrop');\n    }\n\n    if (app.params.card.hideNavbarOnOpen) {\n      $navbarEl = $pageEl.children('.navbar');\n\n      if (!$navbarEl.length) {\n        if ($pageEl[0].f7Page) $navbarEl = $pageEl[0].f7Page.$navbarEl;\n      }\n\n      if ($navbarEl && $navbarEl.length) {\n        app.navbar.show($navbarEl, animate);\n      }\n    }\n\n    if (app.params.card.hideToolbarOnOpen) {\n      $toolbarEl = $pageEl.children('.toolbar');\n\n      if (!$toolbarEl.length) {\n        $toolbarEl = $pageEl.parents('.view').children('.toolbar');\n      }\n\n      if (!$toolbarEl.length) {\n        $toolbarEl = $pageEl.parents('.views').children('.toolbar');\n      }\n\n      if ($toolbarEl && $toolbarEl.length) {\n        app.toolbar.show($toolbarEl, animate);\n      }\n    }\n\n    $pageEl.removeClass('page-with-card-opened');\n\n    if ($backropEl && $backropEl.length) {\n      $backropEl.removeClass('card-backdrop-in').addClass('card-backdrop-out');\n    }\n\n    $cardEl.removeClass('card-opened card-transitioning');\n\n    if (animate) {\n      $cardEl.addClass('card-closing');\n    } else {\n      $cardEl.addClass('card-no-transition');\n    }\n\n    $cardEl.transform('');\n    $cardEl.trigger('card:close');\n    app.emit('cardClose', $cardEl[0]);\n\n    function transitionEnd() {\n      $cardEl.removeClass('card-closing card-no-transition');\n      $cardEl.trigger('card:closed');\n      $cardEl.find('.card-expandable-size').remove();\n      app.emit('cardClosed', $cardEl[0]);\n    }\n\n    $cardContentEl.css({\n      width: '',\n      height: ''\n    }).transform('').scrollTop(0, animate ? 300 : 0);\n\n    if (animate) {\n      $cardContentEl.transitionEnd(function () {\n        transitionEnd();\n      });\n    } else {\n      transitionEnd();\n    }\n\n    if ($cardEl[0].detachEventHandlers) {\n      $cardEl[0].detachEventHandlers();\n      delete $cardEl[0].detachEventHandlers;\n    }\n  },\n  toggle: function toggle() {\n    var cardEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.card-expandable';\n    var animate = arguments.length > 1 ? arguments[1] : undefined;\n    var app = this;\n    var $cardEl = $(cardEl).eq(0);\n    if (!$cardEl.length) return;\n\n    if ($cardEl.hasClass('card-opened')) {\n      app.card.close($cardEl, animate);\n    } else {\n      app.card.open($cardEl, animate);\n    }\n  }\n};\nexport default {\n  name: 'card',\n  params: {\n    card: {\n      hideNavbarOnOpen: true,\n      hideToolbarOnOpen: true,\n      swipeToClose: true,\n      closeByBackdropClick: true,\n      backrop: true\n    }\n  },\n  create: function create() {\n    var app = this;\n    Utils.extend(app, {\n      card: {\n        open: CardExpandable.open.bind(app),\n        close: CardExpandable.close.bind(app),\n        toggle: CardExpandable.toggle.bind(app)\n      }\n    });\n  },\n  clicks: {\n    '.card-close': function closeCard($clickedEl, data) {\n      var app = this;\n      app.card.close(data.card);\n    },\n    '.card-open': function closeCard($clickedEl, data) {\n      var app = this;\n      app.card.open(data.card);\n    },\n    '.card-expandable': function toggleExpandableCard($clickedEl) {\n      var app = this;\n      if ($clickedEl.hasClass('card-opened') || $clickedEl.hasClass('card-opening') || $clickedEl.hasClass('card-closing')) return;\n      app.card.open($clickedEl);\n    },\n    '.card-backdrop-in': function onBackdropClick() {\n      var app = this;\n      var needToClose = false;\n      if (app.params.card.closeByBackdropClick) needToClose = true;\n      var $openedCardEl = $('.card-opened');\n      if (!$openedCardEl.length) return;\n\n      if ($openedCardEl.attr('data-close-on-backdrop-click') === 'true') {\n        needToClose = true;\n      } else if ($openedCardEl.attr('data-close-on-backdrop-click') === 'false') {\n        needToClose = false;\n      }\n\n      if (needToClose) app.card.close($openedCardEl);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}