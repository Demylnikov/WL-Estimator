{"ast":null,"code":"import $ from 'dom7';\nimport { window, document } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Device from '../../utils/device';\nvar Input = {\n  ignoreTypes: ['checkbox', 'button', 'submit', 'range', 'radio', 'image'],\n  createTextareaResizableShadow: function createTextareaResizableShadow() {\n    var $shadowEl = $(document.createElement('textarea'));\n    $shadowEl.addClass('textarea-resizable-shadow');\n    $shadowEl.prop({\n      disabled: true,\n      readonly: true\n    });\n    Input.textareaResizableShadow = $shadowEl;\n  },\n  textareaResizableShadow: undefined,\n  resizeTextarea: function resizeTextarea(textareaEl) {\n    var app = this;\n    var $textareaEl = $(textareaEl);\n\n    if (!Input.textareaResizableShadow) {\n      Input.createTextareaResizableShadow();\n    }\n\n    var $shadowEl = Input.textareaResizableShadow;\n    if (!$textareaEl.length) return;\n    if (!$textareaEl.hasClass('resizable')) return;\n\n    if (Input.textareaResizableShadow.parents().length === 0) {\n      app.root.append($shadowEl);\n    }\n\n    var styles = window.getComputedStyle($textareaEl[0]);\n    'padding-top padding-bottom padding-left padding-right margin-left margin-right margin-top margin-bottom width font-size font-family font-style font-weight line-height font-variant text-transform letter-spacing border box-sizing display'.split(' ').forEach(function (style) {\n      var styleValue = styles[style];\n\n      if ('font-size line-height letter-spacing width'.split(' ').indexOf(style) >= 0) {\n        styleValue = styleValue.replace(',', '.');\n      }\n\n      $shadowEl.css(style, styleValue);\n    });\n    var currentHeight = $textareaEl[0].clientHeight;\n    $shadowEl.val('');\n    var initialHeight = $shadowEl[0].scrollHeight;\n    $shadowEl.val($textareaEl.val());\n    $shadowEl.css('height', 0);\n    var scrollHeight = $shadowEl[0].scrollHeight;\n\n    if (currentHeight !== scrollHeight) {\n      if (scrollHeight > initialHeight) {\n        $textareaEl.css('height', \"\".concat(scrollHeight, \"px\"));\n        $textareaEl.trigger('textarea:resize', {\n          initialHeight: initialHeight,\n          currentHeight: currentHeight,\n          scrollHeight: scrollHeight\n        });\n      } else if (scrollHeight < currentHeight) {\n        $textareaEl.css('height', '');\n        $textareaEl.trigger('textarea:resize', {\n          initialHeight: initialHeight,\n          currentHeight: currentHeight,\n          scrollHeight: scrollHeight\n        });\n      }\n    }\n  },\n  validate: function validate(inputEl) {\n    var $inputEl = $(inputEl);\n    if (!$inputEl.length) return;\n    var $itemInputEl = $inputEl.parents('.item-input');\n    var $inputWrapEl = $inputEl.parents('.input');\n    var validity = $inputEl[0].validity;\n    var validationMessage = $inputEl.dataset().errorMessage || $inputEl[0].validationMessage || '';\n    if (!validity) return;\n\n    if (!validity.valid) {\n      var $errorEl = $inputEl.nextAll('.item-input-error-message, .input-error-message');\n\n      if (validationMessage) {\n        if ($errorEl.length === 0) {\n          $errorEl = $(\"<div class=\\\"\".concat($inputWrapEl.length ? 'input-error-message' : 'item-input-error-message', \"\\\"></div>\"));\n          $errorEl.insertAfter($inputEl);\n        }\n\n        $errorEl.text(validationMessage);\n      }\n\n      if ($errorEl.length > 0) {\n        $itemInputEl.addClass('item-input-with-error-message');\n        $inputWrapEl.addClass('input-with-eror-message');\n      }\n\n      $itemInputEl.addClass('item-input-invalid');\n      $inputWrapEl.addClass('input-invalid');\n      $inputEl.addClass('input-invalid');\n    } else {\n      $itemInputEl.removeClass('item-input-invalid item-input-with-error-message');\n      $inputWrapEl.removeClass('input-invalid input-with-error-message');\n      $inputEl.removeClass('input-invalid');\n    }\n  },\n  validateInputs: function validateInputs(el) {\n    var app = this;\n    $(el).find('input, textarea, select').each(function (index, inputEl) {\n      app.input.validate(inputEl);\n    });\n  },\n  focus: function focus(inputEl) {\n    var $inputEl = $(inputEl);\n    var type = $inputEl.attr('type');\n    if (Input.ignoreTypes.indexOf(type) >= 0) return;\n    $inputEl.parents('.item-input').addClass('item-input-focused');\n    $inputEl.parents('.input').addClass('input-focused');\n    $inputEl.addClass('input-focused');\n  },\n  blur: function blur(inputEl) {\n    var $inputEl = $(inputEl);\n    $inputEl.parents('.item-input').removeClass('item-input-focused');\n    $inputEl.parents('.input').removeClass('input-focused');\n    $inputEl.removeClass('input-focused');\n  },\n  checkEmptyState: function checkEmptyState(inputEl) {\n    var $inputEl = $(inputEl);\n\n    if (!$inputEl.is('input, select, textarea')) {\n      $inputEl = $inputEl.find('input, select, textarea').eq(0);\n    }\n\n    if (!$inputEl.length) return;\n    var value = $inputEl.val();\n    var $itemInputEl = $inputEl.parents('.item-input');\n    var $inputWrapEl = $inputEl.parents('.input');\n\n    if (value && typeof value === 'string' && value.trim() !== '' || Array.isArray(value) && value.length > 0) {\n      $itemInputEl.addClass('item-input-with-value');\n      $inputWrapEl.addClass('input-with-value');\n      $inputEl.addClass('input-with-value');\n      $inputEl.trigger('input:notempty');\n    } else {\n      $itemInputEl.removeClass('item-input-with-value');\n      $inputWrapEl.removeClass('input-with-value');\n      $inputEl.removeClass('input-with-value');\n      $inputEl.trigger('input:empty');\n    }\n  },\n  scrollIntoView: function scrollIntoView(inputEl) {\n    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var centered = arguments.length > 2 ? arguments[2] : undefined;\n    var force = arguments.length > 3 ? arguments[3] : undefined;\n    var $inputEl = $(inputEl);\n    var $scrollableEl = $inputEl.parents('.page-content, .panel').eq(0);\n\n    if (!$scrollableEl.length) {\n      return false;\n    }\n\n    var contentHeight = $scrollableEl[0].offsetHeight;\n    var contentScrollTop = $scrollableEl[0].scrollTop;\n    var contentPaddingTop = parseInt($scrollableEl.css('padding-top'), 10);\n    var contentPaddingBottom = parseInt($scrollableEl.css('padding-bottom'), 10);\n    var contentOffsetTop = $scrollableEl.offset().top - contentScrollTop;\n    var inputOffsetTop = $inputEl.offset().top - contentOffsetTop;\n    var inputHeight = $inputEl[0].offsetHeight;\n    var min = inputOffsetTop + contentScrollTop - contentPaddingTop;\n    var max = inputOffsetTop + contentScrollTop - contentHeight + contentPaddingBottom + inputHeight;\n    var centeredPosition = min + (max - min) / 2;\n\n    if (contentScrollTop > min) {\n      $scrollableEl.scrollTop(centered ? centeredPosition : min, duration);\n      return true;\n    }\n\n    if (contentScrollTop < max) {\n      $scrollableEl.scrollTop(centered ? centeredPosition : max, duration);\n      return true;\n    }\n\n    if (force) {\n      $scrollableEl.scrollTop(centered ? centeredPosition : max, duration);\n    }\n\n    return false;\n  },\n  init: function init() {\n    var app = this;\n    Input.createTextareaResizableShadow();\n\n    function onFocus() {\n      var inputEl = this;\n\n      if (app.params.input.scrollIntoViewOnFocus) {\n        if (Device.android) {\n          $(window).once('resize', function () {\n            if (document && document.activeElement === inputEl) {\n              app.input.scrollIntoView(inputEl, app.params.input.scrollIntoViewDuration, app.params.input.scrollIntoViewCentered, app.params.input.scrollIntoViewAlways);\n            }\n          });\n        } else {\n          app.input.scrollIntoView(inputEl, app.params.input.scrollIntoViewDuration, app.params.input.scrollIntoViewCentered, app.params.input.scrollIntoViewAlways);\n        }\n      }\n\n      app.input.focus(inputEl);\n    }\n\n    function onBlur() {\n      var $inputEl = $(this);\n      var tag = $inputEl[0].nodeName.toLowerCase();\n      app.input.blur($inputEl);\n\n      if ($inputEl.dataset().validate || $inputEl.attr('validate') !== null || $inputEl.attr('data-validate-on-blur') !== null) {\n        app.input.validate($inputEl);\n      } // Resize textarea\n\n\n      if (tag === 'textarea' && $inputEl.hasClass('resizable')) {\n        if (Input.textareaResizableShadow) Input.textareaResizableShadow.remove();\n      }\n    }\n\n    function onChange() {\n      var $inputEl = $(this);\n      var type = $inputEl.attr('type');\n      var tag = $inputEl[0].nodeName.toLowerCase();\n      if (Input.ignoreTypes.indexOf(type) >= 0) return; // Check Empty State\n\n      app.input.checkEmptyState($inputEl); // Check validation\n\n      if ($inputEl.attr('data-validate-on-blur') === null && ($inputEl.dataset().validate || $inputEl.attr('validate') !== null)) {\n        app.input.validate($inputEl);\n      } // Resize textarea\n\n\n      if (tag === 'textarea' && $inputEl.hasClass('resizable')) {\n        app.input.resizeTextarea($inputEl);\n      }\n    }\n\n    function onInvalid(e) {\n      var $inputEl = $(this);\n\n      if ($inputEl.attr('data-validate-on-blur') === null && ($inputEl.dataset().validate || $inputEl.attr('validate') !== null)) {\n        e.preventDefault();\n        app.input.validate($inputEl);\n      }\n    }\n\n    function clearInput() {\n      var $clicked = $(this);\n      var $inputEl = $clicked.siblings('input, textarea').eq(0);\n      var previousValue = $inputEl.val();\n      $inputEl.val('').trigger('input change').focus().trigger('input:clear', previousValue);\n    }\n\n    $(document).on('click', '.input-clear-button', clearInput);\n    $(document).on('change input', 'input, textarea, select', onChange, true);\n    $(document).on('focus', 'input, textarea, select', onFocus, true);\n    $(document).on('blur', 'input, textarea, select', onBlur, true);\n    $(document).on('invalid', 'input, textarea, select', onInvalid, true);\n  }\n};\nexport default {\n  name: 'input',\n  params: {\n    input: {\n      scrollIntoViewOnFocus: Device.android,\n      scrollIntoViewCentered: false,\n      scrollIntoViewDuration: 0,\n      scrollIntoViewAlways: false\n    }\n  },\n  create: function create() {\n    var app = this;\n    Utils.extend(app, {\n      input: {\n        scrollIntoView: Input.scrollIntoView.bind(app),\n        focus: Input.focus.bind(app),\n        blur: Input.blur.bind(app),\n        validate: Input.validate.bind(app),\n        validateInputs: Input.validateInputs.bind(app),\n        checkEmptyState: Input.checkEmptyState.bind(app),\n        resizeTextarea: Input.resizeTextarea.bind(app),\n        init: Input.init.bind(app)\n      }\n    });\n  },\n  on: {\n    init: function init() {\n      var app = this;\n      app.input.init();\n    },\n    tabMounted: function tabMounted(tabEl) {\n      var app = this;\n      var $tabEl = $(tabEl);\n      $tabEl.find('.item-input, .input').each(function (itemInputIndex, itemInputEl) {\n        var $itemInputEl = $(itemInputEl);\n        $itemInputEl.find('input, select, textarea').each(function (inputIndex, inputEl) {\n          var $inputEl = $(inputEl);\n          if (Input.ignoreTypes.indexOf($inputEl.attr('type')) >= 0) return;\n          app.input.checkEmptyState($inputEl);\n        });\n      });\n      $tabEl.find('textarea.resizable').each(function (textareaIndex, textareaEl) {\n        app.input.resizeTextarea(textareaEl);\n      });\n    },\n    pageInit: function pageInit(page) {\n      var app = this;\n      var $pageEl = page.$el;\n      $pageEl.find('.item-input, .input').each(function (itemInputIndex, itemInputEl) {\n        var $itemInputEl = $(itemInputEl);\n        $itemInputEl.find('input, select, textarea').each(function (inputIndex, inputEl) {\n          var $inputEl = $(inputEl);\n          if (Input.ignoreTypes.indexOf($inputEl.attr('type')) >= 0) return;\n          app.input.checkEmptyState($inputEl);\n        });\n      });\n      $pageEl.find('textarea.resizable').each(function (textareaIndex, textareaEl) {\n        app.input.resizeTextarea(textareaEl);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}