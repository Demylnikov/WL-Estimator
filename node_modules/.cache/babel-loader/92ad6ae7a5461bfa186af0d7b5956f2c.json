{"ast":null,"code":"import _defineProperty from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport { window } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport pickerColumn from './picker-column';\n\nvar Picker =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Picker, _Framework7Class);\n\n  function Picker(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Picker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Picker).call(this, params, [app]));\n\n    var picker = _assertThisInitialized(_assertThisInitialized(_this));\n\n    picker.params = Utils.extend({}, app.params.picker, params);\n    var $containerEl;\n\n    if (picker.params.containerEl) {\n      $containerEl = $(picker.params.containerEl);\n      if ($containerEl.length === 0) return _possibleConstructorReturn(_this, picker);\n    }\n\n    var $inputEl;\n\n    if (picker.params.inputEl) {\n      $inputEl = $(picker.params.inputEl);\n    }\n\n    var view;\n\n    if ($inputEl) {\n      view = $inputEl.parents('.view').length && $inputEl.parents('.view')[0].f7View;\n    }\n\n    if (!view) view = app.views.main;\n    Utils.extend(picker, {\n      app: app,\n      $containerEl: $containerEl,\n      containerEl: $containerEl && $containerEl[0],\n      inline: $containerEl && $containerEl.length > 0,\n      needsOriginFix: app.device.ios || window.navigator.userAgent.toLowerCase().indexOf('safari') >= 0 && window.navigator.userAgent.toLowerCase().indexOf('chrome') < 0 && !app.device.android,\n      cols: [],\n      $inputEl: $inputEl,\n      inputEl: $inputEl && $inputEl[0],\n      initialized: false,\n      opened: false,\n      url: picker.params.url,\n      view: view\n    });\n\n    function onResize() {\n      picker.resizeCols();\n    }\n\n    function onInputClick() {\n      picker.open();\n    }\n\n    function onInputFocus(e) {\n      e.preventDefault();\n    }\n\n    function onHtmlClick(e) {\n      var $targetEl = $(e.target);\n      if (picker.isPopover()) return;\n      if (!picker.opened || picker.closing) return;\n      if ($targetEl.closest('[class*=\"backdrop\"]').length) return;\n\n      if ($inputEl && $inputEl.length > 0) {\n        if ($targetEl[0] !== $inputEl[0] && $targetEl.closest('.sheet-modal').length === 0) {\n          picker.close();\n        }\n      } else if ($(e.target).closest('.sheet-modal').length === 0) {\n        picker.close();\n      }\n    } // Events\n\n\n    Utils.extend(picker, {\n      attachResizeEvent: function attachResizeEvent() {\n        app.on('resize', onResize);\n      },\n      detachResizeEvent: function detachResizeEvent() {\n        app.off('resize', onResize);\n      },\n      attachInputEvents: function attachInputEvents() {\n        picker.$inputEl.on('click', onInputClick);\n\n        if (picker.params.inputReadOnly) {\n          picker.$inputEl.on('focus mousedown', onInputFocus);\n        }\n      },\n      detachInputEvents: function detachInputEvents() {\n        picker.$inputEl.off('click', onInputClick);\n\n        if (picker.params.inputReadOnly) {\n          picker.$inputEl.off('focus mousedown', onInputFocus);\n        }\n      },\n      attachHtmlEvents: function attachHtmlEvents() {\n        app.on('click', onHtmlClick);\n      },\n      detachHtmlEvents: function detachHtmlEvents() {\n        app.off('click', onHtmlClick);\n      }\n    });\n    picker.init();\n    return _possibleConstructorReturn(_this, picker);\n  }\n\n  _createClass(Picker, [{\n    key: \"initInput\",\n    value: function initInput() {\n      var picker = this;\n      if (!picker.$inputEl) return;\n      if (picker.params.inputReadOnly) picker.$inputEl.prop('readOnly', true);\n    }\n  }, {\n    key: \"resizeCols\",\n    value: function resizeCols() {\n      var picker = this;\n      if (!picker.opened) return;\n\n      for (var i = 0; i < picker.cols.length; i += 1) {\n        if (!picker.cols[i].divider) {\n          picker.cols[i].calcSize();\n          picker.cols[i].setValue(picker.cols[i].value, 0, false);\n        }\n      }\n    }\n  }, {\n    key: \"isPopover\",\n    value: function isPopover() {\n      var picker = this;\n      var app = picker.app,\n          modal = picker.modal,\n          params = picker.params;\n      if (params.openIn === 'sheet') return false;\n      if (modal && modal.type !== 'popover') return false;\n\n      if (!picker.inline && picker.inputEl) {\n        if (params.openIn === 'popover') return true;\n\n        if (app.device.ios) {\n          return !!app.device.ipad;\n        }\n\n        if (app.width >= 768) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue() {\n      var picker = this;\n      var value = picker.value,\n          displayValue = picker.displayValue;\n\n      if (picker.params.formatValue) {\n        return picker.params.formatValue.call(picker, value, displayValue);\n      }\n\n      return value.join(' ');\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(values, transition) {\n      var picker = this;\n      var valueIndex = 0;\n\n      if (picker.cols.length === 0) {\n        picker.value = values;\n        picker.updateValue(values);\n        return;\n      }\n\n      for (var i = 0; i < picker.cols.length; i += 1) {\n        if (picker.cols[i] && !picker.cols[i].divider) {\n          picker.cols[i].setValue(values[valueIndex], transition);\n          valueIndex += 1;\n        }\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var picker = this;\n      return picker.value;\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(forceValues) {\n      var picker = this;\n      var newValue = forceValues || [];\n      var newDisplayValue = [];\n      var column;\n\n      if (picker.cols.length === 0) {\n        var noDividerColumns = picker.params.cols.filter(function (c) {\n          return !c.divider;\n        });\n\n        for (var i = 0; i < noDividerColumns.length; i += 1) {\n          column = noDividerColumns[i];\n\n          if (column.displayValues !== undefined && column.values !== undefined && column.values.indexOf(newValue[i]) !== -1) {\n            newDisplayValue.push(column.displayValues[column.values.indexOf(newValue[i])]);\n          } else {\n            newDisplayValue.push(newValue[i]);\n          }\n        }\n      } else {\n        for (var _i = 0; _i < picker.cols.length; _i += 1) {\n          if (!picker.cols[_i].divider) {\n            newValue.push(picker.cols[_i].value);\n            newDisplayValue.push(picker.cols[_i].displayValue);\n          }\n        }\n      }\n\n      if (newValue.indexOf(undefined) >= 0) {\n        return;\n      }\n\n      picker.value = newValue;\n      picker.displayValue = newDisplayValue;\n      picker.emit('local::change pickerChange', picker, picker.value, picker.displayValue);\n\n      if (picker.inputEl) {\n        picker.$inputEl.val(picker.formatValue());\n        picker.$inputEl.trigger('change');\n      }\n    }\n  }, {\n    key: \"initColumn\",\n    value: function initColumn(colEl, updateItems) {\n      var picker = this;\n      pickerColumn.call(picker, colEl, updateItems);\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"destroyColumn\",\n    value: function destroyColumn(colEl) {\n      var picker = this;\n      var $colEl = $(colEl);\n      var index = $colEl.index();\n\n      if (picker.cols[index] && picker.cols[index].destroy) {\n        picker.cols[index].destroy();\n      }\n    }\n  }, {\n    key: \"renderToolbar\",\n    value: function renderToolbar() {\n      var picker = this;\n      if (picker.params.renderToolbar) return picker.params.renderToolbar.call(picker, picker);\n      return \"\\n      <div class=\\\"toolbar toolbar-top no-shadow\\\">\\n        <div class=\\\"toolbar-inner\\\">\\n          <div class=\\\"left\\\"></div>\\n          <div class=\\\"right\\\">\\n            <a href=\\\"#\\\" class=\\\"link sheet-close popover-close\\\">\".concat(picker.params.toolbarCloseText, \"</a>\\n          </div>\\n        </div>\\n      </div>\\n    \").trim();\n    } // eslint-disable-next-line\n\n  }, {\n    key: \"renderColumn\",\n    value: function renderColumn(col, onlyItems) {\n      var colClasses = \"picker-column \".concat(col.textAlign ? \"picker-column-\".concat(col.textAlign) : '', \" \").concat(col.cssClass || '');\n      var columnHtml;\n      var columnItemsHtml;\n\n      if (col.divider) {\n        columnHtml = \"\\n        <div class=\\\"\".concat(colClasses, \" picker-column-divider\\\">\").concat(col.content, \"</div>\\n      \");\n      } else {\n        columnItemsHtml = col.values.map(function (value, index) {\n          return \"\\n        <div class=\\\"picker-item\\\" data-picker-value=\\\"\".concat(value, \"\\\">\\n          <span>\").concat(col.displayValues ? col.displayValues[index] : value, \"</span>\\n        </div>\\n      \");\n        }).join('');\n        columnHtml = \"\\n        <div class=\\\"\".concat(colClasses, \"\\\">\\n          <div class=\\\"picker-items\\\">\").concat(columnItemsHtml, \"</div>\\n        </div>\\n      \");\n      }\n\n      return onlyItems ? columnItemsHtml.trim() : columnHtml.trim();\n    }\n  }, {\n    key: \"renderInline\",\n    value: function renderInline() {\n      var picker = this;\n      var _picker$params = picker.params,\n          rotateEffect = _picker$params.rotateEffect,\n          cssClass = _picker$params.cssClass,\n          toolbar = _picker$params.toolbar;\n      var inlineHtml = \"\\n      <div class=\\\"picker picker-inline \".concat(rotateEffect ? 'picker-3d' : '', \" \").concat(cssClass || '', \"\\\">\\n        \").concat(toolbar ? picker.renderToolbar() : '', \"\\n        <div class=\\\"picker-columns\\\">\\n          \").concat(picker.cols.map(function (col) {\n        return picker.renderColumn(col);\n      }).join(''), \"\\n          <div class=\\\"picker-center-highlight\\\"></div>\\n        </div>\\n      </div>\\n    \").trim();\n      return inlineHtml;\n    }\n  }, {\n    key: \"renderSheet\",\n    value: function renderSheet() {\n      var picker = this;\n      var _picker$params2 = picker.params,\n          rotateEffect = _picker$params2.rotateEffect,\n          cssClass = _picker$params2.cssClass,\n          toolbar = _picker$params2.toolbar;\n      var sheetHtml = \"\\n      <div class=\\\"sheet-modal picker picker-sheet \".concat(rotateEffect ? 'picker-3d' : '', \" \").concat(cssClass || '', \"\\\">\\n        \").concat(toolbar ? picker.renderToolbar() : '', \"\\n        <div class=\\\"sheet-modal-inner picker-columns\\\">\\n          \").concat(picker.cols.map(function (col) {\n        return picker.renderColumn(col);\n      }).join(''), \"\\n          <div class=\\\"picker-center-highlight\\\"></div>\\n        </div>\\n      </div>\\n    \").trim();\n      return sheetHtml;\n    }\n  }, {\n    key: \"renderPopover\",\n    value: function renderPopover() {\n      var picker = this;\n      var _picker$params3 = picker.params,\n          rotateEffect = _picker$params3.rotateEffect,\n          cssClass = _picker$params3.cssClass,\n          toolbar = _picker$params3.toolbar;\n      var popoverHtml = \"\\n      <div class=\\\"popover picker-popover\\\">\\n        <div class=\\\"popover-inner\\\">\\n          <div class=\\\"picker \".concat(rotateEffect ? 'picker-3d' : '', \" \").concat(cssClass || '', \"\\\">\\n            \").concat(toolbar ? picker.renderToolbar() : '', \"\\n            <div class=\\\"picker-columns\\\">\\n              \").concat(picker.cols.map(function (col) {\n        return picker.renderColumn(col);\n      }).join(''), \"\\n              <div class=\\\"picker-center-highlight\\\"></div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    \").trim();\n      return popoverHtml;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var picker = this;\n      if (picker.params.render) return picker.params.render.call(picker);\n\n      if (!picker.inline) {\n        if (picker.isPopover()) return picker.renderPopover();\n        return picker.renderSheet();\n      }\n\n      return picker.renderInline();\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      var picker = this;\n      var initialized = picker.initialized,\n          $el = picker.$el,\n          app = picker.app,\n          $inputEl = picker.$inputEl,\n          inline = picker.inline,\n          value = picker.value,\n          params = picker.params;\n      picker.opened = true;\n      picker.closing = false;\n      picker.opening = true; // Init main events\n\n      picker.attachResizeEvent(); // Init cols\n\n      $el.find('.picker-column').each(function (index, colEl) {\n        var updateItems = true;\n\n        if (!initialized && params.value || initialized && value) {\n          updateItems = false;\n        }\n\n        picker.initColumn(colEl, updateItems);\n      }); // Set value\n\n      if (!initialized) {\n        if (value) picker.setValue(value, 0);else if (params.value) {\n          picker.setValue(params.value, 0);\n        }\n      } else if (value) {\n        picker.setValue(value, 0);\n      } // Extra focus\n\n\n      if (!inline && $inputEl && $inputEl.length && app.theme === 'md') {\n        $inputEl.trigger('focus');\n      }\n\n      picker.initialized = true; // Trigger events\n\n      if ($el) {\n        $el.trigger('picker:open', picker);\n      }\n\n      if ($inputEl) {\n        $inputEl.trigger('picker:open', picker);\n      }\n\n      picker.emit('local::open pickerOpen', picker);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened() {\n      var picker = this;\n      picker.opening = false;\n\n      if (picker.$el) {\n        picker.$el.trigger('picker:opened', picker);\n      }\n\n      if (picker.$inputEl) {\n        picker.$inputEl.trigger('picker:opened', picker);\n      }\n\n      picker.emit('local::opened pickerOpened', picker);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      var picker = this;\n      var app = picker.app;\n      picker.opening = false;\n      picker.closing = true; // Detach events\n\n      picker.detachResizeEvent();\n      picker.cols.forEach(function (col) {\n        if (col.destroy) col.destroy();\n      });\n\n      if (picker.$inputEl && app.theme === 'md') {\n        picker.$inputEl.trigger('blur');\n      }\n\n      if (picker.$el) {\n        picker.$el.trigger('picker:close', picker);\n      }\n\n      if (picker.$inputEl) {\n        picker.$inputEl.trigger('picker:close', picker);\n      }\n\n      picker.emit('local::close pickerClose', picker);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed() {\n      var picker = this;\n      picker.opened = false;\n      picker.closing = false;\n\n      if (!picker.inline) {\n        Utils.nextTick(function () {\n          if (picker.modal && picker.modal.el && picker.modal.destroy) {\n            if (!picker.params.routableModals) {\n              picker.modal.destroy();\n            }\n          }\n\n          delete picker.modal;\n        });\n      }\n\n      if (picker.$el) {\n        picker.$el.trigger('picker:closed', picker);\n      }\n\n      if (picker.$inputEl) {\n        picker.$inputEl.trigger('picker:closed', picker);\n      }\n\n      picker.emit('local::closed pickerClosed', picker);\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var picker = this;\n      var app = picker.app,\n          opened = picker.opened,\n          inline = picker.inline,\n          $inputEl = picker.$inputEl;\n      if (opened) return;\n\n      if (picker.cols.length === 0 && picker.params.cols.length) {\n        picker.params.cols.forEach(function (col) {\n          picker.cols.push(col);\n        });\n      }\n\n      if (inline) {\n        picker.$el = $(picker.render());\n        picker.$el[0].f7Picker = picker;\n        picker.$containerEl.append(picker.$el);\n        picker.onOpen();\n        picker.onOpened();\n        return;\n      }\n\n      var isPopover = picker.isPopover();\n      var modalType = isPopover ? 'popover' : 'sheet';\n      var modalParams = {\n        targetEl: $inputEl,\n        scrollToEl: picker.params.scrollToInput ? $inputEl : undefined,\n        content: picker.render(),\n        backdrop: isPopover,\n        on: {\n          open: function open() {\n            var modal = this;\n            picker.modal = modal;\n            picker.$el = isPopover ? modal.$el.find('.picker') : modal.$el;\n            picker.$el[0].f7Picker = picker;\n            picker.onOpen();\n          },\n          opened: function opened() {\n            picker.onOpened();\n          },\n          close: function close() {\n            picker.onClose();\n          },\n          closed: function closed() {\n            picker.onClosed();\n          }\n        }\n      };\n\n      if (picker.params.routableModals) {\n        picker.view.router.navigate({\n          url: picker.url,\n          route: _defineProperty({\n            path: picker.url\n          }, modalType, modalParams)\n        });\n      } else {\n        picker.modal = app[modalType].create(modalParams);\n        picker.modal.open();\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var picker = this;\n      var opened = picker.opened,\n          inline = picker.inline;\n      if (!opened) return;\n\n      if (inline) {\n        picker.onClose();\n        picker.onClosed();\n        return;\n      }\n\n      if (picker.params.routableModals) {\n        picker.view.router.back();\n      } else {\n        picker.modal.close();\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var picker = this;\n      picker.initInput();\n\n      if (picker.inline) {\n        picker.open();\n        picker.emit('local::init pickerInit', picker);\n        return;\n      }\n\n      if (!picker.initialized && picker.params.value) {\n        picker.setValue(picker.params.value);\n      } // Attach input Events\n\n\n      if (picker.$inputEl) {\n        picker.attachInputEvents();\n      }\n\n      if (picker.params.closeByOutsideClick) {\n        picker.attachHtmlEvents();\n      }\n\n      picker.emit('local::init pickerInit', picker);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var picker = this;\n      if (picker.destroyed) return;\n      var $el = picker.$el;\n      picker.emit('local::beforeDestroy pickerBeforeDestroy', picker);\n      if ($el) $el.trigger('picker:beforedestroy', picker);\n      picker.close(); // Detach Events\n\n      if (picker.$inputEl) {\n        picker.detachInputEvents();\n      }\n\n      if (picker.params.closeByOutsideClick) {\n        picker.detachHtmlEvents();\n      }\n\n      if ($el && $el.length) delete picker.$el[0].f7Picker;\n      Utils.deleteProps(picker);\n      picker.destroyed = true;\n    }\n  }]);\n\n  return Picker;\n}(Framework7Class);\n\nexport default Picker;","map":null,"metadata":{},"sourceType":"module"}