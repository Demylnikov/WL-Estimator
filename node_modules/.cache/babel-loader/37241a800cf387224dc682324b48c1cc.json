{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7CardHeader from './card-header';\nimport F7CardContent from './card-content';\nimport F7CardFooter from './card-footer';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Card =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(F7Card, _React$Component);\n\n  function F7Card(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Card);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Card).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_assertThisInitialized(_this)), 'onBeforeOpen onOpen onOpened onClose onClosed'.split(' '));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Card, [{\n    key: \"open\",\n    value: function open() {\n      var self = this;\n      if (!self.refs.el) return;\n      self.$f7.card.open(self.refs.el);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var self = this;\n      if (!self.refs.el) return;\n      self.$f7.card.close(self.refs.el);\n    }\n  }, {\n    key: \"onBeforeOpen\",\n    value: function onBeforeOpen(e) {\n      this.dispatchEvent('cardBeforeOpen card:beforeopen', e, e.detail.prevent);\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(e) {\n      this.dispatchEvent('cardOpen card:open', e);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(e) {\n      this.dispatchEvent('cardOpened card:opened', e);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(e) {\n      this.dispatchEvent('cardClose card:close', e);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(e) {\n      this.dispatchEvent('cardClosed card:closed', e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          id = props.id,\n          style = props.style,\n          title = props.title,\n          content = props.content,\n          footer = props.footer,\n          padding = props.padding,\n          outline = props.outline,\n          expandable = props.expandable,\n          expandableAnimateWidth = props.expandableAnimateWidth,\n          noShadow = props.noShadow,\n          noBorder = props.noBorder;\n      var headerEl;\n      var contentEl;\n      var footerEl;\n      var classes = Utils.classNames(className, 'card', {\n        'card-outline': outline,\n        'card-expandable': expandable,\n        'card-expandable-animate-width': expandableAnimateWidth,\n        'no-shadow': noShadow,\n        'no-border': noBorder\n      }, Mixins.colorClasses(props));\n\n      if (title || self.slots && self.slots.header) {\n        headerEl = React.createElement(F7CardHeader, null, title, this.slots['header']);\n      }\n\n      if (content || self.slots && self.slots.content) {\n        contentEl = React.createElement(F7CardContent, {\n          padding: padding\n        }, content, this.slots['content']);\n      }\n\n      if (footer || self.slots && self.slots.footer) {\n        footerEl = React.createElement(F7CardFooter, null, footer, this.slots['footer']);\n      }\n\n      return React.createElement('div', {\n        id: id,\n        style: style,\n        className: classes,\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        }\n      }, headerEl, contentEl, footerEl, this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      if (!self.props.expandable) return;\n      var el = self.refs.el;\n      if (!el) return;\n      el.removeEventListener('card:beforeopen', self.onBeforeOpen);\n      el.removeEventListener('card:open', self.onOpen);\n      el.removeEventListener('card:opened', self.onOpened);\n      el.removeEventListener('card:close', self.onClose);\n      el.removeEventListener('card:closed', self.onClosed);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      if (!self.props.expandable) return;\n      var el = self.refs.el;\n      if (!el) return;\n      el.addEventListener('card:beforeopen', self.onBeforeOpen);\n      el.addEventListener('card:open', self.onOpen);\n      el.addEventListener('card:opened', self.onOpened);\n      el.addEventListener('card:close', self.onClose);\n      el.addEventListener('card:closed', self.onClosed);\n\n      if (self.props.expandable && self.props.expandableOpened) {\n        self.$f7ready(function () {\n          self.$f7.card.open(el, false);\n        });\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.expandableOpened', prevProps, prevState, function (expandableOpened) {\n        var self = _this3;\n\n        if (expandableOpened) {\n          self.open();\n        } else {\n          self.close();\n        }\n      });\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Card;\n}(React.Component);\n\n__reactComponentSetProps(F7Card, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  title: [String, Number],\n  content: [String, Number],\n  footer: [String, Number],\n  outline: Boolean,\n  expandable: Boolean,\n  expandableAnimateWidth: Boolean,\n  expandableOpened: Boolean,\n  noShadow: Boolean,\n  noBorder: Boolean,\n  padding: {\n    type: Boolean,\n    default: true\n  }\n}, Mixins.colorProps));\n\nF7Card.displayName = 'f7-card';\nexport default F7Card;","map":null,"metadata":{},"sourceType":"module"}