{"ast":null,"code":"import _defineProperty from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\n/* eslint \"no-useless-escape\": \"off\" */\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nvar Autocomplete =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(Autocomplete, _Framework7Class);\n\n  function Autocomplete(app) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Autocomplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Autocomplete).call(this, params, [app]));\n\n    var ac = _assertThisInitialized(_assertThisInitialized(_this));\n\n    ac.app = app;\n    var defaults = Utils.extend({\n      on: {}\n    }, app.params.autocomplete); // Extend defaults with modules params\n\n    ac.useModulesParams(defaults);\n    ac.params = Utils.extend(defaults, params);\n    var $openerEl;\n\n    if (ac.params.openerEl) {\n      $openerEl = $(ac.params.openerEl);\n      if ($openerEl.length) $openerEl[0].f7Autocomplete = ac;\n    }\n\n    var $inputEl;\n\n    if (ac.params.inputEl) {\n      $inputEl = $(ac.params.inputEl);\n      if ($inputEl.length) $inputEl[0].f7Autocomplete = ac;\n    }\n\n    var view;\n\n    if (ac.params.view) {\n      view = ac.params.view;\n    } else if ($openerEl || $inputEl) {\n      view = app.views.get($openerEl || $inputEl);\n    }\n\n    if (!view) view = app.views.main;\n    var id = Utils.id();\n    var url = params.url;\n\n    if (!url && $openerEl && $openerEl.length) {\n      if ($openerEl.attr('href')) url = $openerEl.attr('href');else if ($openerEl.find('a').length > 0) {\n        url = $openerEl.find('a').attr('href');\n      }\n    }\n\n    if (!url || url === '#' || url === '') url = ac.params.url;\n    var inputType = ac.params.multiple ? 'checkbox' : 'radio';\n    Utils.extend(ac, {\n      $openerEl: $openerEl,\n      openerEl: $openerEl && $openerEl[0],\n      $inputEl: $inputEl,\n      inputEl: $inputEl && $inputEl[0],\n      id: id,\n      view: view,\n      url: url,\n      value: ac.params.value || [],\n      inputType: inputType,\n      inputName: \"\".concat(inputType, \"-\").concat(id),\n      $modalEl: undefined,\n      $dropdownEl: undefined\n    });\n    var previousQuery = '';\n\n    function onInputChange() {\n      var query = ac.$inputEl.val().trim();\n      if (!ac.params.source) return;\n      ac.params.source.call(ac, query, function (items) {\n        var itemsHTML = '';\n        var limit = ac.params.limit ? Math.min(ac.params.limit, items.length) : items.length;\n        ac.items = items;\n        var regExp;\n\n        if (ac.params.highlightMatches) {\n          query = query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n          regExp = new RegExp(\"(\".concat(query, \")\"), 'i');\n        }\n\n        var firstValue;\n        var firstItem;\n\n        for (var i = 0; i < limit; i += 1) {\n          var itemValue = typeof items[i] === 'object' ? items[i][ac.params.valueProperty] : items[i];\n          var itemText = typeof items[i] === 'object' ? items[i][ac.params.textProperty] : items[i];\n\n          if (i === 0) {\n            firstValue = itemValue;\n            firstItem = ac.items[i];\n          }\n\n          itemsHTML += ac.renderItem({\n            value: itemValue,\n            text: ac.params.highlightMatches ? itemText.replace(regExp, '<b>$1</b>') : itemText\n          }, i);\n        }\n\n        if (itemsHTML === '' && query === '' && ac.params.dropdownPlaceholderText) {\n          itemsHTML += ac.renderItem({\n            placeholder: true,\n            text: ac.params.dropdownPlaceholderText\n          });\n        }\n\n        ac.$dropdownEl.find('ul').html(itemsHTML);\n\n        if (ac.params.typeahead) {\n          if (!firstValue || !firstItem) {\n            return;\n          }\n\n          if (firstValue.toLowerCase().indexOf(query.toLowerCase()) !== 0) {\n            return;\n          }\n\n          if (previousQuery.toLowerCase() === query.toLowerCase()) {\n            ac.value = [];\n            return;\n          }\n\n          if (previousQuery.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n            previousQuery = query;\n            ac.value = [];\n            return;\n          }\n\n          $inputEl.val(firstValue);\n          $inputEl[0].setSelectionRange(query.length, firstValue.length);\n          var previousValue = typeof ac.value[0] === 'object' ? ac.value[0][ac.params.valueProperty] : ac.value[0];\n\n          if (!previousValue || firstValue.toLowerCase() !== previousValue.toLowerCase()) {\n            ac.value = [firstItem];\n            ac.emit('local::change autocompleteChange', [firstItem]);\n          }\n        }\n\n        previousQuery = query;\n      });\n    }\n\n    function onPageInputChange() {\n      var input = this;\n      var value = input.value;\n      var isValues = $(input).parents('.autocomplete-values').length > 0;\n      var item;\n      var itemValue;\n      var aValue;\n\n      if (isValues) {\n        if (ac.inputType === 'checkbox' && !input.checked) {\n          for (var i = 0; i < ac.value.length; i += 1) {\n            aValue = typeof ac.value[i] === 'string' ? ac.value[i] : ac.value[i][ac.params.valueProperty];\n\n            if (aValue === value || aValue * 1 === value * 1) {\n              ac.value.splice(i, 1);\n            }\n          }\n\n          ac.updateValues();\n          ac.emit('local::change autocompleteChange', ac.value);\n        }\n\n        return;\n      } // Find Related Item\n\n\n      for (var _i = 0; _i < ac.items.length; _i += 1) {\n        itemValue = typeof ac.items[_i] === 'object' ? ac.items[_i][ac.params.valueProperty] : ac.items[_i];\n        if (itemValue === value || itemValue * 1 === value * 1) item = ac.items[_i];\n      }\n\n      if (ac.inputType === 'radio') {\n        ac.value = [item];\n      } else if (input.checked) {\n        ac.value.push(item);\n      } else {\n        for (var _i2 = 0; _i2 < ac.value.length; _i2 += 1) {\n          aValue = typeof ac.value[_i2] === 'object' ? ac.value[_i2][ac.params.valueProperty] : ac.value[_i2];\n\n          if (aValue === value || aValue * 1 === value * 1) {\n            ac.value.splice(_i2, 1);\n          }\n        }\n      } // Update Values Block\n\n\n      ac.updateValues(); // On Select Callback\n\n      if (ac.inputType === 'radio' && input.checked || ac.inputType === 'checkbox') {\n        ac.emit('local::change autocompleteChange', ac.value);\n      }\n    }\n\n    function onHtmlClick(e) {\n      var $targetEl = $(e.target);\n      if ($targetEl.is(ac.$inputEl[0]) || ac.$dropdownEl && $targetEl.closest(ac.$dropdownEl[0]).length) return;\n      ac.close();\n    }\n\n    function onOpenerClick() {\n      ac.open();\n    }\n\n    function onInputFocus() {\n      ac.open();\n    }\n\n    function onInputBlur() {\n      if (ac.$dropdownEl.find('label.active-state').length > 0) return;\n      ac.close();\n    }\n\n    function onResize() {\n      ac.positionDropdown();\n    }\n\n    function onKeyDown(e) {\n      if (ac.opened && e.keyCode === 13) {\n        e.preventDefault();\n        ac.$inputEl.blur();\n      }\n    }\n\n    function onDropdownclick() {\n      var $clickedEl = $(this);\n      var clickedItem;\n\n      for (var i = 0; i < ac.items.length; i += 1) {\n        var itemValue = typeof ac.items[i] === 'object' ? ac.items[i][ac.params.valueProperty] : ac.items[i];\n        var value = $clickedEl.attr('data-value');\n\n        if (itemValue === value || itemValue * 1 === value * 1) {\n          clickedItem = ac.items[i];\n        }\n      }\n\n      if (ac.params.updateInputValueOnSelect) {\n        ac.$inputEl.val(typeof clickedItem === 'object' ? clickedItem[ac.params.valueProperty] : clickedItem);\n        ac.$inputEl.trigger('input change');\n      }\n\n      ac.value = [clickedItem];\n      ac.emit('local::change autocompleteChange', [clickedItem]);\n      ac.close();\n    }\n\n    ac.attachEvents = function attachEvents() {\n      if (ac.params.openIn !== 'dropdown' && ac.$openerEl) {\n        ac.$openerEl.on('click', onOpenerClick);\n      }\n\n      if (ac.params.openIn === 'dropdown' && ac.$inputEl) {\n        ac.$inputEl.on('focus', onInputFocus);\n        ac.$inputEl.on(ac.params.inputEvents, onInputChange);\n\n        if (app.device.android) {\n          $('html').on('click', onHtmlClick);\n        } else {\n          ac.$inputEl.on('blur', onInputBlur);\n        }\n\n        if (ac.params.typeahead) {\n          ac.$inputEl.on('keydown', onKeyDown);\n        }\n      }\n    };\n\n    ac.detachEvents = function attachEvents() {\n      if (ac.params.openIn !== 'dropdown' && ac.$openerEl) {\n        ac.$openerEl.off('click', onOpenerClick);\n      }\n\n      if (ac.params.openIn === 'dropdown' && ac.$inputEl) {\n        ac.$inputEl.off('focus', onInputFocus);\n        ac.$inputEl.off(ac.params.inputEvents, onInputChange);\n\n        if (app.device.android) {\n          $('html').off('click', onHtmlClick);\n        } else {\n          ac.$inputEl.off('blur', onInputBlur);\n        }\n\n        if (ac.params.typeahead) {\n          ac.$inputEl.off('keydown', onKeyDown);\n        }\n      }\n    };\n\n    ac.attachDropdownEvents = function attachDropdownEvents() {\n      ac.$dropdownEl.on('click', 'label', onDropdownclick);\n      app.on('resize', onResize);\n    };\n\n    ac.detachDropdownEvents = function detachDropdownEvents() {\n      ac.$dropdownEl.off('click', 'label', onDropdownclick);\n      app.off('resize', onResize);\n    };\n\n    ac.attachPageEvents = function attachPageEvents() {\n      ac.$el.on('change', 'input[type=\"radio\"], input[type=\"checkbox\"]', onPageInputChange);\n\n      if (ac.params.closeOnSelect && !ac.params.multiple) {\n        ac.$el.once('click', '.list label', function () {\n          Utils.nextTick(function () {\n            ac.close();\n          });\n        });\n      }\n    };\n\n    ac.detachPageEvents = function detachPageEvents() {\n      ac.$el.off('change', 'input[type=\"radio\"], input[type=\"checkbox\"]', onPageInputChange);\n    }; // Install Modules\n\n\n    ac.useModules(); // Init\n\n    ac.init();\n    return _possibleConstructorReturn(_this, ac);\n  }\n\n  _createClass(Autocomplete, [{\n    key: \"positionDropdown\",\n    value: function positionDropdown() {\n      var ac = this;\n      var $inputEl = ac.$inputEl,\n          app = ac.app,\n          $dropdownEl = ac.$dropdownEl;\n      var $pageContentEl = $inputEl.parents('.page-content');\n      if ($pageContentEl.length === 0) return;\n      var inputOffset = $inputEl.offset();\n      var inputOffsetWidth = $inputEl[0].offsetWidth;\n      var inputOffsetHeight = $inputEl[0].offsetHeight;\n      var $listEl = $inputEl.parents('.list');\n      var $listParent;\n      $listEl.parents().each(function (index, parentEl) {\n        if ($listParent) return;\n        var $parentEl = $(parentEl);\n        if ($parentEl.parent($pageContentEl).length) $listParent = $parentEl;\n      });\n      var listOffset = $listEl.offset();\n      var paddingBottom = parseInt($pageContentEl.css('padding-bottom'), 10);\n      var listOffsetLeft = $listEl.length > 0 ? listOffset.left - $pageContentEl.offset().left : 0;\n      var inputOffsetLeft = inputOffset.left - ($listEl.length > 0 ? listOffset.left : 0) - (app.rtl ? 0 : 0);\n      var inputOffsetTop = inputOffset.top - ($pageContentEl.offset().top - $pageContentEl[0].scrollTop);\n      var maxHeight = $pageContentEl[0].scrollHeight - paddingBottom - (inputOffsetTop + $pageContentEl[0].scrollTop) - $inputEl[0].offsetHeight;\n      var paddingProp = app.rtl ? 'padding-right' : 'padding-left';\n      var paddingValue;\n\n      if ($listEl.length && !ac.params.expandInput) {\n        paddingValue = (app.rtl ? $listEl[0].offsetWidth - inputOffsetLeft - inputOffsetWidth : inputOffsetLeft) - (app.theme === 'md' ? 16 : 15);\n      }\n\n      $dropdownEl.css({\n        left: \"\".concat($listEl.length > 0 ? listOffsetLeft : inputOffsetLeft, \"px\"),\n        top: \"\".concat(inputOffsetTop + $pageContentEl[0].scrollTop + inputOffsetHeight, \"px\"),\n        width: \"\".concat($listEl.length > 0 ? $listEl[0].offsetWidth : inputOffsetWidth, \"px\")\n      });\n      $dropdownEl.children('.autocomplete-dropdown-inner').css(_defineProperty({\n        maxHeight: \"\".concat(maxHeight, \"px\")\n      }, paddingProp, $listEl.length > 0 && !ac.params.expandInput ? \"\".concat(paddingValue, \"px\") : ''));\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var ac = this;\n      ac.$el.find('input[type=search]').focus();\n    }\n  }, {\n    key: \"source\",\n    value: function source(query) {\n      var ac = this;\n      if (!ac.params.source) return;\n      var $el = ac.$el;\n      ac.params.source.call(ac, query, function (items) {\n        var itemsHTML = '';\n        var limit = ac.params.limit ? Math.min(ac.params.limit, items.length) : items.length;\n        ac.items = items;\n\n        for (var i = 0; i < limit; i += 1) {\n          var selected = false;\n          var itemValue = typeof items[i] === 'object' ? items[i][ac.params.valueProperty] : items[i];\n\n          for (var j = 0; j < ac.value.length; j += 1) {\n            var aValue = typeof ac.value[j] === 'object' ? ac.value[j][ac.params.valueProperty] : ac.value[j];\n            if (aValue === itemValue || aValue * 1 === itemValue * 1) selected = true;\n          }\n\n          itemsHTML += ac.renderItem({\n            value: itemValue,\n            text: typeof items[i] === 'object' ? items[i][ac.params.textProperty] : items[i],\n            inputType: ac.inputType,\n            id: ac.id,\n            inputName: ac.inputName,\n            selected: selected\n          }, i);\n        }\n\n        $el.find('.autocomplete-found ul').html(itemsHTML);\n\n        if (items.length === 0) {\n          if (query.length !== 0) {\n            $el.find('.autocomplete-not-found').show();\n            $el.find('.autocomplete-found, .autocomplete-values').hide();\n          } else {\n            $el.find('.autocomplete-values').show();\n            $el.find('.autocomplete-found, .autocomplete-not-found').hide();\n          }\n        } else {\n          $el.find('.autocomplete-found').show();\n          $el.find('.autocomplete-not-found, .autocomplete-values').hide();\n        }\n      });\n    }\n  }, {\n    key: \"updateValues\",\n    value: function updateValues() {\n      var ac = this;\n      var valuesHTML = '';\n\n      for (var i = 0; i < ac.value.length; i += 1) {\n        valuesHTML += ac.renderItem({\n          value: typeof ac.value[i] === 'object' ? ac.value[i][ac.params.valueProperty] : ac.value[i],\n          text: typeof ac.value[i] === 'object' ? ac.value[i][ac.params.textProperty] : ac.value[i],\n          inputType: ac.inputType,\n          id: ac.id,\n          inputName: \"\".concat(ac.inputName, \"-checked}\"),\n          selected: true\n        }, i);\n      }\n\n      ac.$el.find('.autocomplete-values ul').html(valuesHTML);\n    }\n  }, {\n    key: \"preloaderHide\",\n    value: function preloaderHide() {\n      var ac = this;\n\n      if (ac.params.openIn === 'dropdown' && ac.$dropdownEl) {\n        ac.$dropdownEl.find('.autocomplete-preloader').removeClass('autocomplete-preloader-visible');\n      } else {\n        $('.autocomplete-preloader').removeClass('autocomplete-preloader-visible');\n      }\n    }\n  }, {\n    key: \"preloaderShow\",\n    value: function preloaderShow() {\n      var ac = this;\n\n      if (ac.params.openIn === 'dropdown' && ac.$dropdownEl) {\n        ac.$dropdownEl.find('.autocomplete-preloader').addClass('autocomplete-preloader-visible');\n      } else {\n        $('.autocomplete-preloader').addClass('autocomplete-preloader-visible');\n      }\n    }\n  }, {\n    key: \"renderPreloader\",\n    value: function renderPreloader() {\n      var ac = this;\n      return \"\\n      <div class=\\\"autocomplete-preloader preloader \".concat(ac.params.preloaderColor ? \"color-\".concat(ac.params.preloaderColor) : '', \"\\\">\").concat(Utils[\"\".concat(ac.app.theme, \"PreloaderContent\")] || '', \"</div>\\n    \").trim();\n    }\n  }, {\n    key: \"renderSearchbar\",\n    value: function renderSearchbar() {\n      var ac = this;\n      if (ac.params.renderSearchbar) return ac.params.renderSearchbar.call(ac);\n      var searchbarHTML = \"\\n      <form class=\\\"searchbar\\\">\\n        <div class=\\\"searchbar-inner\\\">\\n          <div class=\\\"searchbar-input-wrap\\\">\\n            <input type=\\\"search\\\" placeholder=\\\"\".concat(ac.params.searchbarPlaceholder, \"\\\"/>\\n            <i class=\\\"searchbar-icon\\\"></i>\\n            <span class=\\\"input-clear-button\\\"></span>\\n          </div>\\n          <span class=\\\"searchbar-disable-button\\\">\").concat(ac.params.searchbarDisableText, \"</span>\\n        </div>\\n      </form>\\n    \").trim();\n      return searchbarHTML;\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item, index) {\n      var ac = this;\n      if (ac.params.renderItem) return ac.params.renderItem.call(ac, item, index);\n      var itemHtml;\n      var itemValue = item.value && typeof item.value === 'string' ? item.value.replace(/\"/g, '&quot;') : item.value;\n\n      if (ac.params.openIn !== 'dropdown') {\n        itemHtml = \"\\n        <li>\\n          <label class=\\\"item-\".concat(item.inputType, \" item-content\\\">\\n            <input type=\\\"\").concat(item.inputType, \"\\\" name=\\\"\").concat(item.inputName, \"\\\" value=\\\"\").concat(itemValue, \"\\\" \").concat(item.selected ? 'checked' : '', \">\\n            <i class=\\\"icon icon-\").concat(item.inputType, \"\\\"></i>\\n            <div class=\\\"item-inner\\\">\\n              <div class=\\\"item-title\\\">\").concat(item.text, \"</div>\\n            </div>\\n          </label>\\n        </li>\\n      \");\n      } else if (!item.placeholder) {\n        // Dropdown\n        itemHtml = \"\\n        <li>\\n          <label class=\\\"item-radio item-content\\\" data-value=\\\"\".concat(itemValue, \"\\\">\\n            <div class=\\\"item-inner\\\">\\n              <div class=\\\"item-title\\\">\").concat(item.text, \"</div>\\n            </div>\\n          </label>\\n        </li>\\n      \");\n      } else {\n        // Dropwdown placeholder\n        itemHtml = \"\\n        <li class=\\\"autocomplete-dropdown-placeholder\\\">\\n          <label class=\\\"item-content\\\">\\n            <div class=\\\"item-inner\\\">\\n              <div class=\\\"item-title\\\">\".concat(item.text, \"</div>\\n            </div>\\n          </label>\\n        </li>\\n      \");\n      }\n\n      return itemHtml.trim();\n    }\n  }, {\n    key: \"renderNavbar\",\n    value: function renderNavbar() {\n      var ac = this;\n      if (ac.params.renderNavbar) return ac.params.renderNavbar.call(ac);\n      var pageTitle = ac.params.pageTitle;\n\n      if (typeof pageTitle === 'undefined' && ac.$openerEl && ac.$openerEl.length) {\n        pageTitle = ac.$openerEl.find('.item-title').text().trim();\n      }\n\n      var navbarHtml = \"\\n      <div class=\\\"navbar \".concat(ac.params.navbarColorTheme ? \"color-\".concat(ac.params.navbarColorTheme) : '', \"\\\">\\n        <div class=\\\"navbar-inner \").concat(ac.params.navbarColorTheme ? \"color-\".concat(ac.params.navbarColorTheme) : '', \"\\\">\\n          <div class=\\\"left sliding\\\">\\n            <a href=\\\"#\\\" class=\\\"link \").concat(ac.params.openIn === 'page' ? 'back' : 'popup-close', \"\\\" \").concat(ac.params.openIn === 'popup' ? 'data-popup=\".autocomplete-popup\"' : '', \">\\n              <i class=\\\"icon icon-back\\\"></i>\\n              <span class=\\\"ios-only\\\">\").concat(ac.params.openIn === 'page' ? ac.params.pageBackLinkText : ac.params.popupCloseLinkText, \"</span>\\n            </a>\\n          </div>\\n          \").concat(pageTitle ? \"<div class=\\\"title sliding\\\">\".concat(pageTitle, \"</div>\") : '', \"\\n          \").concat(ac.params.preloader ? \"\\n          <div class=\\\"right\\\">\\n            \".concat(ac.renderPreloader(), \"\\n          </div>\\n          \") : '', \"\\n          <div class=\\\"subnavbar sliding\\\">\").concat(ac.renderSearchbar(), \"</div>\\n        </div>\\n      </div>\\n    \").trim();\n      return navbarHtml;\n    }\n  }, {\n    key: \"renderDropdown\",\n    value: function renderDropdown() {\n      var ac = this;\n      if (ac.params.renderDropdown) return ac.params.renderDropdown.call(ac, ac.items);\n      var dropdownHtml = \"\\n      <div class=\\\"autocomplete-dropdown\\\">\\n        <div class=\\\"autocomplete-dropdown-inner\\\">\\n          <div class=\\\"list \".concat(!ac.params.expandInput ? 'no-safe-areas' : '', \"\\\">\\n            <ul></ul>\\n          </div>\\n        </div>\\n        \").concat(ac.params.preloader ? ac.renderPreloader() : '', \"\\n      </div>\\n    \").trim();\n      return dropdownHtml;\n    }\n  }, {\n    key: \"renderPage\",\n    value: function renderPage() {\n      var ac = this;\n      if (ac.params.renderPage) return ac.params.renderPage.call(ac, ac.items);\n      var pageHtml = \"\\n      <div class=\\\"page page-with-subnavbar autocomplete-page\\\" data-name=\\\"autocomplete-page\\\">\\n        \".concat(ac.renderNavbar(), \"\\n        <div class=\\\"searchbar-backdrop\\\"></div>\\n        <div class=\\\"page-content\\\">\\n          <div class=\\\"list autocomplete-list autocomplete-found autocomplete-list-\").concat(ac.id, \" \").concat(ac.params.formColorTheme ? \"color-\".concat(ac.params.formColorTheme) : '', \"\\\">\\n            <ul></ul>\\n          </div>\\n          <div class=\\\"list autocomplete-not-found\\\">\\n            <ul>\\n              <li class=\\\"item-content\\\"><div class=\\\"item-inner\\\"><div class=\\\"item-title\\\">\").concat(ac.params.notFoundText, \"</div></div></li>\\n            </ul>\\n          </div>\\n          <div class=\\\"list autocomplete-values\\\">\\n            <ul></ul>\\n          </div>\\n        </div>\\n      </div>\\n    \").trim();\n      return pageHtml;\n    }\n  }, {\n    key: \"renderPopup\",\n    value: function renderPopup() {\n      var ac = this;\n      if (ac.params.renderPopup) return ac.params.renderPopup.call(ac, ac.items);\n      var popupHtml = \"\\n      <div class=\\\"popup autocomplete-popup\\\">\\n        <div class=\\\"view\\\">\\n          \".concat(ac.renderPage(), \";\\n        </div>\\n      </div>\\n    \").trim();\n      return popupHtml;\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(type, el) {\n      var ac = this;\n      var app = ac.app;\n      var $el = $(el);\n      ac.$el = $el;\n      ac.el = $el[0];\n      ac.openedIn = type;\n      ac.opened = true;\n\n      if (ac.params.openIn === 'dropdown') {\n        ac.attachDropdownEvents();\n        ac.$dropdownEl.addClass('autocomplete-dropdown-in');\n        ac.$inputEl.trigger('input');\n      } else {\n        // Init SB\n        var $searchbarEl = $el.find('.searchbar');\n\n        if (ac.params.openIn === 'page' && app.theme === 'ios' && $searchbarEl.length === 0) {\n          $searchbarEl = $(app.navbar.getElByPage($el)).find('.searchbar');\n        }\n\n        ac.searchbar = app.searchbar.create({\n          el: $searchbarEl,\n          backdropEl: $el.find('.searchbar-backdrop'),\n          customSearch: true,\n          on: {\n            search: function search(sb, query) {\n              if (query.length === 0 && ac.searchbar.enabled) {\n                ac.searchbar.backdropShow();\n              } else {\n                ac.searchbar.backdropHide();\n              }\n\n              ac.source(query);\n            }\n          }\n        }); // Attach page events\n\n        ac.attachPageEvents(); // Update Values On Page Init\n\n        ac.updateValues(); // Source on load\n\n        if (ac.params.requestSourceOnOpen) ac.source('');\n      }\n\n      ac.emit('local::open autocompleteOpen', ac);\n    }\n  }, {\n    key: \"autoFocus\",\n    value: function autoFocus() {\n      var ac = this;\n\n      if (ac.searchbar && ac.searchbar.$inputEl) {\n        ac.searchbar.$inputEl.focus();\n      }\n\n      return ac;\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened() {\n      var ac = this;\n\n      if (ac.params.openIn !== 'dropdown' && ac.params.autoFocus) {\n        ac.autoFocus();\n      }\n\n      ac.emit('local::opened autocompleteOpened', ac);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      var ac = this;\n      if (ac.destroyed) return; // Destroy SB\n\n      if (ac.searchbar && ac.searchbar.destroy) {\n        ac.searchbar.destroy();\n        ac.searchbar = null;\n        delete ac.searchbar;\n      }\n\n      if (ac.params.openIn === 'dropdown') {\n        ac.detachDropdownEvents();\n        ac.$dropdownEl.removeClass('autocomplete-dropdown-in').remove();\n        ac.$inputEl.parents('.item-content-dropdown-expanded').removeClass('item-content-dropdown-expanded');\n      } else {\n        ac.detachPageEvents();\n      }\n\n      ac.emit('local::close autocompleteClose', ac);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed() {\n      var ac = this;\n      if (ac.destroyed) return;\n      ac.opened = false;\n      ac.$el = null;\n      ac.el = null;\n      delete ac.$el;\n      delete ac.el;\n      ac.emit('local::closed autocompleteClosed', ac);\n    }\n  }, {\n    key: \"openPage\",\n    value: function openPage() {\n      var ac = this;\n      if (ac.opened) return ac;\n      var pageHtml = ac.renderPage();\n      ac.view.router.navigate({\n        url: ac.url,\n        route: {\n          content: pageHtml,\n          path: ac.url,\n          on: {\n            pageBeforeIn: function pageBeforeIn(e, page) {\n              ac.onOpen('page', page.el);\n            },\n            pageAfterIn: function pageAfterIn(e, page) {\n              ac.onOpened('page', page.el);\n            },\n            pageBeforeOut: function pageBeforeOut(e, page) {\n              ac.onClose('page', page.el);\n            },\n            pageAfterOut: function pageAfterOut(e, page) {\n              ac.onClosed('page', page.el);\n            }\n          },\n          options: {\n            animate: ac.params.animate\n          }\n        }\n      });\n      return ac;\n    }\n  }, {\n    key: \"openPopup\",\n    value: function openPopup() {\n      var ac = this;\n      if (ac.opened) return ac;\n      var popupHtml = ac.renderPopup();\n      var popupParams = {\n        content: popupHtml,\n        animate: ac.params.animate,\n        on: {\n          popupOpen: function popupOpen(popup) {\n            ac.onOpen('popup', popup.el);\n          },\n          popupOpened: function popupOpened(popup) {\n            ac.onOpened('popup', popup.el);\n          },\n          popupClose: function popupClose(popup) {\n            ac.onClose('popup', popup.el);\n          },\n          popupClosed: function popupClosed(popup) {\n            ac.onClosed('popup', popup.el);\n          }\n        }\n      };\n\n      if (ac.params.routableModals) {\n        ac.view.router.navigate({\n          url: ac.url,\n          route: {\n            path: ac.url,\n            popup: popupParams\n          }\n        });\n      } else {\n        ac.modal = ac.app.popup.create(popupParams).open(ac.params.animate);\n      }\n\n      return ac;\n    }\n  }, {\n    key: \"openDropdown\",\n    value: function openDropdown() {\n      var ac = this;\n\n      if (!ac.$dropdownEl) {\n        ac.$dropdownEl = $(ac.renderDropdown());\n      }\n\n      var $listEl = ac.$inputEl.parents('.list');\n\n      if ($listEl.length && ac.$inputEl.parents('.item-content').length > 0 && ac.params.expandInput) {\n        ac.$inputEl.parents('.item-content').addClass('item-content-dropdown-expanded');\n      }\n\n      var $pageContentEl = ac.$inputEl.parents('.page-content');\n\n      if (ac.params.dropdownContainerEl) {\n        $(ac.params.dropdownContainerEl).append(ac.$dropdownEl);\n      } else if ($pageContentEl.length === 0) {\n        ac.$dropdownEl.insertAfter(ac.$inputEl);\n      } else {\n        ac.positionDropdown();\n        $pageContentEl.append(ac.$dropdownEl);\n      }\n\n      ac.onOpen('dropdown', ac.$dropdownEl);\n      ac.onOpened('dropdown', ac.$dropdownEl);\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var ac = this;\n      if (ac.opened) return ac;\n      var openIn = ac.params.openIn;\n      ac[\"open\".concat(openIn.split('').map(function (el, index) {\n        if (index === 0) return el.toUpperCase();\n        return el;\n      }).join(''))]();\n      return ac;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var ac = this;\n      if (!ac.opened) return ac;\n\n      if (ac.params.openIn === 'dropdown') {\n        ac.onClose();\n        ac.onClosed();\n      } else if (ac.params.routableModals || ac.openedIn === 'page') {\n        ac.view.router.back({\n          animate: ac.params.animate\n        });\n      } else {\n        ac.modal.once('modalClosed', function () {\n          Utils.nextTick(function () {\n            ac.modal.destroy();\n            delete ac.modal;\n          });\n        });\n        ac.modal.close();\n      }\n\n      return ac;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var ac = this;\n      ac.attachEvents();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var ac = this;\n      ac.emit('local::beforeDestroy autocompleteBeforeDestroy', ac);\n      ac.detachEvents();\n\n      if (ac.$inputEl && ac.$inputEl[0]) {\n        delete ac.$inputEl[0].f7Autocomplete;\n      }\n\n      if (ac.$openerEl && ac.$openerEl[0]) {\n        delete ac.$openerEl[0].f7Autocomplete;\n      }\n\n      Utils.deleteProps(ac);\n      ac.destroyed = true;\n    }\n  }]);\n\n  return Autocomplete;\n}(Framework7Class);\n\nexport default Autocomplete;","map":null,"metadata":{},"sourceType":"module"}