{"ast":null,"code":"import { window, document } from 'ssr-window';\nimport Utils from './utils';\nvar globals = {};\nvar jsonpRequests = 0;\n\nfunction Request(requestOptions) {\n  var globalsNoCallbacks = Utils.extend({}, globals);\n  'beforeCreate beforeOpen beforeSend error complete success statusCode'.split(' ').forEach(function (callbackName) {\n    delete globalsNoCallbacks[callbackName];\n  });\n  var defaults = Utils.extend({\n    url: window.location.toString(),\n    method: 'GET',\n    data: false,\n    async: true,\n    cache: true,\n    user: '',\n    password: '',\n    headers: {},\n    xhrFields: {},\n    statusCode: {},\n    processData: true,\n    dataType: 'text',\n    contentType: 'application/x-www-form-urlencoded',\n    timeout: 0\n  }, globalsNoCallbacks);\n  var options = Utils.extend({}, defaults, requestOptions);\n  var proceedRequest; // Function to run XHR callbacks and events\n\n  function fireCallback(callbackName) {\n    /*\n      Callbacks:\n      beforeCreate (options),\n      beforeOpen (xhr, options),\n      beforeSend (xhr, options),\n      error (xhr, status),\n      complete (xhr, stautus),\n      success (response, status, xhr),\n      statusCode ()\n    */\n    var globalCallbackValue;\n    var optionCallbackValue;\n\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    if (globals[callbackName]) {\n      globalCallbackValue = globals[callbackName].apply(globals, data);\n    }\n\n    if (options[callbackName]) {\n      optionCallbackValue = options[callbackName].apply(options, data);\n    }\n\n    if (typeof globalCallbackValue !== 'boolean') globalCallbackValue = true;\n    if (typeof optionCallbackValue !== 'boolean') optionCallbackValue = true;\n    return globalCallbackValue && optionCallbackValue;\n  } // Before create callback\n\n\n  proceedRequest = fireCallback('beforeCreate', options);\n  if (proceedRequest === false) return undefined; // For jQuery guys\n\n  if (options.type) options.method = options.type; // Parameters Prefix\n\n  var paramsPrefix = options.url.indexOf('?') >= 0 ? '&' : '?'; // UC method\n\n  var method = options.method.toUpperCase(); // Data to modify GET URL\n\n  if ((method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') && options.data) {\n    var stringData;\n\n    if (typeof options.data === 'string') {\n      // Should be key=value string\n      if (options.data.indexOf('?') >= 0) stringData = options.data.split('?')[1];else stringData = options.data;\n    } else {\n      // Should be key=value object\n      stringData = Utils.serializeObject(options.data);\n    }\n\n    if (stringData.length) {\n      options.url += paramsPrefix + stringData;\n      if (paramsPrefix === '?') paramsPrefix = '&';\n    }\n  } // JSONP\n\n\n  if (options.dataType === 'json' && options.url.indexOf('callback=') >= 0) {\n    var callbackName = \"f7jsonp_\".concat(Date.now() + (jsonpRequests += 1));\n    var abortTimeout;\n    var callbackSplit = options.url.split('callback=');\n    var requestUrl = \"\".concat(callbackSplit[0], \"callback=\").concat(callbackName);\n\n    if (callbackSplit[1].indexOf('&') >= 0) {\n      var addVars = callbackSplit[1].split('&').filter(function (el) {\n        return el.indexOf('=') > 0;\n      }).join('&');\n      if (addVars.length > 0) requestUrl += \"&\".concat(addVars);\n    } // Create script\n\n\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    script.onerror = function onerror() {\n      clearTimeout(abortTimeout);\n      fireCallback('error', null, 'scripterror');\n      fireCallback('complete', null, 'scripterror');\n    };\n\n    script.src = requestUrl; // Handler\n\n    window[callbackName] = function jsonpCallback(data) {\n      clearTimeout(abortTimeout);\n      fireCallback('success', data);\n      script.parentNode.removeChild(script);\n      script = null;\n      delete window[callbackName];\n    };\n\n    document.querySelector('head').appendChild(script);\n\n    if (options.timeout > 0) {\n      abortTimeout = setTimeout(function () {\n        script.parentNode.removeChild(script);\n        script = null;\n        fireCallback('error', null, 'timeout');\n      }, options.timeout);\n    }\n\n    return undefined;\n  } // Cache for GET/HEAD requests\n\n\n  if (method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') {\n    if (options.cache === false) {\n      options.url += \"\".concat(paramsPrefix, \"_nocache\").concat(Date.now());\n    }\n  } // Create XHR\n\n\n  var xhr = new XMLHttpRequest(); // Save Request URL\n\n  xhr.requestUrl = options.url;\n  xhr.requestParameters = options; // Before open callback\n\n  proceedRequest = fireCallback('beforeOpen', xhr, options);\n  if (proceedRequest === false) return xhr; // Open XHR\n\n  xhr.open(method, options.url, options.async, options.user, options.password); // Create POST Data\n\n  var postData = null;\n\n  if ((method === 'POST' || method === 'PUT' || method === 'PATCH') && options.data) {\n    if (options.processData) {\n      var postDataInstances = [ArrayBuffer, Blob, Document, FormData]; // Post Data\n\n      if (postDataInstances.indexOf(options.data.constructor) >= 0) {\n        postData = options.data;\n      } else {\n        // POST Headers\n        var boundary = \"---------------------------\".concat(Date.now().toString(16));\n\n        if (options.contentType === 'multipart/form-data') {\n          xhr.setRequestHeader('Content-Type', \"multipart/form-data; boundary=\".concat(boundary));\n        } else {\n          xhr.setRequestHeader('Content-Type', options.contentType);\n        }\n\n        postData = '';\n        var data = Utils.serializeObject(options.data);\n\n        if (options.contentType === 'multipart/form-data') {\n          data = data.split('&');\n          var newData = [];\n\n          for (var i = 0; i < data.length; i += 1) {\n            newData.push(\"Content-Disposition: form-data; name=\\\"\".concat(data[i].split('=')[0], \"\\\"\\r\\n\\r\\n\").concat(data[i].split('=')[1], \"\\r\\n\"));\n          }\n\n          postData = \"--\".concat(boundary, \"\\r\\n\").concat(newData.join(\"--\".concat(boundary, \"\\r\\n\")), \"--\").concat(boundary, \"--\\r\\n\");\n        } else if (options.contentType === 'application/json') {\n          postData = JSON.stringify(options.data);\n        } else {\n          postData = data;\n        }\n      }\n    } else {\n      postData = options.data;\n      xhr.setRequestHeader('Content-Type', options.contentType);\n    }\n  } // Additional headers\n\n\n  if (options.headers) {\n    Object.keys(options.headers).forEach(function (headerName) {\n      xhr.setRequestHeader(headerName, options.headers[headerName]);\n    });\n  } // Check for crossDomain\n\n\n  if (typeof options.crossDomain === 'undefined') {\n    // eslint-disable-next-line\n    options.crossDomain = /^([\\w-]+:)?\\/\\/([^\\/]+)/.test(options.url) && RegExp.$2 !== window.location.host;\n  }\n\n  if (!options.crossDomain) {\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n  }\n\n  if (options.xhrFields) {\n    Utils.extend(xhr, options.xhrFields);\n  }\n\n  var xhrTimeout; // Handle XHR\n\n  xhr.onload = function onload() {\n    if (xhrTimeout) clearTimeout(xhrTimeout);\n\n    if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 0) {\n      var responseData;\n\n      if (options.dataType === 'json') {\n        var parseError;\n\n        try {\n          responseData = JSON.parse(xhr.responseText);\n        } catch (err) {\n          parseError = true;\n        }\n\n        if (!parseError) {\n          fireCallback('success', responseData, xhr.status, xhr);\n        } else {\n          fireCallback('error', xhr, 'parseerror');\n        }\n      } else {\n        responseData = xhr.responseType === 'text' || xhr.responseType === '' ? xhr.responseText : xhr.response;\n        fireCallback('success', responseData, xhr.status, xhr);\n      }\n    } else {\n      fireCallback('error', xhr, xhr.status);\n    }\n\n    if (options.statusCode) {\n      if (globals.statusCode && globals.statusCode[xhr.status]) globals.statusCode[xhr.status](xhr);\n      if (options.statusCode[xhr.status]) options.statusCode[xhr.status](xhr);\n    }\n\n    fireCallback('complete', xhr, xhr.status);\n  };\n\n  xhr.onerror = function onerror() {\n    if (xhrTimeout) clearTimeout(xhrTimeout);\n    fireCallback('error', xhr, xhr.status);\n    fireCallback('complete', xhr, 'error');\n  }; // Timeout\n\n\n  if (options.timeout > 0) {\n    xhr.onabort = function onabort() {\n      if (xhrTimeout) clearTimeout(xhrTimeout);\n    };\n\n    xhrTimeout = setTimeout(function () {\n      xhr.abort();\n      fireCallback('error', xhr, 'timeout');\n      fireCallback('complete', xhr, 'timeout');\n    }, options.timeout);\n  } // Ajax start callback\n\n\n  proceedRequest = fireCallback('beforeSend', xhr, options);\n  if (proceedRequest === false) return xhr; // Send XHR\n\n  xhr.send(postData); // Return XHR object\n\n  return xhr;\n}\n\nfunction RequestShortcut(method) {\n  var _ref = [],\n      url = _ref[0],\n      data = _ref[1],\n      success = _ref[2],\n      error = _ref[3],\n      dataType = _ref[4];\n\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  if (typeof args[1] === 'function') {\n    url = args[0];\n    success = args[1];\n    error = args[2];\n    dataType = args[3];\n  } else {\n    url = args[0];\n    data = args[1];\n    success = args[2];\n    error = args[3];\n    dataType = args[4];\n  }\n\n  [success, error].forEach(function (callback) {\n    if (typeof callback === 'string') {\n      dataType = callback;\n      if (callback === success) success = undefined;else error = undefined;\n    }\n  });\n  dataType = dataType || (method === 'json' || method === 'postJSON' ? 'json' : undefined);\n  var requestOptions = {\n    url: url,\n    method: method === 'post' || method === 'postJSON' ? 'POST' : 'GET',\n    data: data,\n    success: success,\n    error: error,\n    dataType: dataType\n  };\n\n  if (method === 'postJSON') {\n    Utils.extend(requestOptions, {\n      contentType: 'application/json',\n      processData: false,\n      crossDomain: true,\n      data: typeof data === 'string' ? data : JSON.stringify(data)\n    });\n  }\n\n  return Request(requestOptions);\n}\n\nfunction RequestShortcutPromise(method) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  var url = args[0],\n      data = args[1],\n      dataType = args[2];\n  return new Promise(function (resolve, reject) {\n    RequestShortcut(method, url, data, function (response) {\n      resolve(response);\n    }, function (xhr, status) {\n      reject(status);\n    }, dataType);\n  });\n}\n\nObject.assign(Request, {\n  get: function get() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return RequestShortcut.apply(void 0, ['get'].concat(args));\n  },\n  post: function post() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    return RequestShortcut.apply(void 0, ['post'].concat(args));\n  },\n  json: function json() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    return RequestShortcut.apply(void 0, ['json'].concat(args));\n  },\n  getJSON: function getJSON() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    return RequestShortcut.apply(void 0, ['json'].concat(args));\n  },\n  postJSON: function postJSON() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    return RequestShortcut.apply(void 0, ['postJSON'].concat(args));\n  }\n});\n\nRequest.promise = function requestPromise(requestOptions) {\n  return new Promise(function (resolve, reject) {\n    Request(Object.assign(requestOptions, {\n      success: function success(data) {\n        resolve(data);\n      },\n      error: function error(xhr, status) {\n        reject(status);\n      }\n    }));\n  });\n};\n\nObject.assign(Request.promise, {\n  get: function get() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    return RequestShortcutPromise.apply(void 0, ['get'].concat(args));\n  },\n  post: function post() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    return RequestShortcutPromise.apply(void 0, ['post'].concat(args));\n  },\n  json: function json() {\n    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      args[_key11] = arguments[_key11];\n    }\n\n    return RequestShortcutPromise.apply(void 0, ['json'].concat(args));\n  },\n  getJSON: function getJSON() {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n\n    return RequestShortcutPromise.apply(void 0, ['json'].concat(args));\n  },\n  postJSON: function postJSON() {\n    for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      args[_key13] = arguments[_key13];\n    }\n\n    return RequestShortcutPromise.apply(void 0, ['postJSON'].concat(args));\n  }\n});\n\nRequest.setup = function setup(options) {\n  if (options.type && !options.method) {\n    Utils.extend(options, {\n      method: options.type\n    });\n  }\n\n  Utils.extend(globals, options);\n};\n\nexport default Request;","map":null,"metadata":{},"sourceType":"module"}