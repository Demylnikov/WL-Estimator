{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Template7 1.4.1\n * Mobile-first HTML template engine\n * \n * http://www.idangero.us/template7/\n * \n * Copyright 2019, Vladimir Kharlampidi\n * The iDangero.us\n * http://www.idangero.us/\n * \n * Licensed under MIT\n * \n * Released on: February 5, 2019\n */\nvar t7ctx;\n\nif (typeof window !== 'undefined') {\n  t7ctx = window;\n} else if (typeof global !== 'undefined') {\n  t7ctx = global;\n} else {\n  t7ctx = undefined;\n}\n\nvar Template7Context = t7ctx;\nvar Template7Utils = {\n  quoteSingleRexExp: new RegExp('\\'', 'g'),\n  quoteDoubleRexExp: new RegExp('\"', 'g'),\n  isFunction: function isFunction(func) {\n    return typeof func === 'function';\n  },\n  escape: function escape() {\n    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n  },\n  helperToSlices: function helperToSlices(string) {\n    var quoteDoubleRexExp = Template7Utils.quoteDoubleRexExp,\n        quoteSingleRexExp = Template7Utils.quoteSingleRexExp;\n    var helperParts = string.replace(/[{}#}]/g, '').trim().split(' ');\n    var slices = [];\n    var shiftIndex;\n    var i;\n    var j;\n\n    for (i = 0; i < helperParts.length; i += 1) {\n      var part = helperParts[i];\n      var blockQuoteRegExp = void 0;\n      var openingQuote = void 0;\n      if (i === 0) slices.push(part);else if (part.indexOf('\"') === 0 || part.indexOf('\\'') === 0) {\n        blockQuoteRegExp = part.indexOf('\"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;\n        openingQuote = part.indexOf('\"') === 0 ? '\"' : '\\''; // Plain String\n\n        if (part.match(blockQuoteRegExp).length === 2) {\n          // One word string\n          slices.push(part);\n        } else {\n          // Find closed Index\n          shiftIndex = 0;\n\n          for (j = i + 1; j < helperParts.length; j += 1) {\n            part += \" \".concat(helperParts[j]);\n\n            if (helperParts[j].indexOf(openingQuote) >= 0) {\n              shiftIndex = j;\n              slices.push(part);\n              break;\n            }\n          }\n\n          if (shiftIndex) i = shiftIndex;\n        }\n      } else if (part.indexOf('=') > 0) {\n        // Hash\n        var hashParts = part.split('=');\n        var hashName = hashParts[0];\n        var hashContent = hashParts[1];\n\n        if (!blockQuoteRegExp) {\n          blockQuoteRegExp = hashContent.indexOf('\"') === 0 ? quoteDoubleRexExp : quoteSingleRexExp;\n          openingQuote = hashContent.indexOf('\"') === 0 ? '\"' : '\\'';\n        }\n\n        if (hashContent.match(blockQuoteRegExp).length !== 2) {\n          shiftIndex = 0;\n\n          for (j = i + 1; j < helperParts.length; j += 1) {\n            hashContent += \" \".concat(helperParts[j]);\n\n            if (helperParts[j].indexOf(openingQuote) >= 0) {\n              shiftIndex = j;\n              break;\n            }\n          }\n\n          if (shiftIndex) i = shiftIndex;\n        }\n\n        var hash = [hashName, hashContent.replace(blockQuoteRegExp, '')];\n        slices.push(hash);\n      } else {\n        // Plain variable\n        slices.push(part);\n      }\n    }\n\n    return slices;\n  },\n  stringToBlocks: function stringToBlocks(string) {\n    var blocks = [];\n    var i;\n    var j;\n    if (!string) return [];\n    var stringBlocks = string.split(/({{[^{^}]*}})/);\n\n    for (i = 0; i < stringBlocks.length; i += 1) {\n      var block = stringBlocks[i];\n      if (block === '') continue;\n\n      if (block.indexOf('{{') < 0) {\n        blocks.push({\n          type: 'plain',\n          content: block\n        });\n      } else {\n        if (block.indexOf('{/') >= 0) {\n          continue;\n        }\n\n        block = block.replace(/{{([#/])*([ ])*/, '{{$1').replace(/([ ])*}}/, '}}');\n\n        if (block.indexOf('{#') < 0 && block.indexOf(' ') < 0 && block.indexOf('else') < 0) {\n          // Simple variable\n          blocks.push({\n            type: 'variable',\n            contextName: block.replace(/[{}]/g, '')\n          });\n          continue;\n        } // Helpers\n\n\n        var helperSlices = Template7Utils.helperToSlices(block);\n        var helperName = helperSlices[0];\n        var isPartial = helperName === '>';\n        var helperContext = [];\n        var helperHash = {};\n\n        for (j = 1; j < helperSlices.length; j += 1) {\n          var slice = helperSlices[j];\n\n          if (Array.isArray(slice)) {\n            // Hash\n            helperHash[slice[0]] = slice[1] === 'false' ? false : slice[1];\n          } else {\n            helperContext.push(slice);\n          }\n        }\n\n        if (block.indexOf('{#') >= 0) {\n          // Condition/Helper\n          var helperContent = '';\n          var elseContent = '';\n          var toSkip = 0;\n          var shiftIndex = void 0;\n          var foundClosed = false;\n          var foundElse = false;\n          var depth = 0;\n\n          for (j = i + 1; j < stringBlocks.length; j += 1) {\n            if (stringBlocks[j].indexOf('{{#') >= 0) {\n              depth += 1;\n            }\n\n            if (stringBlocks[j].indexOf('{{/') >= 0) {\n              depth -= 1;\n            }\n\n            if (stringBlocks[j].indexOf(\"{{#\".concat(helperName)) >= 0) {\n              helperContent += stringBlocks[j];\n              if (foundElse) elseContent += stringBlocks[j];\n              toSkip += 1;\n            } else if (stringBlocks[j].indexOf(\"{{/\".concat(helperName)) >= 0) {\n              if (toSkip > 0) {\n                toSkip -= 1;\n                helperContent += stringBlocks[j];\n                if (foundElse) elseContent += stringBlocks[j];\n              } else {\n                shiftIndex = j;\n                foundClosed = true;\n                break;\n              }\n            } else if (stringBlocks[j].indexOf('else') >= 0 && depth === 0) {\n              foundElse = true;\n            } else {\n              if (!foundElse) helperContent += stringBlocks[j];\n              if (foundElse) elseContent += stringBlocks[j];\n            }\n          }\n\n          if (foundClosed) {\n            if (shiftIndex) i = shiftIndex;\n\n            if (helperName === 'raw') {\n              blocks.push({\n                type: 'plain',\n                content: helperContent\n              });\n            } else {\n              blocks.push({\n                type: 'helper',\n                helperName: helperName,\n                contextName: helperContext,\n                content: helperContent,\n                inverseContent: elseContent,\n                hash: helperHash\n              });\n            }\n          }\n        } else if (block.indexOf(' ') > 0) {\n          if (isPartial) {\n            helperName = '_partial';\n\n            if (helperContext[0]) {\n              if (helperContext[0].indexOf('[') === 0) helperContext[0] = helperContext[0].replace(/[[\\]]/g, '');else helperContext[0] = \"\\\"\".concat(helperContext[0].replace(/\"|'/g, ''), \"\\\"\");\n            }\n          }\n\n          blocks.push({\n            type: 'helper',\n            helperName: helperName,\n            contextName: helperContext,\n            hash: helperHash\n          });\n        }\n      }\n    }\n\n    return blocks;\n  },\n  parseJsVariable: function parseJsVariable(expression, replace, object) {\n    return expression.split(/([+ \\-*/^()&=|<>!%:?])/g).reduce(function (arr, part) {\n      if (!part) {\n        return arr;\n      }\n\n      if (part.indexOf(replace) < 0) {\n        arr.push(part);\n        return arr;\n      }\n\n      if (!object) {\n        arr.push(JSON.stringify(''));\n        return arr;\n      }\n\n      var variable = object;\n\n      if (part.indexOf(\"\".concat(replace, \".\")) >= 0) {\n        part.split(\"\".concat(replace, \".\"))[1].split('.').forEach(function (partName) {\n          if (partName in variable) variable = variable[partName];else variable = undefined;\n        });\n      }\n\n      if (typeof variable === 'string') {\n        variable = JSON.stringify(variable);\n      }\n\n      if (variable === undefined) variable = 'undefined';\n      arr.push(variable);\n      return arr;\n    }, []).join('');\n  },\n  parseJsParents: function parseJsParents(expression, parents) {\n    return expression.split(/([+ \\-*^()&=|<>!%:?])/g).reduce(function (arr, part) {\n      if (!part) {\n        return arr;\n      }\n\n      if (part.indexOf('../') < 0) {\n        arr.push(part);\n        return arr;\n      }\n\n      if (!parents || parents.length === 0) {\n        arr.push(JSON.stringify(''));\n        return arr;\n      }\n\n      var levelsUp = part.split('../').length - 1;\n      var parentData = levelsUp > parents.length ? parents[parents.length - 1] : parents[levelsUp - 1];\n      var variable = parentData;\n      var parentPart = part.replace(/..\\//g, '');\n      parentPart.split('.').forEach(function (partName) {\n        if (typeof variable[partName] !== 'undefined') variable = variable[partName];else variable = 'undefined';\n      });\n\n      if (variable === false || variable === true) {\n        arr.push(JSON.stringify(variable));\n        return arr;\n      }\n\n      if (variable === null || variable === 'undefined') {\n        arr.push(JSON.stringify(''));\n        return arr;\n      }\n\n      arr.push(JSON.stringify(variable));\n      return arr;\n    }, []).join('');\n  },\n  getCompileVar: function getCompileVar(name, ctx) {\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'data_1';\n    var variable = ctx;\n    var parts;\n    var levelsUp = 0;\n    var newDepth;\n\n    if (name.indexOf('../') === 0) {\n      levelsUp = name.split('../').length - 1;\n      newDepth = variable.split('_')[1] - levelsUp;\n      variable = \"ctx_\".concat(newDepth >= 1 ? newDepth : 1);\n      parts = name.split('../')[levelsUp].split('.');\n    } else if (name.indexOf('@global') === 0) {\n      variable = 'Template7.global';\n      parts = name.split('@global.')[1].split('.');\n    } else if (name.indexOf('@root') === 0) {\n      variable = 'root';\n      parts = name.split('@root.')[1].split('.');\n    } else {\n      parts = name.split('.');\n    }\n\n    for (var i = 0; i < parts.length; i += 1) {\n      var part = parts[i];\n\n      if (part.indexOf('@') === 0) {\n        var dataLevel = data.split('_')[1];\n\n        if (levelsUp > 0) {\n          dataLevel = newDepth;\n        }\n\n        if (i > 0) {\n          variable += \"[(data_\".concat(dataLevel, \" && data_\").concat(dataLevel, \".\").concat(part.replace('@', ''), \")]\");\n        } else {\n          variable = \"(data_\".concat(dataLevel, \" && data_\").concat(dataLevel, \".\").concat(part.replace('@', ''), \")\");\n        }\n      } else if (Number.isFinite ? Number.isFinite(part) : Template7Context.isFinite(part)) {\n        variable += \"[\".concat(part, \"]\");\n      } else if (part === 'this' || part.indexOf('this.') >= 0 || part.indexOf('this[') >= 0 || part.indexOf('this(') >= 0) {\n        variable = part.replace('this', ctx);\n      } else {\n        variable += \".\".concat(part);\n      }\n    }\n\n    return variable;\n  },\n  getCompiledArguments: function getCompiledArguments(contextArray, ctx, data) {\n    var arr = [];\n\n    for (var i = 0; i < contextArray.length; i += 1) {\n      if (/^['\"]/.test(contextArray[i])) arr.push(contextArray[i]);else if (/^(true|false|\\d+)$/.test(contextArray[i])) arr.push(contextArray[i]);else {\n        arr.push(Template7Utils.getCompileVar(contextArray[i], ctx, data));\n      }\n    }\n\n    return arr.join(', ');\n  }\n};\n/* eslint no-eval: \"off\" */\n\nvar Template7Helpers = {\n  _partial: function _partial(partialName, options) {\n    var ctx = this;\n    var p = Template7Class.partials[partialName];\n    if (!p || p && !p.template) return '';\n\n    if (!p.compiled) {\n      p.compiled = new Template7Class(p.template).compile();\n    }\n\n    Object.keys(options.hash).forEach(function (hashName) {\n      ctx[hashName] = options.hash[hashName];\n    });\n    return p.compiled(ctx, options.data, options.root);\n  },\n  escape: function escape(context) {\n    if (typeof context !== 'string') {\n      throw new Error('Template7: Passed context to \"escape\" helper should be a string');\n    }\n\n    return Template7Utils.escape(context);\n  },\n  if: function _if(context, options) {\n    var ctx = context;\n\n    if (Template7Utils.isFunction(ctx)) {\n      ctx = ctx.call(this);\n    }\n\n    if (ctx) {\n      return options.fn(this, options.data);\n    }\n\n    return options.inverse(this, options.data);\n  },\n  unless: function unless(context, options) {\n    var ctx = context;\n\n    if (Template7Utils.isFunction(ctx)) {\n      ctx = ctx.call(this);\n    }\n\n    if (!ctx) {\n      return options.fn(this, options.data);\n    }\n\n    return options.inverse(this, options.data);\n  },\n  each: function each(context, options) {\n    var ctx = context;\n    var ret = '';\n    var i = 0;\n\n    if (Template7Utils.isFunction(ctx)) {\n      ctx = ctx.call(this);\n    }\n\n    if (Array.isArray(ctx)) {\n      if (options.hash.reverse) {\n        ctx = ctx.reverse();\n      }\n\n      for (i = 0; i < ctx.length; i += 1) {\n        ret += options.fn(ctx[i], {\n          first: i === 0,\n          last: i === ctx.length - 1,\n          index: i\n        });\n      }\n\n      if (options.hash.reverse) {\n        ctx = ctx.reverse();\n      }\n    } else {\n      // eslint-disable-next-line\n      for (var key in ctx) {\n        i += 1;\n        ret += options.fn(ctx[key], {\n          key: key\n        });\n      }\n    }\n\n    if (i > 0) return ret;\n    return options.inverse(this);\n  },\n  with: function _with(context, options) {\n    var ctx = context;\n\n    if (Template7Utils.isFunction(ctx)) {\n      ctx = context.call(this);\n    }\n\n    return options.fn(ctx);\n  },\n  join: function join(context, options) {\n    var ctx = context;\n\n    if (Template7Utils.isFunction(ctx)) {\n      ctx = ctx.call(this);\n    }\n\n    return ctx.join(options.hash.delimiter || options.hash.delimeter);\n  },\n  js: function js(expression, options) {\n    var data = options.data;\n    var func;\n    var execute = expression;\n    'index first last key'.split(' ').forEach(function (prop) {\n      if (typeof data[prop] !== 'undefined') {\n        var re1 = new RegExp(\"this.@\".concat(prop), 'g');\n        var re2 = new RegExp(\"@\".concat(prop), 'g');\n        execute = execute.replace(re1, JSON.stringify(data[prop])).replace(re2, JSON.stringify(data[prop]));\n      }\n    });\n\n    if (options.root && execute.indexOf('@root') >= 0) {\n      execute = Template7Utils.parseJsVariable(execute, '@root', options.root);\n    }\n\n    if (execute.indexOf('@global') >= 0) {\n      execute = Template7Utils.parseJsVariable(execute, '@global', Template7Context.Template7.global);\n    }\n\n    if (execute.indexOf('../') >= 0) {\n      execute = Template7Utils.parseJsParents(execute, options.parents);\n    }\n\n    if (execute.indexOf('return') >= 0) {\n      func = \"(function(){\".concat(execute, \"})\");\n    } else {\n      func = \"(function(){return (\".concat(execute, \")})\");\n    }\n\n    return eval(func).call(this);\n  },\n  js_if: function js_if(expression, options) {\n    var data = options.data;\n    var func;\n    var execute = expression;\n    'index first last key'.split(' ').forEach(function (prop) {\n      if (typeof data[prop] !== 'undefined') {\n        var re1 = new RegExp(\"this.@\".concat(prop), 'g');\n        var re2 = new RegExp(\"@\".concat(prop), 'g');\n        execute = execute.replace(re1, JSON.stringify(data[prop])).replace(re2, JSON.stringify(data[prop]));\n      }\n    });\n\n    if (options.root && execute.indexOf('@root') >= 0) {\n      execute = Template7Utils.parseJsVariable(execute, '@root', options.root);\n    }\n\n    if (execute.indexOf('@global') >= 0) {\n      execute = Template7Utils.parseJsVariable(execute, '@global', Template7Context.Template7.global);\n    }\n\n    if (execute.indexOf('../') >= 0) {\n      execute = Template7Utils.parseJsParents(execute, options.parents);\n    }\n\n    if (execute.indexOf('return') >= 0) {\n      func = \"(function(){\".concat(execute, \"})\");\n    } else {\n      func = \"(function(){return (\".concat(execute, \")})\");\n    }\n\n    var condition = eval(func).call(this);\n\n    if (condition) {\n      return options.fn(this, options.data);\n    }\n\n    return options.inverse(this, options.data);\n  }\n};\nTemplate7Helpers.js_compare = Template7Helpers.js_if;\nvar Template7Options = {};\nvar Template7Partials = {};\n\nvar Template7Class =\n/*#__PURE__*/\nfunction () {\n  function Template7Class(template) {\n    _classCallCheck(this, Template7Class);\n\n    var t = this;\n    t.template = template;\n  }\n\n  _createClass(Template7Class, [{\n    key: \"compile\",\n    value: function compile() {\n      var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.template;\n      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var t = this;\n      if (t.compiled) return t.compiled;\n\n      if (typeof template !== 'string') {\n        throw new Error('Template7: Template must be a string');\n      }\n\n      var stringToBlocks = Template7Utils.stringToBlocks,\n          getCompileVar = Template7Utils.getCompileVar,\n          getCompiledArguments = Template7Utils.getCompiledArguments;\n      var blocks = stringToBlocks(template);\n      var ctx = \"ctx_\".concat(depth);\n      var data = \"data_\".concat(depth);\n\n      if (blocks.length === 0) {\n        return function empty() {\n          return '';\n        };\n      }\n\n      function getCompileFn(block, newDepth) {\n        if (block.content) return t.compile(block.content, newDepth);\n        return function empty() {\n          return '';\n        };\n      }\n\n      function getCompileInverse(block, newDepth) {\n        if (block.inverseContent) return t.compile(block.inverseContent, newDepth);\n        return function empty() {\n          return '';\n        };\n      }\n\n      var resultString = '';\n\n      if (depth === 1) {\n        resultString += \"(function (\".concat(ctx, \", \").concat(data, \", root) {\\n\");\n      } else {\n        resultString += \"(function (\".concat(ctx, \", \").concat(data, \") {\\n\");\n      }\n\n      if (depth === 1) {\n        resultString += 'function isArray(arr){return Array.isArray(arr);}\\n';\n        resultString += 'function isFunction(func){return (typeof func === \\'function\\');}\\n';\n        resultString += 'function c(val, ctx) {if (typeof val !== \"undefined\" && val !== null) {if (isFunction(val)) {return val.call(ctx);} else return val;} else return \"\";}\\n';\n        resultString += 'root = root || ctx_1 || {};\\n';\n      }\n\n      resultString += 'var r = \\'\\';\\n';\n      var i;\n\n      for (i = 0; i < blocks.length; i += 1) {\n        var block = blocks[i]; // Plain block\n\n        if (block.type === 'plain') {\n          // eslint-disable-next-line\n          resultString += \"r +='\".concat(block.content.replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/'/g, '\\\\' + '\\''), \"';\");\n          continue;\n        }\n\n        var variable = void 0;\n        var compiledArguments = void 0; // Variable block\n\n        if (block.type === 'variable') {\n          variable = getCompileVar(block.contextName, ctx, data);\n          resultString += \"r += c(\".concat(variable, \", \").concat(ctx, \");\");\n        } // Helpers block\n\n\n        if (block.type === 'helper') {\n          var parents = void 0;\n\n          if (ctx !== 'ctx_1') {\n            var level = ctx.split('_')[1];\n            var parentsString = \"ctx_\".concat(level - 1);\n\n            for (var j = level - 2; j >= 1; j -= 1) {\n              parentsString += \", ctx_\".concat(j);\n            }\n\n            parents = \"[\".concat(parentsString, \"]\");\n          } else {\n            parents = \"[\".concat(ctx, \"]\");\n          }\n\n          var dynamicHelper = void 0;\n\n          if (block.helperName.indexOf('[') === 0) {\n            block.helperName = getCompileVar(block.helperName.replace(/[[\\]]/g, ''), ctx, data);\n            dynamicHelper = true;\n          }\n\n          if (dynamicHelper || block.helperName in Template7Helpers) {\n            compiledArguments = getCompiledArguments(block.contextName, ctx, data);\n            resultString += \"r += (Template7Helpers\".concat(dynamicHelper ? \"[\".concat(block.helperName, \"]\") : \".\".concat(block.helperName), \").call(\").concat(ctx, \", \").concat(compiledArguments && \"\".concat(compiledArguments, \", \"), \"{hash:\").concat(JSON.stringify(block.hash), \", data: \").concat(data, \" || {}, fn: \").concat(getCompileFn(block, depth + 1), \", inverse: \").concat(getCompileInverse(block, depth + 1), \", root: root, parents: \").concat(parents, \"});\");\n          } else if (block.contextName.length > 0) {\n            throw new Error(\"Template7: Missing helper: \\\"\".concat(block.helperName, \"\\\"\"));\n          } else {\n            variable = getCompileVar(block.helperName, ctx, data);\n            resultString += \"if (\".concat(variable, \") {\");\n            resultString += \"if (isArray(\".concat(variable, \")) {\");\n            resultString += \"r += (Template7Helpers.each).call(\".concat(ctx, \", \").concat(variable, \", {hash:\").concat(JSON.stringify(block.hash), \", data: \").concat(data, \" || {}, fn: \").concat(getCompileFn(block, depth + 1), \", inverse: \").concat(getCompileInverse(block, depth + 1), \", root: root, parents: \").concat(parents, \"});\");\n            resultString += '}else {';\n            resultString += \"r += (Template7Helpers.with).call(\".concat(ctx, \", \").concat(variable, \", {hash:\").concat(JSON.stringify(block.hash), \", data: \").concat(data, \" || {}, fn: \").concat(getCompileFn(block, depth + 1), \", inverse: \").concat(getCompileInverse(block, depth + 1), \", root: root, parents: \").concat(parents, \"});\");\n            resultString += '}}';\n          }\n        }\n      }\n\n      resultString += '\\nreturn r;})';\n\n      if (depth === 1) {\n        // eslint-disable-next-line\n        t.compiled = eval(resultString);\n        return t.compiled;\n      }\n\n      return resultString;\n    }\n  }], [{\n    key: \"options\",\n    get: function get() {\n      return Template7Options;\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return Template7Partials;\n    }\n  }, {\n    key: \"helpers\",\n    get: function get() {\n      return Template7Helpers;\n    }\n  }]);\n\n  return Template7Class;\n}();\n\nfunction Template7() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var template = args[0],\n      data = args[1];\n\n  if (args.length === 2) {\n    var instance = new Template7Class(template);\n    var rendered = instance.compile()(data);\n    instance = null;\n    return rendered;\n  }\n\n  return new Template7Class(template);\n}\n\nTemplate7.registerHelper = function registerHelper(name, fn) {\n  Template7Class.helpers[name] = fn;\n};\n\nTemplate7.unregisterHelper = function unregisterHelper(name) {\n  Template7Class.helpers[name] = undefined;\n  delete Template7Class.helpers[name];\n};\n\nTemplate7.registerPartial = function registerPartial(name, template) {\n  Template7Class.partials[name] = {\n    template: template\n  };\n};\n\nTemplate7.unregisterPartial = function unregisterPartial(name) {\n  if (Template7Class.partials[name]) {\n    Template7Class.partials[name] = undefined;\n    delete Template7Class.partials[name];\n  }\n};\n\nTemplate7.compile = function compile(template, options) {\n  var instance = new Template7Class(template, options);\n  return instance.compile();\n};\n\nTemplate7.options = Template7Class.options;\nTemplate7.helpers = Template7Class.helpers;\nTemplate7.partials = Template7Class.partials;\nexport default Template7;","map":null,"metadata":{},"sourceType":"module"}