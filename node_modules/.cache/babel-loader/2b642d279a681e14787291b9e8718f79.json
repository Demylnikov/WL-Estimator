{"ast":null,"code":"import _classCallCheck from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/denismylnikov/Projects/wlapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport Support from '../../utils/support';\nimport Device from '../../utils/device';\n\nvar PullToRefresh =\n/*#__PURE__*/\nfunction (_Framework7Class) {\n  _inherits(PullToRefresh, _Framework7Class);\n\n  function PullToRefresh(app, el) {\n    var _this;\n\n    _classCallCheck(this, PullToRefresh);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PullToRefresh).call(this, {}, [app]));\n\n    var ptr = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var $el = $(el);\n    var $preloaderEl = $el.find('.ptr-preloader');\n    ptr.$el = $el;\n    ptr.el = $el[0];\n    ptr.app = app;\n    ptr.bottom = ptr.$el.hasClass('ptr-bottom'); // Extend defaults with modules params\n\n    ptr.useModulesParams({});\n    var isMaterial = app.theme === 'md'; // Done\n\n    ptr.done = function done() {\n      var $transitionTarget = isMaterial ? $preloaderEl : $el;\n      $transitionTarget.transitionEnd(function () {\n        $el.removeClass('ptr-transitioning ptr-pull-up ptr-pull-down');\n        $el.trigger('ptr:done');\n        ptr.emit('local::done ptrDone', $el[0]);\n      });\n      $el.removeClass('ptr-refreshing').addClass('ptr-transitioning');\n      return ptr;\n    };\n\n    ptr.refresh = function refresh() {\n      if ($el.hasClass('ptr-refreshing')) return ptr;\n      $el.addClass('ptr-transitioning ptr-refreshing');\n      $el.trigger('ptr:refresh', ptr.done);\n      ptr.emit('local::refresh ptrRefresh', $el[0], ptr.done);\n      return ptr;\n    }; // Events handling\n\n\n    var touchId;\n    var isTouched;\n    var isMoved;\n    var touchesStart = {};\n    var isScrolling;\n    var touchesDiff;\n    var refresh = false;\n    var useTranslate = false;\n    var forceUseTranslate = false;\n    var startTranslate = 0;\n    var translate;\n    var scrollTop;\n    var wasScrolled;\n    var triggerDistance;\n    var dynamicTriggerDistance;\n    var pullStarted;\n    var hasNavbar = false;\n    var scrollHeight;\n    var offsetHeight;\n    var maxScrollTop;\n    var $pageEl = $el.parents('.page');\n    if ($pageEl.find('.navbar').length > 0 || $pageEl.parents('.view').children('.navbar').length > 0) hasNavbar = true;\n    if ($pageEl.hasClass('no-navbar')) hasNavbar = false;\n    if (!hasNavbar && !ptr.bottom) $el.addClass('ptr-no-navbar'); // Define trigger distance\n\n    if ($el.attr('data-ptr-distance')) {\n      dynamicTriggerDistance = true;\n    } else {\n      triggerDistance = isMaterial ? 66 : 44;\n    }\n\n    function handleTouchStart(e) {\n      if (isTouched) {\n        if (Device.os === 'android') {\n          if ('targetTouches' in e && e.targetTouches.length > 1) return;\n        } else return;\n      }\n\n      if ($el.hasClass('ptr-refreshing')) {\n        return;\n      }\n\n      if ($(e.target).closest('.sortable-handler').length) return;\n      isMoved = false;\n      pullStarted = false;\n      isTouched = true;\n      isScrolling = undefined;\n      wasScrolled = undefined;\n      if (e.type === 'touchstart') touchId = e.targetTouches[0].identifier;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      var pageX;\n      var pageY;\n      var touch;\n\n      if (e.type === 'touchmove') {\n        if (touchId && e.touches) {\n          for (var i = 0; i < e.touches.length; i += 1) {\n            if (e.touches[i].identifier === touchId) {\n              touch = e.touches[i];\n            }\n          }\n        }\n\n        if (!touch) touch = e.targetTouches[0];\n        pageX = touch.pageX;\n        pageY = touch.pageY;\n      } else {\n        pageX = e.pageX;\n        pageY = e.pageY;\n      }\n\n      if (!pageX || !pageY) return;\n\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n      }\n\n      if (!isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      scrollTop = $el[0].scrollTop;\n\n      if (!isMoved) {\n        $el.removeClass('ptr-transitioning');\n        var targetIsScrollable;\n        scrollHeight = $el[0].scrollHeight;\n        offsetHeight = $el[0].offsetHeight;\n\n        if (ptr.bottom) {\n          maxScrollTop = scrollHeight - offsetHeight;\n        }\n\n        if (scrollTop > scrollHeight) {\n          isTouched = false;\n          return;\n        }\n\n        var $ptrWatchScrollable = $(e.target).closest('.ptr-watch-scroll');\n\n        if ($ptrWatchScrollable.length) {\n          $ptrWatchScrollable.each(function (ptrScrollableIndex, ptrScrollableEl) {\n            if (ptrScrollableEl === el) return;\n\n            if (ptrScrollableEl.scrollHeight > ptrScrollableEl.offsetHeight && $(ptrScrollableEl).css('overflow') === 'auto' && (!ptr.bottom && ptrScrollableEl.scrollTop > 0 || ptr.bottom && ptrScrollableEl.scrollTop < ptrScrollableEl.scrollHeight - ptrScrollableEl.offsetHeight)) {\n              targetIsScrollable = true;\n            }\n          });\n        }\n\n        if (targetIsScrollable) {\n          isTouched = false;\n          return;\n        }\n\n        if (dynamicTriggerDistance) {\n          triggerDistance = $el.attr('data-ptr-distance');\n          if (triggerDistance.indexOf('%') >= 0) triggerDistance = scrollHeight * parseInt(triggerDistance, 10) / 100;\n        }\n\n        startTranslate = $el.hasClass('ptr-refreshing') ? triggerDistance : 0;\n\n        if (scrollHeight === offsetHeight || Device.os !== 'ios' || isMaterial) {\n          useTranslate = true;\n        } else {\n          useTranslate = false;\n        }\n\n        forceUseTranslate = false;\n      }\n\n      isMoved = true;\n      touchesDiff = pageY - touchesStart.y;\n      if (typeof wasScrolled === 'undefined' && (ptr.bottom ? scrollTop !== maxScrollTop : scrollTop !== 0)) wasScrolled = true;\n      var ptrStarted = ptr.bottom ? touchesDiff < 0 && scrollTop >= maxScrollTop || scrollTop > maxScrollTop : touchesDiff > 0 && scrollTop <= 0 || scrollTop < 0;\n\n      if (ptrStarted) {\n        // iOS 8 fix\n        if (Device.os === 'ios' && parseInt(Device.osVersion.split('.')[0], 10) > 7) {\n          if (!ptr.bottom && scrollTop === 0 && !wasScrolled) useTranslate = true;\n          if (ptr.bottom && scrollTop === maxScrollTop && !wasScrolled) useTranslate = true;\n        }\n\n        if (!useTranslate && ptr.bottom && !isMaterial) {\n          $el.css('-webkit-overflow-scrolling', 'auto');\n          $el.scrollTop(maxScrollTop);\n          forceUseTranslate = true;\n        }\n\n        if (useTranslate || forceUseTranslate) {\n          if (e.cancelable) {\n            e.preventDefault();\n          }\n\n          translate = (ptr.bottom ? -1 * Math.pow(Math.abs(touchesDiff), 0.85) : Math.pow(touchesDiff, 0.85)) + startTranslate;\n\n          if (isMaterial) {\n            $preloaderEl.transform(\"translate3d(0,\".concat(translate, \"px,0)\")).find('.ptr-arrow').transform(\"rotate(\".concat(180 * (Math.abs(touchesDiff) / 66) + 100, \"deg)\"));\n          } else {\n            // eslint-disable-next-line\n            if (ptr.bottom) {\n              $el.children().transform(\"translate3d(0,\".concat(translate, \"px,0)\"));\n            } else {\n              $el.transform(\"translate3d(0,\".concat(translate, \"px,0)\"));\n            }\n          }\n        }\n\n        if ((useTranslate || forceUseTranslate) && Math.pow(Math.abs(touchesDiff), 0.85) > triggerDistance || !useTranslate && Math.abs(touchesDiff) >= triggerDistance * 2) {\n          refresh = true;\n          $el.addClass('ptr-pull-up').removeClass('ptr-pull-down');\n        } else {\n          refresh = false;\n          $el.removeClass('ptr-pull-up').addClass('ptr-pull-down');\n        }\n\n        if (!pullStarted) {\n          $el.trigger('ptr:pullstart');\n          ptr.emit('local::pullStart ptrPullStart', $el[0]);\n          pullStarted = true;\n        }\n\n        $el.trigger('ptr:pullmove', {\n          event: e,\n          scrollTop: scrollTop,\n          translate: translate,\n          touchesDiff: touchesDiff\n        });\n        ptr.emit('local::pullMove ptrPullMove', $el[0], {\n          event: e,\n          scrollTop: scrollTop,\n          translate: translate,\n          touchesDiff: touchesDiff\n        });\n      } else {\n        pullStarted = false;\n        $el.removeClass('ptr-pull-up ptr-pull-down');\n        refresh = false;\n      }\n    }\n\n    function handleTouchEnd(e) {\n      if (e.type === 'touchend' && e.changedTouches && e.changedTouches.length > 0 && touchId) {\n        if (e.changedTouches[0].identifier !== touchId) {\n          isTouched = false;\n          isScrolling = false;\n          isMoved = false;\n          touchId = null;\n          return;\n        }\n      }\n\n      if (!isTouched || !isMoved) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      if (translate) {\n        $el.addClass('ptr-transitioning');\n        translate = 0;\n      }\n\n      if (isMaterial) {\n        $preloaderEl.transform('').find('.ptr-arrow').transform('');\n      } else {\n        // eslint-disable-next-line\n        if (ptr.bottom) {\n          $el.children().transform('');\n        } else {\n          $el.transform('');\n        }\n      }\n\n      if (!useTranslate && ptr.bottom && !isMaterial) {\n        $el.css('-webkit-overflow-scrolling', '');\n      }\n\n      if (refresh) {\n        $el.addClass('ptr-refreshing');\n        $el.trigger('ptr:refresh', ptr.done);\n        ptr.emit('local::refresh ptrRefresh', $el[0], ptr.done);\n      } else {\n        $el.removeClass('ptr-pull-down');\n      }\n\n      isTouched = false;\n      isMoved = false;\n\n      if (pullStarted) {\n        $el.trigger('ptr:pullend');\n        ptr.emit('local::pullEnd ptrPullEnd', $el[0]);\n      }\n    }\n\n    if (!$pageEl.length || !$el.length) return _possibleConstructorReturn(_this, ptr);\n    $el[0].f7PullToRefresh = ptr; // Events\n\n    ptr.attachEvents = function attachEvents() {\n      var passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      $el.on(app.touchEvents.start, handleTouchStart, passive);\n      app.on('touchmove:active', handleTouchMove);\n      app.on('touchend:passive', handleTouchEnd);\n    };\n\n    ptr.detachEvents = function detachEvents() {\n      var passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      $el.off(app.touchEvents.start, handleTouchStart, passive);\n      app.off('touchmove:active', handleTouchMove);\n      app.off('touchend:passive', handleTouchEnd);\n    }; // Install Modules\n\n\n    ptr.useModules(); // Init\n\n    ptr.init();\n    return _possibleConstructorReturn(_this, ptr);\n  }\n\n  _createClass(PullToRefresh, [{\n    key: \"init\",\n    value: function init() {\n      var ptr = this;\n      ptr.attachEvents();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var ptr = this;\n      ptr.emit('local::beforeDestroy ptrBeforeDestroy', ptr);\n      ptr.$el.trigger('ptr:beforedestroy', ptr);\n      delete ptr.el.f7PullToRefresh;\n      ptr.detachEvents();\n      Utils.deleteProps(ptr);\n      ptr = null;\n    }\n  }]);\n\n  return PullToRefresh;\n}(Framework7Class);\n\nexport default PullToRefresh;","map":null,"metadata":{},"sourceType":"module"}